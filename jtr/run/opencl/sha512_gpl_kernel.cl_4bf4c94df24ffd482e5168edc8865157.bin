//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: UNKNOWN
// Unknown Toolkit Version
// Based on NVVM 7.0.1
//

.version 8.6
.target sm_86, texmode_independent
.address_size 64

	// .globl	kernel_plaintext_raw
.const .align 4 .b8 loop_index[168] = {0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 7};
.const .align 4 .b8 generator_index[32] = {0, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 1};
.const .align 8 .b8 k[640] = {34, 174, 40, 215, 152, 47, 138, 66, 205, 101, 239, 35, 145, 68, 55, 113, 47, 59, 77, 236, 207, 251, 192, 181, 188, 219, 137, 129, 165, 219, 181, 233, 56, 181, 72, 243, 91, 194, 86, 57, 25, 208, 5, 182, 241, 17, 241, 89, 155, 79, 25, 175, 164, 130, 63, 146, 24, 129, 109, 218, 213, 94, 28, 171, 66, 2, 3, 163, 152, 170, 7, 216, 190, 111, 112, 69, 1, 91, 131, 18, 140, 178, 228, 78, 190, 133, 49, 36, 226, 180, 255, 213, 195, 125, 12, 85, 111, 137, 123, 242, 116, 93, 190, 114, 177, 150, 22, 59, 254, 177, 222, 128, 53, 18, 199, 37, 167, 6, 220, 155, 148, 38, 105, 207, 116, 241, 155, 193, 210, 74, 241, 158, 193, 105, 155, 228, 227, 37, 79, 56, 134, 71, 190, 239, 181, 213, 140, 139, 198, 157, 193, 15, 101, 156, 172, 119, 204, 161, 12, 36, 117, 2, 43, 89, 111, 44, 233, 45, 131, 228, 166, 110, 170, 132, 116, 74, 212, 251, 65, 189, 220, 169, 176, 92, 181, 83, 17, 131, 218, 136, 249, 118, 171, 223, 102, 238, 82, 81, 62, 152, 16, 50, 180, 45, 109, 198, 49, 168, 63, 33, 251, 152, 200, 39, 3, 176, 228, 14, 239, 190, 199, 127, 89, 191, 194, 143, 168, 61, 243, 11, 224, 198, 37, 167, 10, 147, 71, 145, 167, 213, 111, 130, 3, 224, 81, 99, 202, 6, 112, 110, 14, 10, 103, 41, 41, 20, 252, 47, 210, 70, 133, 10, 183, 39, 38, 201, 38, 92, 56, 33, 27, 46, 237, 42, 196, 90, 252, 109, 44, 77, 223, 179, 149, 157, 19, 13, 56, 83, 222, 99, 175, 139, 84, 115, 10, 101, 168, 178, 119, 60, 187, 10, 106, 118, 230, 174, 237, 71, 46, 201, 194, 129, 59, 53, 130, 20, 133, 44, 114, 146, 100, 3, 241, 76, 161, 232, 191, 162, 1, 48, 66, 188, 75, 102, 26, 168, 145, 151, 248, 208, 112, 139, 75, 194, 48, 190, 84, 6, 163, 81, 108, 199, 24, 82, 239, 214, 25, 232, 146, 209, 16, 169, 101, 85, 36, 6, 153, 214, 42, 32, 113, 87, 133, 53, 14, 244, 184, 209, 187, 50, 112, 160, 106, 16, 200, 208, 210, 184, 22, 193, 164, 25, 83, 171, 65, 81, 8, 108, 55, 30, 153, 235, 142, 223, 76, 119, 72, 39, 168, 72, 155, 225, 181, 188, 176, 52, 99, 90, 201, 197, 179, 12, 28, 57, 203, 138, 65, 227, 74, 170, 216, 78, 115, 227, 99, 119, 79, 202, 156, 91, 163, 184, 178, 214, 243, 111, 46, 104, 252, 178, 239, 93, 238, 130, 143, 116, 96, 47, 23, 67, 111, 99, 165, 120, 114, 171, 240, 161, 20, 120, 200, 132, 236, 57, 100, 26, 8, 2, 199, 140, 40, 30, 99, 35, 250, 255, 190, 144, 233, 189, 130, 222, 235, 108, 80, 164, 21, 121, 198, 178, 247, 163, 249, 190, 43, 83, 114, 227, 242, 120, 113, 198, 156, 97, 38, 234, 206, 62, 39, 202, 7, 194, 192, 33, 199, 184, 134, 209, 30, 235, 224, 205, 214, 125, 218, 234, 120, 209, 110, 238, 127, 79, 125, 245, 186, 111, 23, 114, 170, 103, 240, 6, 166, 152, 200, 162, 197, 125, 99, 10, 174, 13, 249, 190, 4, 152, 63, 17, 27, 71, 28, 19, 53, 11, 113, 27, 132, 125, 4, 35, 245, 119, 219, 40, 147, 36, 199, 64, 123, 171, 202, 50, 188, 190, 201, 21, 10, 190, 158, 60, 76, 13, 16, 156, 196, 103, 29, 67, 182, 66, 62, 203, 190, 212, 197, 76, 42, 126, 101, 252, 156, 41, 127, 89, 236, 250, 214, 58, 171, 111, 203, 95, 23, 88, 71, 74, 140, 25, 68, 108};
.const .align 8 .b8 clear_mask[72] = {255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255};

.entry kernel_plaintext_raw(
	.param .u64 .ptr .const .align 4 kernel_plaintext_raw_param_0,
	.param .u64 .ptr .global .align 4 kernel_plaintext_raw_param_1,
	.param .u64 .ptr .global .align 4 kernel_plaintext_raw_param_2,
	.param .u64 .ptr .global .align 4 kernel_plaintext_raw_param_3,
	.param .u64 .ptr .global .align 4 kernel_plaintext_raw_param_4,
	.param .u32 kernel_plaintext_raw_param_5,
	.param .u64 .ptr .global .align 4 kernel_plaintext_raw_param_6,
	.param .u64 .ptr .global .align 8 kernel_plaintext_raw_param_7
)
{
	.local .align 16 .b8 	__local_depot0[128];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<86>;


	mov.u64 	%SPL, __local_depot0;
	ld.param.u64 	%rd24, [kernel_plaintext_raw_param_1];
	ld.param.u64 	%rd34, [kernel_plaintext_raw_param_2];
	ld.param.u64 	%rd25, [kernel_plaintext_raw_param_6];
	ld.param.u64 	%rd26, [kernel_plaintext_raw_param_7];
	add.u64 	%rd1, %SPL, 0;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mov.b32 	%r8, %envreg3;
	add.s32 	%r9, %r7, %r8;
	mad.lo.s32 	%r10, %r6, %r5, %r9;
	cvt.s64.s32 	%rd2, %r10;
	mul.wide.s32 	%rd36, %r10, 4;
	add.s64 	%rd37, %rd34, %rd36;
	ld.global.nc.u32 	%r1, [%rd37];
	mov.u64 	%rd79, 0;
	st.local.v2.u64 	[%rd1], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+16], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+32], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+48], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+64], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+80], {%rd79, %rd79};
	st.local.v2.u64 	[%rd1+96], {%rd79, %rd79};
	st.local.u64 	[%rd1+112], %rd79;
	and.b32  	%r2, %r1, 63;
	setp.eq.s32 	%p1, %r2, 0;
	mov.u64 	%rd80, %rd79;
	mov.u64 	%rd81, %rd79;
	mov.u64 	%rd82, %rd79;
	mov.u64 	%rd83, %rd79;
	mov.u64 	%rd84, %rd79;
	mov.u64 	%rd85, %rd79;
	@%p1 bra 	$L__BB0_4;

	shr.u32 	%r12, %r1, 6;
	mul.wide.u32 	%rd38, %r12, 4;
	add.s64 	%rd78, %rd24, %rd38;
	mov.u32 	%r17, 0;
	mov.u64 	%rd77, %rd1;

$L__BB0_2:
	add.s64 	%rd8, %rd78, 4;
	ld.global.nc.u32 	%r13, [%rd78];
	add.s64 	%rd9, %rd77, 4;
	st.local.u32 	[%rd77], %r13;
	add.s32 	%r17, %r17, 4;
	setp.lt.u32 	%p2, %r17, %r2;
	mov.u64 	%rd77, %rd9;
	mov.u64 	%rd78, %rd8;
	@%p2 bra 	$L__BB0_2;

	ld.local.v2.u64 	{%rd85, %rd84}, [%rd1+64];
	ld.local.v2.u64 	{%rd83, %rd82}, [%rd1+80];
	ld.local.v2.u64 	{%rd81, %rd80}, [%rd1+96];
	ld.local.u64 	%rd79, [%rd1+112];

$L__BB0_4:
	and.b32  	%r14, %r2, 56;
	cvt.u64.u32 	%rd45, %r14;
	add.s64 	%rd46, %rd1, %rd45;
	shl.b32 	%r15, %r1, 3;
	cvt.u64.u32 	%rd47, %r15;
	and.b64  	%rd48, %rd47, 56;
	mov.u64 	%rd49, clear_mask;
	add.s64 	%rd50, %rd49, %rd48;
	ld.const.u64 	%rd51, [%rd50];
	ld.local.u64 	%rd52, [%rd46];
	and.b64  	%rd53, %rd51, %rd52;
	and.b32  	%r16, %r15, 56;
	mov.u64 	%rd54, 128;
	shl.b64 	%rd55, %rd54, %r16;
	or.b64  	%rd56, %rd53, %rd55;
	st.local.u64 	[%rd46], %rd56;
	shl.b64 	%rd57, %rd2, 2;
	add.s64 	%rd58, %rd25, %rd57;
	st.global.u32 	[%rd58], %r2;
	ld.local.v2.u64 	{%rd59, %rd60}, [%rd1];
	shl.b64 	%rd63, %rd2, 7;
	add.s64 	%rd64, %rd26, %rd63;
	st.global.u64 	[%rd64], %rd59;
	st.global.u64 	[%rd64+8], %rd60;
	ld.local.v2.u64 	{%rd65, %rd66}, [%rd1+16];
	st.global.u64 	[%rd64+16], %rd65;
	st.global.u64 	[%rd64+24], %rd66;
	ld.local.v2.u64 	{%rd69, %rd70}, [%rd1+32];
	st.global.u64 	[%rd64+32], %rd69;
	st.global.u64 	[%rd64+40], %rd70;
	ld.local.v2.u64 	{%rd73, %rd74}, [%rd1+48];
	st.global.u64 	[%rd64+48], %rd73;
	st.global.u64 	[%rd64+56], %rd74;
	st.global.u64 	[%rd64+64], %rd85;
	st.global.u64 	[%rd64+72], %rd84;
	st.global.u64 	[%rd64+80], %rd83;
	st.global.u64 	[%rd64+88], %rd82;
	st.global.u64 	[%rd64+96], %rd81;
	st.global.u64 	[%rd64+104], %rd80;
	st.global.u64 	[%rd64+112], %rd79;
	ret;

}
	// .globl	kernel_crypt
.entry kernel_crypt(
	.param .u32 kernel_crypt_param_0,
	.param .u64 .ptr .global .align 4 kernel_crypt_param_1,
	.param .u64 .ptr .global .align 4 kernel_crypt_param_2,
	.param .u64 .ptr .global .align 4 kernel_crypt_param_3,
	.param .u64 .ptr .global .align 8 kernel_crypt_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<801>;
	.reg .b64 	%rd<1091>;


	ld.param.u64 	%rd79, [kernel_crypt_param_3];
	ld.param.u64 	%rd80, [kernel_crypt_param_4];
	mov.b32 	%r7, %envreg3;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %tid.x;
	add.s32 	%r11, %r10, %r7;
	mad.lo.s32 	%r1, %r9, %r8, %r11;
	mul.wide.s32 	%rd81, %r1, 4;
	add.s64 	%rd82, %rd79, %rd81;
	mul.wide.s32 	%rd83, %r1, 16;
	shl.b64 	%rd84, %rd83, 3;
	add.s64 	%rd85, %rd80, %rd84;
	ld.global.nc.u64 	%rd86, [%rd85];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r12, %temp}, %rd86;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %rd86;
	}
	mov.u32 	%r14, 291;
	mov.u32 	%r800, 0;
	prmt.b32 	%r15, %r12, %r800, %r14;
	prmt.b32 	%r16, %r13, %r800, %r14;
	mov.b64 	%rd1067, {%r16, %r15};
	ld.global.nc.u64 	%rd87, [%rd85+8];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r17, %temp}, %rd87;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r18}, %rd87;
	}
	prmt.b32 	%r19, %r17, %r800, %r14;
	prmt.b32 	%r20, %r18, %r800, %r14;
	mov.b64 	%rd1068, {%r20, %r19};
	ld.global.nc.u64 	%rd88, [%rd85+16];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r21, %temp}, %rd88;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r22}, %rd88;
	}
	prmt.b32 	%r23, %r21, %r800, %r14;
	prmt.b32 	%r24, %r22, %r800, %r14;
	mov.b64 	%rd1069, {%r24, %r23};
	ld.global.nc.u64 	%rd89, [%rd85+24];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r25, %temp}, %rd89;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r26}, %rd89;
	}
	prmt.b32 	%r27, %r25, %r800, %r14;
	prmt.b32 	%r28, %r26, %r800, %r14;
	mov.b64 	%rd1070, {%r28, %r27};
	ld.global.nc.u64 	%rd90, [%rd85+32];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r29, %temp}, %rd90;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r30}, %rd90;
	}
	prmt.b32 	%r31, %r29, %r800, %r14;
	prmt.b32 	%r32, %r30, %r800, %r14;
	mov.b64 	%rd1071, {%r32, %r31};
	ld.global.nc.u64 	%rd91, [%rd85+40];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r33, %temp}, %rd91;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r34}, %rd91;
	}
	prmt.b32 	%r35, %r33, %r800, %r14;
	prmt.b32 	%r36, %r34, %r800, %r14;
	mov.b64 	%rd1072, {%r36, %r35};
	ld.global.nc.u64 	%rd92, [%rd85+48];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r37, %temp}, %rd92;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r38}, %rd92;
	}
	prmt.b32 	%r39, %r37, %r800, %r14;
	prmt.b32 	%r40, %r38, %r800, %r14;
	mov.b64 	%rd1073, {%r40, %r39};
	ld.global.nc.u64 	%rd93, [%rd85+56];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r41, %temp}, %rd93;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r42}, %rd93;
	}
	prmt.b32 	%r43, %r41, %r800, %r14;
	prmt.b32 	%r44, %r42, %r800, %r14;
	mov.b64 	%rd1074, {%r44, %r43};
	ld.global.nc.u64 	%rd94, [%rd85+64];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %rd94;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %rd94;
	}
	prmt.b32 	%r47, %r45, %r800, %r14;
	prmt.b32 	%r48, %r46, %r800, %r14;
	mov.b64 	%rd1075, {%r48, %r47};
	ld.global.nc.u64 	%rd95, [%rd85+72];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %rd95;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %rd95;
	}
	prmt.b32 	%r51, %r49, %r800, %r14;
	prmt.b32 	%r52, %r50, %r800, %r14;
	mov.b64 	%rd1076, {%r52, %r51};
	ld.global.nc.u64 	%rd96, [%rd85+80];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r53, %temp}, %rd96;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r54}, %rd96;
	}
	prmt.b32 	%r55, %r53, %r800, %r14;
	prmt.b32 	%r56, %r54, %r800, %r14;
	mov.b64 	%rd1077, {%r56, %r55};
	ld.global.nc.u64 	%rd97, [%rd85+88];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r57, %temp}, %rd97;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r58}, %rd97;
	}
	prmt.b32 	%r59, %r57, %r800, %r14;
	prmt.b32 	%r60, %r58, %r800, %r14;
	mov.b64 	%rd1078, {%r60, %r59};
	ld.global.nc.u64 	%rd98, [%rd85+96];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r61, %temp}, %rd98;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r62}, %rd98;
	}
	prmt.b32 	%r63, %r61, %r800, %r14;
	prmt.b32 	%r64, %r62, %r800, %r14;
	mov.b64 	%rd1079, {%r64, %r63};
	ld.global.nc.u64 	%rd99, [%rd85+104];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r65, %temp}, %rd99;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r66}, %rd99;
	}
	prmt.b32 	%r67, %r65, %r800, %r14;
	prmt.b32 	%r68, %r66, %r800, %r14;
	mov.b64 	%rd1080, {%r68, %r67};
	ld.global.nc.u64 	%rd100, [%rd85+112];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r69, %temp}, %rd100;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r70}, %rd100;
	}
	prmt.b32 	%r71, %r69, %r800, %r14;
	prmt.b32 	%r72, %r70, %r800, %r14;
	mov.b64 	%rd1081, {%r72, %r71};
	ld.global.nc.u32 	%r73, [%rd82];
	mul.wide.u32 	%rd1082, %r73, 8;
	mov.u64 	%rd101, 5840696475078001361;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r74,%dummy}, %rd101;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r75}, %rd101;
	}
	shf.r.wrap.b32 	%r76, %r75, %r74, 18;
	shf.r.wrap.b32 	%r77, %r74, %r75, 18;
	mov.b64 	%rd102, {%r77, %r76};
	shf.r.wrap.b32 	%r78, %r75, %r74, 14;
	shf.r.wrap.b32 	%r79, %r74, %r75, 14;
	mov.b64 	%rd103, {%r79, %r78};
	xor.b64  	%rd104, %rd103, %rd102;
	shf.l.wrap.b32 	%r80, %r74, %r75, 23;
	shf.l.wrap.b32 	%r81, %r75, %r74, 23;
	mov.b64 	%rd105, {%r81, %r80};
	xor.b64  	%rd106, %rd104, %rd105;
	add.s64 	%rd107, %rd106, %rd1067;
	mov.u64 	%rd108, 7640891576956012808;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r82}, %rd108;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r83,%dummy}, %rd108;
	}
	shf.l.wrap.b32 	%r84, %r83, %r82, 30;
	shf.l.wrap.b32 	%r85, %r82, %r83, 30;
	mov.b64 	%rd109, {%r85, %r84};
	shf.r.wrap.b32 	%r86, %r82, %r83, 28;
	shf.r.wrap.b32 	%r87, %r83, %r82, 28;
	mov.b64 	%rd110, {%r87, %r86};
	xor.b64  	%rd111, %rd110, %rd109;
	shf.l.wrap.b32 	%r88, %r83, %r82, 25;
	shf.l.wrap.b32 	%r89, %r82, %r83, 25;
	mov.b64 	%rd112, {%r89, %r88};
	xor.b64  	%rd113, %rd111, %rd112;
	add.s64 	%rd114, %rd113, %rd107;
	add.s64 	%rd115, %rd107, 7151922335638569927;
	add.s64 	%rd116, %rd114, -549249324024138239;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r90,%dummy}, %rd115;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r91}, %rd115;
	}
	shf.r.wrap.b32 	%r92, %r91, %r90, 14;
	shf.r.wrap.b32 	%r93, %r90, %r91, 14;
	mov.b64 	%rd117, {%r93, %r92};
	shf.r.wrap.b32 	%r94, %r91, %r90, 18;
	shf.r.wrap.b32 	%r95, %r90, %r91, 18;
	mov.b64 	%rd118, {%r95, %r94};
	xor.b64  	%rd119, %rd117, %rd118;
	shf.l.wrap.b32 	%r96, %r90, %r91, 23;
	shf.l.wrap.b32 	%r97, %r91, %r90, 23;
	mov.b64 	%rd120, {%r97, %r96};
	xor.b64  	%rd121, %rd119, %rd120;
	and.b64  	%rd122, %rd115, -3887949035690463538;
	xor.b64  	%rd123, %rd122, -7276294671716946913;
	add.s64 	%rd124, %rd123, %rd121;
	add.s64 	%rd125, %rd124, %rd1068;
	and.b64  	%rd126, %rd116, -3355664534840381901;
	or.b64  	%rd127, %rd126, 3026882967131160840;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r98,%dummy}, %rd116;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r99}, %rd116;
	}
	shf.r.wrap.b32 	%r100, %r99, %r98, 28;
	shf.r.wrap.b32 	%r101, %r98, %r99, 28;
	mov.b64 	%rd128, {%r101, %r100};
	shf.l.wrap.b32 	%r102, %r98, %r99, 30;
	shf.l.wrap.b32 	%r103, %r99, %r98, 30;
	mov.b64 	%rd129, {%r103, %r102};
	xor.b64  	%rd130, %rd128, %rd129;
	shf.l.wrap.b32 	%r104, %r98, %r99, 25;
	shf.l.wrap.b32 	%r105, %r99, %r98, 25;
	mov.b64 	%rd131, {%r105, %r104};
	xor.b64  	%rd132, %rd130, %rd131;
	add.s64 	%rd133, %rd132, %rd127;
	add.s64 	%rd134, %rd133, %rd125;
	add.s64 	%rd135, %rd125, -3663095898801038493;
	add.s64 	%rd136, %rd134, -8017781463737883848;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r106,%dummy}, %rd135;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r107}, %rd135;
	}
	shf.r.wrap.b32 	%r108, %r107, %r106, 14;
	shf.r.wrap.b32 	%r109, %r106, %r107, 14;
	mov.b64 	%rd137, {%r109, %r108};
	shf.r.wrap.b32 	%r110, %r107, %r106, 18;
	shf.r.wrap.b32 	%r111, %r106, %r107, 18;
	mov.b64 	%rd138, {%r111, %r110};
	xor.b64  	%rd139, %rd137, %rd138;
	shf.l.wrap.b32 	%r112, %r106, %r107, 23;
	shf.l.wrap.b32 	%r113, %r107, %r106, 23;
	mov.b64 	%rd140, {%r113, %r112};
	xor.b64  	%rd141, %rd139, %rd140;
	xor.b64  	%rd142, %rd115, 5840696475078001361;
	and.b64  	%rd143, %rd135, %rd142;
	xor.b64  	%rd144, %rd143, 5840696475078001361;
	add.s64 	%rd145, %rd144, %rd141;
	add.s64 	%rd146, %rd145, %rd1069;
	and.b64  	%rd147, %rd136, %rd116;
	or.b64  	%rd148, %rd136, %rd116;
	and.b64  	%rd149, %rd148, 7640891576956012808;
	or.b64  	%rd150, %rd149, %rd147;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r114,%dummy}, %rd136;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r115}, %rd136;
	}
	shf.r.wrap.b32 	%r116, %r115, %r114, 28;
	shf.r.wrap.b32 	%r117, %r114, %r115, 28;
	mov.b64 	%rd151, {%r117, %r116};
	shf.l.wrap.b32 	%r118, %r114, %r115, 30;
	shf.l.wrap.b32 	%r119, %r115, %r114, 30;
	mov.b64 	%rd152, {%r119, %r118};
	xor.b64  	%rd153, %rd151, %rd152;
	shf.l.wrap.b32 	%r120, %r114, %r115, 25;
	shf.l.wrap.b32 	%r121, %r115, %r114, 25;
	mov.b64 	%rd154, {%r121, %r120};
	xor.b64  	%rd155, %rd153, %rd154;
	add.s64 	%rd156, %rd155, %rd150;
	add.s64 	%rd157, %rd156, %rd146;
	add.s64 	%rd158, %rd146, 877659737583668873;
	add.s64 	%rd159, %rd157, 5820449915117741902;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r122,%dummy}, %rd158;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r123}, %rd158;
	}
	shf.r.wrap.b32 	%r124, %r123, %r122, 14;
	shf.r.wrap.b32 	%r125, %r122, %r123, 14;
	mov.b64 	%rd160, {%r125, %r124};
	shf.r.wrap.b32 	%r126, %r123, %r122, 18;
	shf.r.wrap.b32 	%r127, %r122, %r123, 18;
	mov.b64 	%rd161, {%r127, %r126};
	xor.b64  	%rd162, %rd160, %rd161;
	shf.l.wrap.b32 	%r128, %r122, %r123, 23;
	shf.l.wrap.b32 	%r129, %r123, %r122, 23;
	mov.b64 	%rd163, {%r129, %r128};
	xor.b64  	%rd164, %rd162, %rd163;
	xor.b64  	%rd165, %rd135, %rd115;
	and.b64  	%rd166, %rd158, %rd165;
	xor.b64  	%rd167, %rd166, %rd115;
	add.s64 	%rd168, %rd167, %rd164;
	add.s64 	%rd169, %rd168, %rd1070;
	and.b64  	%rd170, %rd159, %rd136;
	or.b64  	%rd171, %rd159, %rd136;
	and.b64  	%rd172, %rd171, %rd116;
	or.b64  	%rd173, %rd172, %rd170;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r130,%dummy}, %rd159;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r131}, %rd159;
	}
	shf.r.wrap.b32 	%r132, %r131, %r130, 28;
	shf.r.wrap.b32 	%r133, %r130, %r131, 28;
	mov.b64 	%rd174, {%r133, %r132};
	shf.l.wrap.b32 	%r134, %r130, %r131, 30;
	shf.l.wrap.b32 	%r135, %r131, %r130, 30;
	mov.b64 	%rd175, {%r135, %r134};
	xor.b64  	%rd176, %rd174, %rd175;
	shf.l.wrap.b32 	%r136, %r130, %r131, 25;
	shf.l.wrap.b32 	%r137, %r131, %r130, 25;
	mov.b64 	%rd177, {%r137, %r136};
	xor.b64  	%rd178, %rd176, %rd177;
	add.s64 	%rd179, %rd178, %rd173;
	add.s64 	%rd180, %rd179, %rd169;
	add.s64 	%rd181, %rd169, -6571292209873868907;
	add.s64 	%rd182, %rd180, 4234560286879669901;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r138,%dummy}, %rd181;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r139}, %rd181;
	}
	shf.r.wrap.b32 	%r140, %r139, %r138, 14;
	shf.r.wrap.b32 	%r141, %r138, %r139, 14;
	mov.b64 	%rd183, {%r141, %r140};
	shf.r.wrap.b32 	%r142, %r139, %r138, 18;
	shf.r.wrap.b32 	%r143, %r138, %r139, 18;
	mov.b64 	%rd184, {%r143, %r142};
	xor.b64  	%rd185, %rd183, %rd184;
	shf.l.wrap.b32 	%r144, %r138, %r139, 23;
	shf.l.wrap.b32 	%r145, %r139, %r138, 23;
	mov.b64 	%rd186, {%r145, %r144};
	xor.b64  	%rd187, %rd185, %rd186;
	xor.b64  	%rd188, %rd158, %rd135;
	and.b64  	%rd189, %rd181, %rd188;
	xor.b64  	%rd190, %rd189, %rd135;
	add.s64 	%rd191, %rd190, %rd115;
	add.s64 	%rd192, %rd191, %rd187;
	add.s64 	%rd193, %rd192, %rd1071;
	add.s64 	%rd194, %rd193, 4131703408338449720;
	add.s64 	%rd195, %rd194, %rd116;
	and.b64  	%rd196, %rd182, %rd159;
	or.b64  	%rd197, %rd182, %rd159;
	and.b64  	%rd198, %rd197, %rd136;
	or.b64  	%rd199, %rd198, %rd196;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r146,%dummy}, %rd182;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r147}, %rd182;
	}
	shf.r.wrap.b32 	%r148, %r147, %r146, 28;
	shf.r.wrap.b32 	%r149, %r146, %r147, 28;
	mov.b64 	%rd200, {%r149, %r148};
	shf.l.wrap.b32 	%r150, %r146, %r147, 30;
	shf.l.wrap.b32 	%r151, %r147, %r146, 30;
	mov.b64 	%rd201, {%r151, %r150};
	xor.b64  	%rd202, %rd200, %rd201;
	shf.l.wrap.b32 	%r152, %r146, %r147, 25;
	shf.l.wrap.b32 	%r153, %r147, %r146, 25;
	mov.b64 	%rd203, {%r153, %r152};
	xor.b64  	%rd204, %rd202, %rd203;
	add.s64 	%rd205, %rd204, %rd199;
	add.s64 	%rd206, %rd205, %rd194;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r154,%dummy}, %rd195;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r155}, %rd195;
	}
	shf.r.wrap.b32 	%r156, %r155, %r154, 14;
	shf.r.wrap.b32 	%r157, %r154, %r155, 14;
	mov.b64 	%rd207, {%r157, %r156};
	shf.r.wrap.b32 	%r158, %r155, %r154, 18;
	shf.r.wrap.b32 	%r159, %r154, %r155, 18;
	mov.b64 	%rd208, {%r159, %r158};
	xor.b64  	%rd209, %rd207, %rd208;
	shf.l.wrap.b32 	%r160, %r154, %r155, 23;
	shf.l.wrap.b32 	%r161, %r155, %r154, 23;
	mov.b64 	%rd210, {%r161, %r160};
	xor.b64  	%rd211, %rd209, %rd210;
	xor.b64  	%rd212, %rd181, %rd158;
	and.b64  	%rd213, %rd195, %rd212;
	xor.b64  	%rd214, %rd213, %rd158;
	add.s64 	%rd215, %rd214, %rd135;
	add.s64 	%rd216, %rd215, %rd211;
	add.s64 	%rd217, %rd216, %rd1072;
	add.s64 	%rd218, %rd217, 6480981068601479193;
	add.s64 	%rd219, %rd218, %rd136;
	and.b64  	%rd220, %rd206, %rd182;
	or.b64  	%rd221, %rd206, %rd182;
	and.b64  	%rd222, %rd221, %rd159;
	or.b64  	%rd223, %rd222, %rd220;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r162,%dummy}, %rd206;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r163}, %rd206;
	}
	shf.r.wrap.b32 	%r164, %r163, %r162, 28;
	shf.r.wrap.b32 	%r165, %r162, %r163, 28;
	mov.b64 	%rd224, {%r165, %r164};
	shf.l.wrap.b32 	%r166, %r162, %r163, 30;
	shf.l.wrap.b32 	%r167, %r163, %r162, 30;
	mov.b64 	%rd225, {%r167, %r166};
	xor.b64  	%rd226, %rd224, %rd225;
	shf.l.wrap.b32 	%r168, %r162, %r163, 25;
	shf.l.wrap.b32 	%r169, %r163, %r162, 25;
	mov.b64 	%rd227, {%r169, %r168};
	xor.b64  	%rd228, %rd226, %rd227;
	add.s64 	%rd229, %rd228, %rd223;
	add.s64 	%rd230, %rd229, %rd218;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r170,%dummy}, %rd219;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r171}, %rd219;
	}
	shf.r.wrap.b32 	%r172, %r171, %r170, 14;
	shf.r.wrap.b32 	%r173, %r170, %r171, 14;
	mov.b64 	%rd231, {%r173, %r172};
	shf.r.wrap.b32 	%r174, %r171, %r170, 18;
	shf.r.wrap.b32 	%r175, %r170, %r171, 18;
	mov.b64 	%rd232, {%r175, %r174};
	xor.b64  	%rd233, %rd231, %rd232;
	shf.l.wrap.b32 	%r176, %r170, %r171, 23;
	shf.l.wrap.b32 	%r177, %r171, %r170, 23;
	mov.b64 	%rd234, {%r177, %r176};
	xor.b64  	%rd235, %rd233, %rd234;
	xor.b64  	%rd236, %rd195, %rd181;
	and.b64  	%rd237, %rd219, %rd236;
	xor.b64  	%rd238, %rd237, %rd181;
	add.s64 	%rd239, %rd238, %rd158;
	add.s64 	%rd240, %rd239, %rd235;
	add.s64 	%rd241, %rd240, %rd1073;
	add.s64 	%rd242, %rd241, -7908458776815382629;
	add.s64 	%rd243, %rd242, %rd159;
	and.b64  	%rd244, %rd230, %rd206;
	or.b64  	%rd245, %rd230, %rd206;
	and.b64  	%rd246, %rd245, %rd182;
	or.b64  	%rd247, %rd246, %rd244;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r178,%dummy}, %rd230;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r179}, %rd230;
	}
	shf.r.wrap.b32 	%r180, %r179, %r178, 28;
	shf.r.wrap.b32 	%r181, %r178, %r179, 28;
	mov.b64 	%rd248, {%r181, %r180};
	shf.l.wrap.b32 	%r182, %r178, %r179, 30;
	shf.l.wrap.b32 	%r183, %r179, %r178, 30;
	mov.b64 	%rd249, {%r183, %r182};
	xor.b64  	%rd250, %rd248, %rd249;
	shf.l.wrap.b32 	%r184, %r178, %r179, 25;
	shf.l.wrap.b32 	%r185, %r179, %r178, 25;
	mov.b64 	%rd251, {%r185, %r184};
	xor.b64  	%rd252, %rd250, %rd251;
	add.s64 	%rd253, %rd252, %rd247;
	add.s64 	%rd254, %rd253, %rd242;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r186,%dummy}, %rd243;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r187}, %rd243;
	}
	shf.r.wrap.b32 	%r188, %r187, %r186, 14;
	shf.r.wrap.b32 	%r189, %r186, %r187, 14;
	mov.b64 	%rd255, {%r189, %r188};
	shf.r.wrap.b32 	%r190, %r187, %r186, 18;
	shf.r.wrap.b32 	%r191, %r186, %r187, 18;
	mov.b64 	%rd256, {%r191, %r190};
	xor.b64  	%rd257, %rd255, %rd256;
	shf.l.wrap.b32 	%r192, %r186, %r187, 23;
	shf.l.wrap.b32 	%r193, %r187, %r186, 23;
	mov.b64 	%rd258, {%r193, %r192};
	xor.b64  	%rd259, %rd257, %rd258;
	xor.b64  	%rd260, %rd219, %rd195;
	and.b64  	%rd261, %rd243, %rd260;
	xor.b64  	%rd262, %rd261, %rd195;
	add.s64 	%rd263, %rd262, %rd181;
	add.s64 	%rd264, %rd263, %rd259;
	add.s64 	%rd265, %rd264, %rd1074;
	add.s64 	%rd266, %rd265, -6116909921290321640;
	add.s64 	%rd267, %rd266, %rd182;
	and.b64  	%rd268, %rd254, %rd230;
	or.b64  	%rd269, %rd254, %rd230;
	and.b64  	%rd270, %rd269, %rd206;
	or.b64  	%rd271, %rd270, %rd268;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r194,%dummy}, %rd254;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r195}, %rd254;
	}
	shf.r.wrap.b32 	%r196, %r195, %r194, 28;
	shf.r.wrap.b32 	%r197, %r194, %r195, 28;
	mov.b64 	%rd272, {%r197, %r196};
	shf.l.wrap.b32 	%r198, %r194, %r195, 30;
	shf.l.wrap.b32 	%r199, %r195, %r194, 30;
	mov.b64 	%rd273, {%r199, %r198};
	xor.b64  	%rd274, %rd272, %rd273;
	shf.l.wrap.b32 	%r200, %r194, %r195, 25;
	shf.l.wrap.b32 	%r201, %r195, %r194, 25;
	mov.b64 	%rd275, {%r201, %r200};
	xor.b64  	%rd276, %rd274, %rd275;
	add.s64 	%rd277, %rd276, %rd271;
	add.s64 	%rd278, %rd277, %rd266;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r202,%dummy}, %rd267;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r203}, %rd267;
	}
	shf.r.wrap.b32 	%r204, %r203, %r202, 14;
	shf.r.wrap.b32 	%r205, %r202, %r203, 14;
	mov.b64 	%rd279, {%r205, %r204};
	shf.r.wrap.b32 	%r206, %r203, %r202, 18;
	shf.r.wrap.b32 	%r207, %r202, %r203, 18;
	mov.b64 	%rd280, {%r207, %r206};
	xor.b64  	%rd281, %rd279, %rd280;
	shf.l.wrap.b32 	%r208, %r202, %r203, 23;
	shf.l.wrap.b32 	%r209, %r203, %r202, 23;
	mov.b64 	%rd282, {%r209, %r208};
	xor.b64  	%rd283, %rd281, %rd282;
	xor.b64  	%rd284, %rd243, %rd219;
	and.b64  	%rd285, %rd267, %rd284;
	xor.b64  	%rd286, %rd285, %rd219;
	add.s64 	%rd287, %rd286, %rd195;
	add.s64 	%rd288, %rd287, %rd283;
	add.s64 	%rd289, %rd288, %rd1075;
	add.s64 	%rd290, %rd289, -2880145864133508542;
	add.s64 	%rd291, %rd290, %rd206;
	and.b64  	%rd292, %rd278, %rd254;
	or.b64  	%rd293, %rd278, %rd254;
	and.b64  	%rd294, %rd293, %rd230;
	or.b64  	%rd295, %rd294, %rd292;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r210,%dummy}, %rd278;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r211}, %rd278;
	}
	shf.r.wrap.b32 	%r212, %r211, %r210, 28;
	shf.r.wrap.b32 	%r213, %r210, %r211, 28;
	mov.b64 	%rd296, {%r213, %r212};
	shf.l.wrap.b32 	%r214, %r210, %r211, 30;
	shf.l.wrap.b32 	%r215, %r211, %r210, 30;
	mov.b64 	%rd297, {%r215, %r214};
	xor.b64  	%rd298, %rd296, %rd297;
	shf.l.wrap.b32 	%r216, %r210, %r211, 25;
	shf.l.wrap.b32 	%r217, %r211, %r210, 25;
	mov.b64 	%rd299, {%r217, %r216};
	xor.b64  	%rd300, %rd298, %rd299;
	add.s64 	%rd301, %rd300, %rd295;
	add.s64 	%rd302, %rd301, %rd290;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r218,%dummy}, %rd291;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r219}, %rd291;
	}
	shf.r.wrap.b32 	%r220, %r219, %r218, 14;
	shf.r.wrap.b32 	%r221, %r218, %r219, 14;
	mov.b64 	%rd303, {%r221, %r220};
	shf.r.wrap.b32 	%r222, %r219, %r218, 18;
	shf.r.wrap.b32 	%r223, %r218, %r219, 18;
	mov.b64 	%rd304, {%r223, %r222};
	xor.b64  	%rd305, %rd303, %rd304;
	shf.l.wrap.b32 	%r224, %r218, %r219, 23;
	shf.l.wrap.b32 	%r225, %r219, %r218, 23;
	mov.b64 	%rd306, {%r225, %r224};
	xor.b64  	%rd307, %rd305, %rd306;
	xor.b64  	%rd308, %rd267, %rd243;
	and.b64  	%rd309, %rd291, %rd308;
	xor.b64  	%rd310, %rd309, %rd243;
	add.s64 	%rd311, %rd310, %rd219;
	add.s64 	%rd312, %rd311, %rd307;
	add.s64 	%rd313, %rd312, %rd1076;
	add.s64 	%rd314, %rd313, 1334009975649890238;
	add.s64 	%rd315, %rd314, %rd230;
	and.b64  	%rd316, %rd302, %rd278;
	or.b64  	%rd317, %rd302, %rd278;
	and.b64  	%rd318, %rd317, %rd254;
	or.b64  	%rd319, %rd318, %rd316;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r226,%dummy}, %rd302;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r227}, %rd302;
	}
	shf.r.wrap.b32 	%r228, %r227, %r226, 28;
	shf.r.wrap.b32 	%r229, %r226, %r227, 28;
	mov.b64 	%rd320, {%r229, %r228};
	shf.l.wrap.b32 	%r230, %r226, %r227, 30;
	shf.l.wrap.b32 	%r231, %r227, %r226, 30;
	mov.b64 	%rd321, {%r231, %r230};
	xor.b64  	%rd322, %rd320, %rd321;
	shf.l.wrap.b32 	%r232, %r226, %r227, 25;
	shf.l.wrap.b32 	%r233, %r227, %r226, 25;
	mov.b64 	%rd323, {%r233, %r232};
	xor.b64  	%rd324, %rd322, %rd323;
	add.s64 	%rd325, %rd324, %rd319;
	add.s64 	%rd326, %rd325, %rd314;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r234,%dummy}, %rd315;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r235}, %rd315;
	}
	shf.r.wrap.b32 	%r236, %r235, %r234, 14;
	shf.r.wrap.b32 	%r237, %r234, %r235, 14;
	mov.b64 	%rd327, {%r237, %r236};
	shf.r.wrap.b32 	%r238, %r235, %r234, 18;
	shf.r.wrap.b32 	%r239, %r234, %r235, 18;
	mov.b64 	%rd328, {%r239, %r238};
	xor.b64  	%rd329, %rd327, %rd328;
	shf.l.wrap.b32 	%r240, %r234, %r235, 23;
	shf.l.wrap.b32 	%r241, %r235, %r234, 23;
	mov.b64 	%rd330, {%r241, %r240};
	xor.b64  	%rd331, %rd329, %rd330;
	xor.b64  	%rd332, %rd291, %rd267;
	and.b64  	%rd333, %rd315, %rd332;
	xor.b64  	%rd334, %rd333, %rd267;
	add.s64 	%rd335, %rd334, %rd243;
	add.s64 	%rd336, %rd335, %rd331;
	add.s64 	%rd337, %rd336, %rd1077;
	add.s64 	%rd338, %rd337, 2608012711638119052;
	add.s64 	%rd339, %rd338, %rd254;
	and.b64  	%rd340, %rd326, %rd302;
	or.b64  	%rd341, %rd326, %rd302;
	and.b64  	%rd342, %rd341, %rd278;
	or.b64  	%rd343, %rd342, %rd340;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r242,%dummy}, %rd326;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r243}, %rd326;
	}
	shf.r.wrap.b32 	%r244, %r243, %r242, 28;
	shf.r.wrap.b32 	%r245, %r242, %r243, 28;
	mov.b64 	%rd344, {%r245, %r244};
	shf.l.wrap.b32 	%r246, %r242, %r243, 30;
	shf.l.wrap.b32 	%r247, %r243, %r242, 30;
	mov.b64 	%rd345, {%r247, %r246};
	xor.b64  	%rd346, %rd344, %rd345;
	shf.l.wrap.b32 	%r248, %r242, %r243, 25;
	shf.l.wrap.b32 	%r249, %r243, %r242, 25;
	mov.b64 	%rd347, {%r249, %r248};
	xor.b64  	%rd348, %rd346, %rd347;
	add.s64 	%rd349, %rd348, %rd343;
	add.s64 	%rd350, %rd349, %rd338;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r250,%dummy}, %rd339;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r251}, %rd339;
	}
	shf.r.wrap.b32 	%r252, %r251, %r250, 14;
	shf.r.wrap.b32 	%r253, %r250, %r251, 14;
	mov.b64 	%rd351, {%r253, %r252};
	shf.r.wrap.b32 	%r254, %r251, %r250, 18;
	shf.r.wrap.b32 	%r255, %r250, %r251, 18;
	mov.b64 	%rd352, {%r255, %r254};
	xor.b64  	%rd353, %rd351, %rd352;
	shf.l.wrap.b32 	%r256, %r250, %r251, 23;
	shf.l.wrap.b32 	%r257, %r251, %r250, 23;
	mov.b64 	%rd354, {%r257, %r256};
	xor.b64  	%rd355, %rd353, %rd354;
	xor.b64  	%rd356, %rd315, %rd291;
	and.b64  	%rd357, %rd339, %rd356;
	xor.b64  	%rd358, %rd357, %rd291;
	add.s64 	%rd359, %rd358, %rd267;
	add.s64 	%rd360, %rd359, %rd355;
	add.s64 	%rd361, %rd360, %rd1078;
	add.s64 	%rd362, %rd361, 6128411473006802146;
	add.s64 	%rd363, %rd362, %rd278;
	and.b64  	%rd364, %rd350, %rd326;
	or.b64  	%rd365, %rd350, %rd326;
	and.b64  	%rd366, %rd365, %rd302;
	or.b64  	%rd367, %rd366, %rd364;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r258,%dummy}, %rd350;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r259}, %rd350;
	}
	shf.r.wrap.b32 	%r260, %r259, %r258, 28;
	shf.r.wrap.b32 	%r261, %r258, %r259, 28;
	mov.b64 	%rd368, {%r261, %r260};
	shf.l.wrap.b32 	%r262, %r258, %r259, 30;
	shf.l.wrap.b32 	%r263, %r259, %r258, 30;
	mov.b64 	%rd369, {%r263, %r262};
	xor.b64  	%rd370, %rd368, %rd369;
	shf.l.wrap.b32 	%r264, %r258, %r259, 25;
	shf.l.wrap.b32 	%r265, %r259, %r258, 25;
	mov.b64 	%rd371, {%r265, %r264};
	xor.b64  	%rd372, %rd370, %rd371;
	add.s64 	%rd373, %rd372, %rd367;
	add.s64 	%rd374, %rd373, %rd362;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r266,%dummy}, %rd363;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r267}, %rd363;
	}
	shf.r.wrap.b32 	%r268, %r267, %r266, 14;
	shf.r.wrap.b32 	%r269, %r266, %r267, 14;
	mov.b64 	%rd375, {%r269, %r268};
	shf.r.wrap.b32 	%r270, %r267, %r266, 18;
	shf.r.wrap.b32 	%r271, %r266, %r267, 18;
	mov.b64 	%rd376, {%r271, %r270};
	xor.b64  	%rd377, %rd375, %rd376;
	shf.l.wrap.b32 	%r272, %r266, %r267, 23;
	shf.l.wrap.b32 	%r273, %r267, %r266, 23;
	mov.b64 	%rd378, {%r273, %r272};
	xor.b64  	%rd379, %rd377, %rd378;
	xor.b64  	%rd380, %rd339, %rd315;
	and.b64  	%rd381, %rd363, %rd380;
	xor.b64  	%rd382, %rd381, %rd315;
	add.s64 	%rd383, %rd382, %rd291;
	add.s64 	%rd384, %rd383, %rd379;
	add.s64 	%rd385, %rd384, %rd1079;
	add.s64 	%rd386, %rd385, 8268148722764581231;
	add.s64 	%rd1090, %rd386, %rd302;
	and.b64  	%rd387, %rd374, %rd350;
	or.b64  	%rd388, %rd374, %rd350;
	and.b64  	%rd389, %rd388, %rd326;
	or.b64  	%rd390, %rd389, %rd387;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r274,%dummy}, %rd374;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r275}, %rd374;
	}
	shf.r.wrap.b32 	%r276, %r275, %r274, 28;
	shf.r.wrap.b32 	%r277, %r274, %r275, 28;
	mov.b64 	%rd391, {%r277, %r276};
	shf.l.wrap.b32 	%r278, %r274, %r275, 30;
	shf.l.wrap.b32 	%r279, %r275, %r274, 30;
	mov.b64 	%rd392, {%r279, %r278};
	xor.b64  	%rd393, %rd391, %rd392;
	shf.l.wrap.b32 	%r280, %r274, %r275, 25;
	shf.l.wrap.b32 	%r281, %r275, %r274, 25;
	mov.b64 	%rd394, {%r281, %r280};
	xor.b64  	%rd395, %rd393, %rd394;
	add.s64 	%rd396, %rd395, %rd390;
	add.s64 	%rd1086, %rd396, %rd386;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r282,%dummy}, %rd1090;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r283}, %rd1090;
	}
	shf.r.wrap.b32 	%r284, %r283, %r282, 14;
	shf.r.wrap.b32 	%r285, %r282, %r283, 14;
	mov.b64 	%rd397, {%r285, %r284};
	shf.r.wrap.b32 	%r286, %r283, %r282, 18;
	shf.r.wrap.b32 	%r287, %r282, %r283, 18;
	mov.b64 	%rd398, {%r287, %r286};
	xor.b64  	%rd399, %rd397, %rd398;
	shf.l.wrap.b32 	%r288, %r282, %r283, 23;
	shf.l.wrap.b32 	%r289, %r283, %r282, 23;
	mov.b64 	%rd400, {%r289, %r288};
	xor.b64  	%rd401, %rd399, %rd400;
	xor.b64  	%rd402, %rd363, %rd339;
	and.b64  	%rd403, %rd1090, %rd402;
	xor.b64  	%rd404, %rd403, %rd339;
	add.s64 	%rd405, %rd404, %rd315;
	add.s64 	%rd406, %rd405, %rd401;
	add.s64 	%rd407, %rd406, %rd1080;
	add.s64 	%rd408, %rd407, -9160688886553864527;
	add.s64 	%rd1089, %rd408, %rd326;
	and.b64  	%rd409, %rd1086, %rd374;
	or.b64  	%rd410, %rd1086, %rd374;
	and.b64  	%rd411, %rd410, %rd350;
	or.b64  	%rd412, %rd411, %rd409;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r290,%dummy}, %rd1086;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r291}, %rd1086;
	}
	shf.r.wrap.b32 	%r292, %r291, %r290, 28;
	shf.r.wrap.b32 	%r293, %r290, %r291, 28;
	mov.b64 	%rd413, {%r293, %r292};
	shf.l.wrap.b32 	%r294, %r290, %r291, 30;
	shf.l.wrap.b32 	%r295, %r291, %r290, 30;
	mov.b64 	%rd414, {%r295, %r294};
	xor.b64  	%rd415, %rd413, %rd414;
	shf.l.wrap.b32 	%r296, %r290, %r291, 25;
	shf.l.wrap.b32 	%r297, %r291, %r290, 25;
	mov.b64 	%rd416, {%r297, %r296};
	xor.b64  	%rd417, %rd415, %rd416;
	add.s64 	%rd418, %rd417, %rd412;
	add.s64 	%rd1085, %rd418, %rd408;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r298,%dummy}, %rd1089;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r299}, %rd1089;
	}
	shf.r.wrap.b32 	%r300, %r299, %r298, 14;
	shf.r.wrap.b32 	%r301, %r298, %r299, 14;
	mov.b64 	%rd419, {%r301, %r300};
	shf.r.wrap.b32 	%r302, %r299, %r298, 18;
	shf.r.wrap.b32 	%r303, %r298, %r299, 18;
	mov.b64 	%rd420, {%r303, %r302};
	xor.b64  	%rd421, %rd419, %rd420;
	shf.l.wrap.b32 	%r304, %r298, %r299, 23;
	shf.l.wrap.b32 	%r305, %r299, %r298, 23;
	mov.b64 	%rd422, {%r305, %r304};
	xor.b64  	%rd423, %rd421, %rd422;
	xor.b64  	%rd424, %rd1090, %rd363;
	and.b64  	%rd425, %rd1089, %rd424;
	xor.b64  	%rd426, %rd425, %rd363;
	add.s64 	%rd427, %rd426, %rd339;
	add.s64 	%rd428, %rd427, %rd423;
	add.s64 	%rd429, %rd428, %rd1081;
	add.s64 	%rd430, %rd429, -7215885187991268811;
	add.s64 	%rd1088, %rd430, %rd350;
	and.b64  	%rd431, %rd1085, %rd1086;
	or.b64  	%rd432, %rd1085, %rd1086;
	and.b64  	%rd433, %rd432, %rd374;
	or.b64  	%rd434, %rd433, %rd431;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r306,%dummy}, %rd1085;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r307}, %rd1085;
	}
	shf.r.wrap.b32 	%r308, %r307, %r306, 28;
	shf.r.wrap.b32 	%r309, %r306, %r307, 28;
	mov.b64 	%rd435, {%r309, %r308};
	shf.l.wrap.b32 	%r310, %r306, %r307, 30;
	shf.l.wrap.b32 	%r311, %r307, %r306, 30;
	mov.b64 	%rd436, {%r311, %r310};
	xor.b64  	%rd437, %rd435, %rd436;
	shf.l.wrap.b32 	%r312, %r306, %r307, 25;
	shf.l.wrap.b32 	%r313, %r307, %r306, 25;
	mov.b64 	%rd438, {%r313, %r312};
	xor.b64  	%rd439, %rd437, %rd438;
	add.s64 	%rd440, %rd439, %rd434;
	add.s64 	%rd1084, %rd440, %rd430;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r314,%dummy}, %rd1088;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r315}, %rd1088;
	}
	shf.r.wrap.b32 	%r316, %r315, %r314, 14;
	shf.r.wrap.b32 	%r317, %r314, %r315, 14;
	mov.b64 	%rd441, {%r317, %r316};
	shf.r.wrap.b32 	%r318, %r315, %r314, 18;
	shf.r.wrap.b32 	%r319, %r314, %r315, 18;
	mov.b64 	%rd442, {%r319, %r318};
	xor.b64  	%rd443, %rd441, %rd442;
	shf.l.wrap.b32 	%r320, %r314, %r315, 23;
	shf.l.wrap.b32 	%r321, %r315, %r314, 23;
	mov.b64 	%rd444, {%r321, %r320};
	xor.b64  	%rd445, %rd443, %rd444;
	xor.b64  	%rd446, %rd1089, %rd1090;
	and.b64  	%rd447, %rd1088, %rd446;
	xor.b64  	%rd448, %rd447, %rd1090;
	add.s64 	%rd449, %rd448, %rd363;
	add.s64 	%rd450, %rd449, %rd445;
	add.s64 	%rd451, %rd450, %rd1082;
	add.s64 	%rd452, %rd451, -4495734319001033068;
	add.s64 	%rd1087, %rd452, %rd374;
	and.b64  	%rd453, %rd1084, %rd1085;
	or.b64  	%rd454, %rd1084, %rd1085;
	and.b64  	%rd455, %rd454, %rd1086;
	or.b64  	%rd456, %rd455, %rd453;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r322,%dummy}, %rd1084;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r323}, %rd1084;
	}
	shf.r.wrap.b32 	%r324, %r323, %r322, 28;
	shf.r.wrap.b32 	%r325, %r322, %r323, 28;
	mov.b64 	%rd457, {%r325, %r324};
	shf.l.wrap.b32 	%r326, %r322, %r323, 30;
	shf.l.wrap.b32 	%r327, %r323, %r322, 30;
	mov.b64 	%rd458, {%r327, %r326};
	xor.b64  	%rd459, %rd457, %rd458;
	shf.l.wrap.b32 	%r328, %r322, %r323, 25;
	shf.l.wrap.b32 	%r329, %r323, %r322, 25;
	mov.b64 	%rd460, {%r329, %r328};
	xor.b64  	%rd461, %rd459, %rd460;
	add.s64 	%rd462, %rd461, %rd456;
	add.s64 	%rd1083, %rd462, %rd452;
	mov.u64 	%rd1066, k;

$L__BB1_1:
	.pragma "nounroll";
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r330}, %rd1081;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r331,%dummy}, %rd1081;
	}
	shf.l.wrap.b32 	%r332, %r331, %r330, 3;
	shf.l.wrap.b32 	%r333, %r330, %r331, 3;
	mov.b64 	%rd463, {%r333, %r332};
	shf.r.wrap.b32 	%r334, %r330, %r331, 19;
	shf.r.wrap.b32 	%r335, %r331, %r330, 19;
	mov.b64 	%rd464, {%r335, %r334};
	xor.b64  	%rd465, %rd464, %rd463;
	shr.u64 	%rd466, %rd1081, 6;
	xor.b64  	%rd467, %rd465, %rd466;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r336,%dummy}, %rd1068;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r337}, %rd1068;
	}
	shf.r.wrap.b32 	%r338, %r337, %r336, 8;
	shf.r.wrap.b32 	%r339, %r336, %r337, 8;
	mov.b64 	%rd468, {%r339, %r338};
	shf.r.wrap.b32 	%r340, %r337, %r336, 1;
	shf.r.wrap.b32 	%r341, %r336, %r337, 1;
	mov.b64 	%rd469, {%r341, %r340};
	xor.b64  	%rd470, %rd469, %rd468;
	shr.u64 	%rd471, %rd1068, 7;
	xor.b64  	%rd472, %rd470, %rd471;
	add.s64 	%rd473, %rd467, %rd1067;
	add.s64 	%rd474, %rd473, %rd1076;
	add.s64 	%rd1067, %rd474, %rd472;
	add.s64 	%rd74, %rd1066, 128;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r342,%dummy}, %rd1087;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r343}, %rd1087;
	}
	shf.r.wrap.b32 	%r344, %r343, %r342, 18;
	shf.r.wrap.b32 	%r345, %r342, %r343, 18;
	mov.b64 	%rd475, {%r345, %r344};
	shf.r.wrap.b32 	%r346, %r343, %r342, 14;
	shf.r.wrap.b32 	%r347, %r342, %r343, 14;
	mov.b64 	%rd476, {%r347, %r346};
	xor.b64  	%rd477, %rd476, %rd475;
	shf.l.wrap.b32 	%r348, %r342, %r343, 23;
	shf.l.wrap.b32 	%r349, %r343, %r342, 23;
	mov.b64 	%rd478, {%r349, %r348};
	xor.b64  	%rd479, %rd477, %rd478;
	xor.b64  	%rd480, %rd1088, %rd1089;
	and.b64  	%rd481, %rd1087, %rd480;
	xor.b64  	%rd482, %rd481, %rd1089;
	add.s64 	%rd483, %rd482, %rd1090;
	add.s64 	%rd484, %rd483, %rd479;
	ld.const.u64 	%rd485, [%rd1066+128];
	add.s64 	%rd486, %rd484, %rd485;
	add.s64 	%rd487, %rd486, %rd1067;
	add.s64 	%rd488, %rd487, %rd1086;
	or.b64  	%rd489, %rd1083, %rd1084;
	and.b64  	%rd490, %rd489, %rd1085;
	and.b64  	%rd491, %rd1083, %rd1084;
	or.b64  	%rd492, %rd490, %rd491;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r350}, %rd1083;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r351,%dummy}, %rd1083;
	}
	shf.l.wrap.b32 	%r352, %r351, %r350, 30;
	shf.l.wrap.b32 	%r353, %r350, %r351, 30;
	mov.b64 	%rd493, {%r353, %r352};
	shf.r.wrap.b32 	%r354, %r350, %r351, 28;
	shf.r.wrap.b32 	%r355, %r351, %r350, 28;
	mov.b64 	%rd494, {%r355, %r354};
	xor.b64  	%rd495, %rd494, %rd493;
	shf.l.wrap.b32 	%r356, %r351, %r350, 25;
	shf.l.wrap.b32 	%r357, %r350, %r351, 25;
	mov.b64 	%rd496, {%r357, %r356};
	xor.b64  	%rd497, %rd495, %rd496;
	add.s64 	%rd498, %rd497, %rd492;
	add.s64 	%rd499, %rd498, %rd487;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r358}, %rd1082;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r359,%dummy}, %rd1082;
	}
	shf.l.wrap.b32 	%r360, %r359, %r358, 3;
	shf.l.wrap.b32 	%r361, %r358, %r359, 3;
	mov.b64 	%rd500, {%r361, %r360};
	shf.r.wrap.b32 	%r362, %r358, %r359, 19;
	shf.r.wrap.b32 	%r363, %r359, %r358, 19;
	mov.b64 	%rd501, {%r363, %r362};
	xor.b64  	%rd502, %rd501, %rd500;
	shr.u64 	%rd503, %rd1082, 6;
	xor.b64  	%rd504, %rd502, %rd503;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r364,%dummy}, %rd1069;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r365}, %rd1069;
	}
	shf.r.wrap.b32 	%r366, %r365, %r364, 8;
	shf.r.wrap.b32 	%r367, %r364, %r365, 8;
	mov.b64 	%rd505, {%r367, %r366};
	shf.r.wrap.b32 	%r368, %r365, %r364, 1;
	shf.r.wrap.b32 	%r369, %r364, %r365, 1;
	mov.b64 	%rd506, {%r369, %r368};
	xor.b64  	%rd507, %rd506, %rd505;
	shr.u64 	%rd508, %rd1069, 7;
	xor.b64  	%rd509, %rd507, %rd508;
	add.s64 	%rd510, %rd504, %rd1068;
	add.s64 	%rd511, %rd510, %rd1077;
	add.s64 	%rd1068, %rd511, %rd509;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r370,%dummy}, %rd488;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r371}, %rd488;
	}
	shf.r.wrap.b32 	%r372, %r371, %r370, 14;
	shf.r.wrap.b32 	%r373, %r370, %r371, 14;
	mov.b64 	%rd512, {%r373, %r372};
	shf.r.wrap.b32 	%r374, %r371, %r370, 18;
	shf.r.wrap.b32 	%r375, %r370, %r371, 18;
	mov.b64 	%rd513, {%r375, %r374};
	xor.b64  	%rd514, %rd512, %rd513;
	shf.l.wrap.b32 	%r376, %r370, %r371, 23;
	shf.l.wrap.b32 	%r377, %r371, %r370, 23;
	mov.b64 	%rd515, {%r377, %r376};
	xor.b64  	%rd516, %rd514, %rd515;
	xor.b64  	%rd517, %rd1087, %rd1088;
	and.b64  	%rd518, %rd488, %rd517;
	xor.b64  	%rd519, %rd518, %rd1088;
	add.s64 	%rd520, %rd519, %rd1089;
	add.s64 	%rd521, %rd520, %rd516;
	ld.const.u64 	%rd522, [%rd1066+136];
	add.s64 	%rd523, %rd521, %rd522;
	add.s64 	%rd524, %rd523, %rd1068;
	add.s64 	%rd525, %rd524, %rd1085;
	and.b64  	%rd526, %rd499, %rd1083;
	or.b64  	%rd527, %rd499, %rd1083;
	and.b64  	%rd528, %rd527, %rd1084;
	or.b64  	%rd529, %rd528, %rd526;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r378,%dummy}, %rd499;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r379}, %rd499;
	}
	shf.r.wrap.b32 	%r380, %r379, %r378, 28;
	shf.r.wrap.b32 	%r381, %r378, %r379, 28;
	mov.b64 	%rd530, {%r381, %r380};
	shf.l.wrap.b32 	%r382, %r378, %r379, 30;
	shf.l.wrap.b32 	%r383, %r379, %r378, 30;
	mov.b64 	%rd531, {%r383, %r382};
	xor.b64  	%rd532, %rd530, %rd531;
	shf.l.wrap.b32 	%r384, %r378, %r379, 25;
	shf.l.wrap.b32 	%r385, %r379, %r378, 25;
	mov.b64 	%rd533, {%r385, %r384};
	xor.b64  	%rd534, %rd532, %rd533;
	add.s64 	%rd535, %rd534, %rd529;
	add.s64 	%rd536, %rd535, %rd524;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r386,%dummy}, %rd1067;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r387}, %rd1067;
	}
	shf.r.wrap.b32 	%r388, %r387, %r386, 19;
	shf.r.wrap.b32 	%r389, %r386, %r387, 19;
	mov.b64 	%rd537, {%r389, %r388};
	shf.l.wrap.b32 	%r390, %r386, %r387, 3;
	shf.l.wrap.b32 	%r391, %r387, %r386, 3;
	mov.b64 	%rd538, {%r391, %r390};
	xor.b64  	%rd539, %rd537, %rd538;
	shr.u64 	%rd540, %rd1067, 6;
	xor.b64  	%rd541, %rd539, %rd540;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r392,%dummy}, %rd1070;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r393}, %rd1070;
	}
	shf.r.wrap.b32 	%r394, %r393, %r392, 8;
	shf.r.wrap.b32 	%r395, %r392, %r393, 8;
	mov.b64 	%rd542, {%r395, %r394};
	shf.r.wrap.b32 	%r396, %r393, %r392, 1;
	shf.r.wrap.b32 	%r397, %r392, %r393, 1;
	mov.b64 	%rd543, {%r397, %r396};
	xor.b64  	%rd544, %rd543, %rd542;
	shr.u64 	%rd545, %rd1070, 7;
	xor.b64  	%rd546, %rd544, %rd545;
	add.s64 	%rd547, %rd541, %rd1069;
	add.s64 	%rd548, %rd547, %rd1078;
	add.s64 	%rd1069, %rd548, %rd546;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r398,%dummy}, %rd525;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r399}, %rd525;
	}
	shf.r.wrap.b32 	%r400, %r399, %r398, 14;
	shf.r.wrap.b32 	%r401, %r398, %r399, 14;
	mov.b64 	%rd549, {%r401, %r400};
	shf.r.wrap.b32 	%r402, %r399, %r398, 18;
	shf.r.wrap.b32 	%r403, %r398, %r399, 18;
	mov.b64 	%rd550, {%r403, %r402};
	xor.b64  	%rd551, %rd549, %rd550;
	shf.l.wrap.b32 	%r404, %r398, %r399, 23;
	shf.l.wrap.b32 	%r405, %r399, %r398, 23;
	mov.b64 	%rd552, {%r405, %r404};
	xor.b64  	%rd553, %rd551, %rd552;
	xor.b64  	%rd554, %rd488, %rd1087;
	and.b64  	%rd555, %rd525, %rd554;
	xor.b64  	%rd556, %rd555, %rd1087;
	add.s64 	%rd557, %rd556, %rd1088;
	add.s64 	%rd558, %rd557, %rd553;
	ld.const.u64 	%rd559, [%rd1066+144];
	add.s64 	%rd560, %rd558, %rd559;
	add.s64 	%rd561, %rd560, %rd1069;
	add.s64 	%rd562, %rd561, %rd1084;
	and.b64  	%rd563, %rd536, %rd499;
	or.b64  	%rd564, %rd536, %rd499;
	and.b64  	%rd565, %rd564, %rd1083;
	or.b64  	%rd566, %rd565, %rd563;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r406,%dummy}, %rd536;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r407}, %rd536;
	}
	shf.r.wrap.b32 	%r408, %r407, %r406, 28;
	shf.r.wrap.b32 	%r409, %r406, %r407, 28;
	mov.b64 	%rd567, {%r409, %r408};
	shf.l.wrap.b32 	%r410, %r406, %r407, 30;
	shf.l.wrap.b32 	%r411, %r407, %r406, 30;
	mov.b64 	%rd568, {%r411, %r410};
	xor.b64  	%rd569, %rd567, %rd568;
	shf.l.wrap.b32 	%r412, %r406, %r407, 25;
	shf.l.wrap.b32 	%r413, %r407, %r406, 25;
	mov.b64 	%rd570, {%r413, %r412};
	xor.b64  	%rd571, %rd569, %rd570;
	add.s64 	%rd572, %rd571, %rd566;
	add.s64 	%rd573, %rd572, %rd561;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r414,%dummy}, %rd1068;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r415}, %rd1068;
	}
	shf.r.wrap.b32 	%r416, %r415, %r414, 19;
	shf.r.wrap.b32 	%r417, %r414, %r415, 19;
	mov.b64 	%rd574, {%r417, %r416};
	shf.l.wrap.b32 	%r418, %r414, %r415, 3;
	shf.l.wrap.b32 	%r419, %r415, %r414, 3;
	mov.b64 	%rd575, {%r419, %r418};
	xor.b64  	%rd576, %rd574, %rd575;
	shr.u64 	%rd577, %rd1068, 6;
	xor.b64  	%rd578, %rd576, %rd577;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r420,%dummy}, %rd1071;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r421}, %rd1071;
	}
	shf.r.wrap.b32 	%r422, %r421, %r420, 8;
	shf.r.wrap.b32 	%r423, %r420, %r421, 8;
	mov.b64 	%rd579, {%r423, %r422};
	shf.r.wrap.b32 	%r424, %r421, %r420, 1;
	shf.r.wrap.b32 	%r425, %r420, %r421, 1;
	mov.b64 	%rd580, {%r425, %r424};
	xor.b64  	%rd581, %rd580, %rd579;
	shr.u64 	%rd582, %rd1071, 7;
	xor.b64  	%rd583, %rd581, %rd582;
	add.s64 	%rd584, %rd578, %rd1070;
	add.s64 	%rd585, %rd584, %rd1079;
	add.s64 	%rd1070, %rd585, %rd583;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r426,%dummy}, %rd562;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r427}, %rd562;
	}
	shf.r.wrap.b32 	%r428, %r427, %r426, 14;
	shf.r.wrap.b32 	%r429, %r426, %r427, 14;
	mov.b64 	%rd586, {%r429, %r428};
	shf.r.wrap.b32 	%r430, %r427, %r426, 18;
	shf.r.wrap.b32 	%r431, %r426, %r427, 18;
	mov.b64 	%rd587, {%r431, %r430};
	xor.b64  	%rd588, %rd586, %rd587;
	shf.l.wrap.b32 	%r432, %r426, %r427, 23;
	shf.l.wrap.b32 	%r433, %r427, %r426, 23;
	mov.b64 	%rd589, {%r433, %r432};
	xor.b64  	%rd590, %rd588, %rd589;
	xor.b64  	%rd591, %rd525, %rd488;
	and.b64  	%rd592, %rd562, %rd591;
	xor.b64  	%rd593, %rd592, %rd488;
	add.s64 	%rd594, %rd593, %rd1087;
	add.s64 	%rd595, %rd594, %rd590;
	ld.const.u64 	%rd596, [%rd1066+152];
	add.s64 	%rd597, %rd595, %rd596;
	add.s64 	%rd598, %rd597, %rd1070;
	add.s64 	%rd599, %rd598, %rd1083;
	and.b64  	%rd600, %rd573, %rd536;
	or.b64  	%rd601, %rd573, %rd536;
	and.b64  	%rd602, %rd601, %rd499;
	or.b64  	%rd603, %rd602, %rd600;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r434,%dummy}, %rd573;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r435}, %rd573;
	}
	shf.r.wrap.b32 	%r436, %r435, %r434, 28;
	shf.r.wrap.b32 	%r437, %r434, %r435, 28;
	mov.b64 	%rd604, {%r437, %r436};
	shf.l.wrap.b32 	%r438, %r434, %r435, 30;
	shf.l.wrap.b32 	%r439, %r435, %r434, 30;
	mov.b64 	%rd605, {%r439, %r438};
	xor.b64  	%rd606, %rd604, %rd605;
	shf.l.wrap.b32 	%r440, %r434, %r435, 25;
	shf.l.wrap.b32 	%r441, %r435, %r434, 25;
	mov.b64 	%rd607, {%r441, %r440};
	xor.b64  	%rd608, %rd606, %rd607;
	add.s64 	%rd609, %rd608, %rd603;
	add.s64 	%rd610, %rd609, %rd598;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r442,%dummy}, %rd1069;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r443}, %rd1069;
	}
	shf.r.wrap.b32 	%r444, %r443, %r442, 19;
	shf.r.wrap.b32 	%r445, %r442, %r443, 19;
	mov.b64 	%rd611, {%r445, %r444};
	shf.l.wrap.b32 	%r446, %r442, %r443, 3;
	shf.l.wrap.b32 	%r447, %r443, %r442, 3;
	mov.b64 	%rd612, {%r447, %r446};
	xor.b64  	%rd613, %rd611, %rd612;
	shr.u64 	%rd614, %rd1069, 6;
	xor.b64  	%rd615, %rd613, %rd614;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r448,%dummy}, %rd1072;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r449}, %rd1072;
	}
	shf.r.wrap.b32 	%r450, %r449, %r448, 8;
	shf.r.wrap.b32 	%r451, %r448, %r449, 8;
	mov.b64 	%rd616, {%r451, %r450};
	shf.r.wrap.b32 	%r452, %r449, %r448, 1;
	shf.r.wrap.b32 	%r453, %r448, %r449, 1;
	mov.b64 	%rd617, {%r453, %r452};
	xor.b64  	%rd618, %rd617, %rd616;
	shr.u64 	%rd619, %rd1072, 7;
	xor.b64  	%rd620, %rd618, %rd619;
	add.s64 	%rd621, %rd615, %rd1071;
	add.s64 	%rd622, %rd621, %rd1080;
	add.s64 	%rd1071, %rd622, %rd620;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r454,%dummy}, %rd599;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r455}, %rd599;
	}
	shf.r.wrap.b32 	%r456, %r455, %r454, 14;
	shf.r.wrap.b32 	%r457, %r454, %r455, 14;
	mov.b64 	%rd623, {%r457, %r456};
	shf.r.wrap.b32 	%r458, %r455, %r454, 18;
	shf.r.wrap.b32 	%r459, %r454, %r455, 18;
	mov.b64 	%rd624, {%r459, %r458};
	xor.b64  	%rd625, %rd623, %rd624;
	shf.l.wrap.b32 	%r460, %r454, %r455, 23;
	shf.l.wrap.b32 	%r461, %r455, %r454, 23;
	mov.b64 	%rd626, {%r461, %r460};
	xor.b64  	%rd627, %rd625, %rd626;
	xor.b64  	%rd628, %rd562, %rd525;
	and.b64  	%rd629, %rd599, %rd628;
	xor.b64  	%rd630, %rd629, %rd525;
	add.s64 	%rd631, %rd630, %rd488;
	add.s64 	%rd632, %rd631, %rd627;
	ld.const.u64 	%rd633, [%rd1066+160];
	add.s64 	%rd634, %rd632, %rd633;
	add.s64 	%rd635, %rd634, %rd1071;
	add.s64 	%rd636, %rd635, %rd499;
	and.b64  	%rd637, %rd610, %rd573;
	or.b64  	%rd638, %rd610, %rd573;
	and.b64  	%rd639, %rd638, %rd536;
	or.b64  	%rd640, %rd639, %rd637;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r462,%dummy}, %rd610;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r463}, %rd610;
	}
	shf.r.wrap.b32 	%r464, %r463, %r462, 28;
	shf.r.wrap.b32 	%r465, %r462, %r463, 28;
	mov.b64 	%rd641, {%r465, %r464};
	shf.l.wrap.b32 	%r466, %r462, %r463, 30;
	shf.l.wrap.b32 	%r467, %r463, %r462, 30;
	mov.b64 	%rd642, {%r467, %r466};
	xor.b64  	%rd643, %rd641, %rd642;
	shf.l.wrap.b32 	%r468, %r462, %r463, 25;
	shf.l.wrap.b32 	%r469, %r463, %r462, 25;
	mov.b64 	%rd644, {%r469, %r468};
	xor.b64  	%rd645, %rd643, %rd644;
	add.s64 	%rd646, %rd645, %rd640;
	add.s64 	%rd647, %rd646, %rd635;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r470,%dummy}, %rd1070;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r471}, %rd1070;
	}
	shf.r.wrap.b32 	%r472, %r471, %r470, 19;
	shf.r.wrap.b32 	%r473, %r470, %r471, 19;
	mov.b64 	%rd648, {%r473, %r472};
	shf.l.wrap.b32 	%r474, %r470, %r471, 3;
	shf.l.wrap.b32 	%r475, %r471, %r470, 3;
	mov.b64 	%rd649, {%r475, %r474};
	xor.b64  	%rd650, %rd648, %rd649;
	shr.u64 	%rd651, %rd1070, 6;
	xor.b64  	%rd652, %rd650, %rd651;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r476,%dummy}, %rd1073;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r477}, %rd1073;
	}
	shf.r.wrap.b32 	%r478, %r477, %r476, 8;
	shf.r.wrap.b32 	%r479, %r476, %r477, 8;
	mov.b64 	%rd653, {%r479, %r478};
	shf.r.wrap.b32 	%r480, %r477, %r476, 1;
	shf.r.wrap.b32 	%r481, %r476, %r477, 1;
	mov.b64 	%rd654, {%r481, %r480};
	xor.b64  	%rd655, %rd654, %rd653;
	shr.u64 	%rd656, %rd1073, 7;
	xor.b64  	%rd657, %rd655, %rd656;
	add.s64 	%rd658, %rd652, %rd1072;
	add.s64 	%rd659, %rd658, %rd1081;
	add.s64 	%rd1072, %rd659, %rd657;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r482,%dummy}, %rd636;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r483}, %rd636;
	}
	shf.r.wrap.b32 	%r484, %r483, %r482, 14;
	shf.r.wrap.b32 	%r485, %r482, %r483, 14;
	mov.b64 	%rd660, {%r485, %r484};
	shf.r.wrap.b32 	%r486, %r483, %r482, 18;
	shf.r.wrap.b32 	%r487, %r482, %r483, 18;
	mov.b64 	%rd661, {%r487, %r486};
	xor.b64  	%rd662, %rd660, %rd661;
	shf.l.wrap.b32 	%r488, %r482, %r483, 23;
	shf.l.wrap.b32 	%r489, %r483, %r482, 23;
	mov.b64 	%rd663, {%r489, %r488};
	xor.b64  	%rd664, %rd662, %rd663;
	xor.b64  	%rd665, %rd599, %rd562;
	and.b64  	%rd666, %rd636, %rd665;
	xor.b64  	%rd667, %rd666, %rd562;
	add.s64 	%rd668, %rd667, %rd525;
	add.s64 	%rd669, %rd668, %rd664;
	ld.const.u64 	%rd670, [%rd1066+168];
	add.s64 	%rd671, %rd669, %rd670;
	add.s64 	%rd672, %rd671, %rd1072;
	add.s64 	%rd673, %rd672, %rd536;
	and.b64  	%rd674, %rd647, %rd610;
	or.b64  	%rd675, %rd647, %rd610;
	and.b64  	%rd676, %rd675, %rd573;
	or.b64  	%rd677, %rd676, %rd674;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r490,%dummy}, %rd647;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r491}, %rd647;
	}
	shf.r.wrap.b32 	%r492, %r491, %r490, 28;
	shf.r.wrap.b32 	%r493, %r490, %r491, 28;
	mov.b64 	%rd678, {%r493, %r492};
	shf.l.wrap.b32 	%r494, %r490, %r491, 30;
	shf.l.wrap.b32 	%r495, %r491, %r490, 30;
	mov.b64 	%rd679, {%r495, %r494};
	xor.b64  	%rd680, %rd678, %rd679;
	shf.l.wrap.b32 	%r496, %r490, %r491, 25;
	shf.l.wrap.b32 	%r497, %r491, %r490, 25;
	mov.b64 	%rd681, {%r497, %r496};
	xor.b64  	%rd682, %rd680, %rd681;
	add.s64 	%rd683, %rd682, %rd677;
	add.s64 	%rd684, %rd683, %rd672;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r498,%dummy}, %rd1071;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r499}, %rd1071;
	}
	shf.r.wrap.b32 	%r500, %r499, %r498, 19;
	shf.r.wrap.b32 	%r501, %r498, %r499, 19;
	mov.b64 	%rd685, {%r501, %r500};
	shf.l.wrap.b32 	%r502, %r498, %r499, 3;
	shf.l.wrap.b32 	%r503, %r499, %r498, 3;
	mov.b64 	%rd686, {%r503, %r502};
	xor.b64  	%rd687, %rd685, %rd686;
	shr.u64 	%rd688, %rd1071, 6;
	xor.b64  	%rd689, %rd687, %rd688;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r504,%dummy}, %rd1074;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r505}, %rd1074;
	}
	shf.r.wrap.b32 	%r506, %r505, %r504, 8;
	shf.r.wrap.b32 	%r507, %r504, %r505, 8;
	mov.b64 	%rd690, {%r507, %r506};
	shf.r.wrap.b32 	%r508, %r505, %r504, 1;
	shf.r.wrap.b32 	%r509, %r504, %r505, 1;
	mov.b64 	%rd691, {%r509, %r508};
	xor.b64  	%rd692, %rd691, %rd690;
	shr.u64 	%rd693, %rd1074, 7;
	xor.b64  	%rd694, %rd692, %rd693;
	add.s64 	%rd695, %rd689, %rd1073;
	add.s64 	%rd696, %rd695, %rd1082;
	add.s64 	%rd1073, %rd696, %rd694;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r510,%dummy}, %rd673;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r511}, %rd673;
	}
	shf.r.wrap.b32 	%r512, %r511, %r510, 14;
	shf.r.wrap.b32 	%r513, %r510, %r511, 14;
	mov.b64 	%rd697, {%r513, %r512};
	shf.r.wrap.b32 	%r514, %r511, %r510, 18;
	shf.r.wrap.b32 	%r515, %r510, %r511, 18;
	mov.b64 	%rd698, {%r515, %r514};
	xor.b64  	%rd699, %rd697, %rd698;
	shf.l.wrap.b32 	%r516, %r510, %r511, 23;
	shf.l.wrap.b32 	%r517, %r511, %r510, 23;
	mov.b64 	%rd700, {%r517, %r516};
	xor.b64  	%rd701, %rd699, %rd700;
	xor.b64  	%rd702, %rd636, %rd599;
	and.b64  	%rd703, %rd673, %rd702;
	xor.b64  	%rd704, %rd703, %rd599;
	add.s64 	%rd705, %rd704, %rd562;
	add.s64 	%rd706, %rd705, %rd701;
	ld.const.u64 	%rd707, [%rd1066+176];
	add.s64 	%rd708, %rd706, %rd707;
	add.s64 	%rd709, %rd708, %rd1073;
	add.s64 	%rd710, %rd709, %rd573;
	and.b64  	%rd711, %rd684, %rd647;
	or.b64  	%rd712, %rd684, %rd647;
	and.b64  	%rd713, %rd712, %rd610;
	or.b64  	%rd714, %rd713, %rd711;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r518,%dummy}, %rd684;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r519}, %rd684;
	}
	shf.r.wrap.b32 	%r520, %r519, %r518, 28;
	shf.r.wrap.b32 	%r521, %r518, %r519, 28;
	mov.b64 	%rd715, {%r521, %r520};
	shf.l.wrap.b32 	%r522, %r518, %r519, 30;
	shf.l.wrap.b32 	%r523, %r519, %r518, 30;
	mov.b64 	%rd716, {%r523, %r522};
	xor.b64  	%rd717, %rd715, %rd716;
	shf.l.wrap.b32 	%r524, %r518, %r519, 25;
	shf.l.wrap.b32 	%r525, %r519, %r518, 25;
	mov.b64 	%rd718, {%r525, %r524};
	xor.b64  	%rd719, %rd717, %rd718;
	add.s64 	%rd720, %rd719, %rd714;
	add.s64 	%rd721, %rd720, %rd709;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r526,%dummy}, %rd1072;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r527}, %rd1072;
	}
	shf.r.wrap.b32 	%r528, %r527, %r526, 19;
	shf.r.wrap.b32 	%r529, %r526, %r527, 19;
	mov.b64 	%rd722, {%r529, %r528};
	shf.l.wrap.b32 	%r530, %r526, %r527, 3;
	shf.l.wrap.b32 	%r531, %r527, %r526, 3;
	mov.b64 	%rd723, {%r531, %r530};
	xor.b64  	%rd724, %rd722, %rd723;
	shr.u64 	%rd725, %rd1072, 6;
	xor.b64  	%rd726, %rd724, %rd725;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r532,%dummy}, %rd1075;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r533}, %rd1075;
	}
	shf.r.wrap.b32 	%r534, %r533, %r532, 8;
	shf.r.wrap.b32 	%r535, %r532, %r533, 8;
	mov.b64 	%rd727, {%r535, %r534};
	shf.r.wrap.b32 	%r536, %r533, %r532, 1;
	shf.r.wrap.b32 	%r537, %r532, %r533, 1;
	mov.b64 	%rd728, {%r537, %r536};
	xor.b64  	%rd729, %rd728, %rd727;
	shr.u64 	%rd730, %rd1075, 7;
	xor.b64  	%rd731, %rd729, %rd730;
	add.s64 	%rd732, %rd726, %rd1074;
	add.s64 	%rd733, %rd732, %rd1067;
	add.s64 	%rd1074, %rd733, %rd731;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r538,%dummy}, %rd710;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r539}, %rd710;
	}
	shf.r.wrap.b32 	%r540, %r539, %r538, 14;
	shf.r.wrap.b32 	%r541, %r538, %r539, 14;
	mov.b64 	%rd734, {%r541, %r540};
	shf.r.wrap.b32 	%r542, %r539, %r538, 18;
	shf.r.wrap.b32 	%r543, %r538, %r539, 18;
	mov.b64 	%rd735, {%r543, %r542};
	xor.b64  	%rd736, %rd734, %rd735;
	shf.l.wrap.b32 	%r544, %r538, %r539, 23;
	shf.l.wrap.b32 	%r545, %r539, %r538, 23;
	mov.b64 	%rd737, {%r545, %r544};
	xor.b64  	%rd738, %rd736, %rd737;
	xor.b64  	%rd739, %rd673, %rd636;
	and.b64  	%rd740, %rd710, %rd739;
	xor.b64  	%rd741, %rd740, %rd636;
	add.s64 	%rd742, %rd741, %rd599;
	add.s64 	%rd743, %rd742, %rd738;
	ld.const.u64 	%rd744, [%rd1066+184];
	add.s64 	%rd745, %rd743, %rd744;
	add.s64 	%rd746, %rd745, %rd1074;
	add.s64 	%rd747, %rd746, %rd610;
	and.b64  	%rd748, %rd721, %rd684;
	or.b64  	%rd749, %rd721, %rd684;
	and.b64  	%rd750, %rd749, %rd647;
	or.b64  	%rd751, %rd750, %rd748;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r546,%dummy}, %rd721;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r547}, %rd721;
	}
	shf.r.wrap.b32 	%r548, %r547, %r546, 28;
	shf.r.wrap.b32 	%r549, %r546, %r547, 28;
	mov.b64 	%rd752, {%r549, %r548};
	shf.l.wrap.b32 	%r550, %r546, %r547, 30;
	shf.l.wrap.b32 	%r551, %r547, %r546, 30;
	mov.b64 	%rd753, {%r551, %r550};
	xor.b64  	%rd754, %rd752, %rd753;
	shf.l.wrap.b32 	%r552, %r546, %r547, 25;
	shf.l.wrap.b32 	%r553, %r547, %r546, 25;
	mov.b64 	%rd755, {%r553, %r552};
	xor.b64  	%rd756, %rd754, %rd755;
	add.s64 	%rd757, %rd756, %rd751;
	add.s64 	%rd758, %rd757, %rd746;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r554,%dummy}, %rd1073;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r555}, %rd1073;
	}
	shf.r.wrap.b32 	%r556, %r555, %r554, 19;
	shf.r.wrap.b32 	%r557, %r554, %r555, 19;
	mov.b64 	%rd759, {%r557, %r556};
	shf.l.wrap.b32 	%r558, %r554, %r555, 3;
	shf.l.wrap.b32 	%r559, %r555, %r554, 3;
	mov.b64 	%rd760, {%r559, %r558};
	xor.b64  	%rd761, %rd759, %rd760;
	shr.u64 	%rd762, %rd1073, 6;
	xor.b64  	%rd763, %rd761, %rd762;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r560,%dummy}, %rd1076;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r561}, %rd1076;
	}
	shf.r.wrap.b32 	%r562, %r561, %r560, 8;
	shf.r.wrap.b32 	%r563, %r560, %r561, 8;
	mov.b64 	%rd764, {%r563, %r562};
	shf.r.wrap.b32 	%r564, %r561, %r560, 1;
	shf.r.wrap.b32 	%r565, %r560, %r561, 1;
	mov.b64 	%rd765, {%r565, %r564};
	xor.b64  	%rd766, %rd765, %rd764;
	shr.u64 	%rd767, %rd1076, 7;
	xor.b64  	%rd768, %rd766, %rd767;
	add.s64 	%rd769, %rd763, %rd1075;
	add.s64 	%rd770, %rd769, %rd1068;
	add.s64 	%rd1075, %rd770, %rd768;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r566,%dummy}, %rd747;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r567}, %rd747;
	}
	shf.r.wrap.b32 	%r568, %r567, %r566, 14;
	shf.r.wrap.b32 	%r569, %r566, %r567, 14;
	mov.b64 	%rd771, {%r569, %r568};
	shf.r.wrap.b32 	%r570, %r567, %r566, 18;
	shf.r.wrap.b32 	%r571, %r566, %r567, 18;
	mov.b64 	%rd772, {%r571, %r570};
	xor.b64  	%rd773, %rd771, %rd772;
	shf.l.wrap.b32 	%r572, %r566, %r567, 23;
	shf.l.wrap.b32 	%r573, %r567, %r566, 23;
	mov.b64 	%rd774, {%r573, %r572};
	xor.b64  	%rd775, %rd773, %rd774;
	xor.b64  	%rd776, %rd710, %rd673;
	and.b64  	%rd777, %rd747, %rd776;
	xor.b64  	%rd778, %rd777, %rd673;
	add.s64 	%rd779, %rd778, %rd636;
	add.s64 	%rd780, %rd779, %rd775;
	ld.const.u64 	%rd781, [%rd1066+192];
	add.s64 	%rd782, %rd780, %rd781;
	add.s64 	%rd783, %rd782, %rd1075;
	add.s64 	%rd784, %rd783, %rd647;
	and.b64  	%rd785, %rd758, %rd721;
	or.b64  	%rd786, %rd758, %rd721;
	and.b64  	%rd787, %rd786, %rd684;
	or.b64  	%rd788, %rd787, %rd785;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r574,%dummy}, %rd758;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r575}, %rd758;
	}
	shf.r.wrap.b32 	%r576, %r575, %r574, 28;
	shf.r.wrap.b32 	%r577, %r574, %r575, 28;
	mov.b64 	%rd789, {%r577, %r576};
	shf.l.wrap.b32 	%r578, %r574, %r575, 30;
	shf.l.wrap.b32 	%r579, %r575, %r574, 30;
	mov.b64 	%rd790, {%r579, %r578};
	xor.b64  	%rd791, %rd789, %rd790;
	shf.l.wrap.b32 	%r580, %r574, %r575, 25;
	shf.l.wrap.b32 	%r581, %r575, %r574, 25;
	mov.b64 	%rd792, {%r581, %r580};
	xor.b64  	%rd793, %rd791, %rd792;
	add.s64 	%rd794, %rd793, %rd788;
	add.s64 	%rd795, %rd794, %rd783;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r582,%dummy}, %rd1074;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r583}, %rd1074;
	}
	shf.r.wrap.b32 	%r584, %r583, %r582, 19;
	shf.r.wrap.b32 	%r585, %r582, %r583, 19;
	mov.b64 	%rd796, {%r585, %r584};
	shf.l.wrap.b32 	%r586, %r582, %r583, 3;
	shf.l.wrap.b32 	%r587, %r583, %r582, 3;
	mov.b64 	%rd797, {%r587, %r586};
	xor.b64  	%rd798, %rd796, %rd797;
	shr.u64 	%rd799, %rd1074, 6;
	xor.b64  	%rd800, %rd798, %rd799;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r588,%dummy}, %rd1077;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r589}, %rd1077;
	}
	shf.r.wrap.b32 	%r590, %r589, %r588, 8;
	shf.r.wrap.b32 	%r591, %r588, %r589, 8;
	mov.b64 	%rd801, {%r591, %r590};
	shf.r.wrap.b32 	%r592, %r589, %r588, 1;
	shf.r.wrap.b32 	%r593, %r588, %r589, 1;
	mov.b64 	%rd802, {%r593, %r592};
	xor.b64  	%rd803, %rd802, %rd801;
	shr.u64 	%rd804, %rd1077, 7;
	xor.b64  	%rd805, %rd803, %rd804;
	add.s64 	%rd806, %rd800, %rd1076;
	add.s64 	%rd807, %rd806, %rd1069;
	add.s64 	%rd1076, %rd807, %rd805;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r594,%dummy}, %rd784;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r595}, %rd784;
	}
	shf.r.wrap.b32 	%r596, %r595, %r594, 14;
	shf.r.wrap.b32 	%r597, %r594, %r595, 14;
	mov.b64 	%rd808, {%r597, %r596};
	shf.r.wrap.b32 	%r598, %r595, %r594, 18;
	shf.r.wrap.b32 	%r599, %r594, %r595, 18;
	mov.b64 	%rd809, {%r599, %r598};
	xor.b64  	%rd810, %rd808, %rd809;
	shf.l.wrap.b32 	%r600, %r594, %r595, 23;
	shf.l.wrap.b32 	%r601, %r595, %r594, 23;
	mov.b64 	%rd811, {%r601, %r600};
	xor.b64  	%rd812, %rd810, %rd811;
	xor.b64  	%rd813, %rd747, %rd710;
	and.b64  	%rd814, %rd784, %rd813;
	xor.b64  	%rd815, %rd814, %rd710;
	add.s64 	%rd816, %rd815, %rd673;
	add.s64 	%rd817, %rd816, %rd812;
	ld.const.u64 	%rd818, [%rd1066+200];
	add.s64 	%rd819, %rd817, %rd818;
	add.s64 	%rd820, %rd819, %rd1076;
	add.s64 	%rd821, %rd820, %rd684;
	and.b64  	%rd822, %rd795, %rd758;
	or.b64  	%rd823, %rd795, %rd758;
	and.b64  	%rd824, %rd823, %rd721;
	or.b64  	%rd825, %rd824, %rd822;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r602,%dummy}, %rd795;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r603}, %rd795;
	}
	shf.r.wrap.b32 	%r604, %r603, %r602, 28;
	shf.r.wrap.b32 	%r605, %r602, %r603, 28;
	mov.b64 	%rd826, {%r605, %r604};
	shf.l.wrap.b32 	%r606, %r602, %r603, 30;
	shf.l.wrap.b32 	%r607, %r603, %r602, 30;
	mov.b64 	%rd827, {%r607, %r606};
	xor.b64  	%rd828, %rd826, %rd827;
	shf.l.wrap.b32 	%r608, %r602, %r603, 25;
	shf.l.wrap.b32 	%r609, %r603, %r602, 25;
	mov.b64 	%rd829, {%r609, %r608};
	xor.b64  	%rd830, %rd828, %rd829;
	add.s64 	%rd831, %rd830, %rd825;
	add.s64 	%rd832, %rd831, %rd820;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r610,%dummy}, %rd1075;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r611}, %rd1075;
	}
	shf.r.wrap.b32 	%r612, %r611, %r610, 19;
	shf.r.wrap.b32 	%r613, %r610, %r611, 19;
	mov.b64 	%rd833, {%r613, %r612};
	shf.l.wrap.b32 	%r614, %r610, %r611, 3;
	shf.l.wrap.b32 	%r615, %r611, %r610, 3;
	mov.b64 	%rd834, {%r615, %r614};
	xor.b64  	%rd835, %rd833, %rd834;
	shr.u64 	%rd836, %rd1075, 6;
	xor.b64  	%rd837, %rd835, %rd836;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r616,%dummy}, %rd1078;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r617}, %rd1078;
	}
	shf.r.wrap.b32 	%r618, %r617, %r616, 8;
	shf.r.wrap.b32 	%r619, %r616, %r617, 8;
	mov.b64 	%rd838, {%r619, %r618};
	shf.r.wrap.b32 	%r620, %r617, %r616, 1;
	shf.r.wrap.b32 	%r621, %r616, %r617, 1;
	mov.b64 	%rd839, {%r621, %r620};
	xor.b64  	%rd840, %rd839, %rd838;
	shr.u64 	%rd841, %rd1078, 7;
	xor.b64  	%rd842, %rd840, %rd841;
	add.s64 	%rd843, %rd837, %rd1077;
	add.s64 	%rd844, %rd843, %rd1070;
	add.s64 	%rd1077, %rd844, %rd842;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r622,%dummy}, %rd821;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r623}, %rd821;
	}
	shf.r.wrap.b32 	%r624, %r623, %r622, 14;
	shf.r.wrap.b32 	%r625, %r622, %r623, 14;
	mov.b64 	%rd845, {%r625, %r624};
	shf.r.wrap.b32 	%r626, %r623, %r622, 18;
	shf.r.wrap.b32 	%r627, %r622, %r623, 18;
	mov.b64 	%rd846, {%r627, %r626};
	xor.b64  	%rd847, %rd845, %rd846;
	shf.l.wrap.b32 	%r628, %r622, %r623, 23;
	shf.l.wrap.b32 	%r629, %r623, %r622, 23;
	mov.b64 	%rd848, {%r629, %r628};
	xor.b64  	%rd849, %rd847, %rd848;
	xor.b64  	%rd850, %rd784, %rd747;
	and.b64  	%rd851, %rd821, %rd850;
	xor.b64  	%rd852, %rd851, %rd747;
	add.s64 	%rd853, %rd852, %rd710;
	add.s64 	%rd854, %rd853, %rd849;
	ld.const.u64 	%rd855, [%rd1066+208];
	add.s64 	%rd856, %rd854, %rd855;
	add.s64 	%rd857, %rd856, %rd1077;
	add.s64 	%rd858, %rd857, %rd721;
	and.b64  	%rd859, %rd832, %rd795;
	or.b64  	%rd860, %rd832, %rd795;
	and.b64  	%rd861, %rd860, %rd758;
	or.b64  	%rd862, %rd861, %rd859;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r630,%dummy}, %rd832;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r631}, %rd832;
	}
	shf.r.wrap.b32 	%r632, %r631, %r630, 28;
	shf.r.wrap.b32 	%r633, %r630, %r631, 28;
	mov.b64 	%rd863, {%r633, %r632};
	shf.l.wrap.b32 	%r634, %r630, %r631, 30;
	shf.l.wrap.b32 	%r635, %r631, %r630, 30;
	mov.b64 	%rd864, {%r635, %r634};
	xor.b64  	%rd865, %rd863, %rd864;
	shf.l.wrap.b32 	%r636, %r630, %r631, 25;
	shf.l.wrap.b32 	%r637, %r631, %r630, 25;
	mov.b64 	%rd866, {%r637, %r636};
	xor.b64  	%rd867, %rd865, %rd866;
	add.s64 	%rd868, %rd867, %rd862;
	add.s64 	%rd869, %rd868, %rd857;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r638,%dummy}, %rd1076;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r639}, %rd1076;
	}
	shf.r.wrap.b32 	%r640, %r639, %r638, 19;
	shf.r.wrap.b32 	%r641, %r638, %r639, 19;
	mov.b64 	%rd870, {%r641, %r640};
	shf.l.wrap.b32 	%r642, %r638, %r639, 3;
	shf.l.wrap.b32 	%r643, %r639, %r638, 3;
	mov.b64 	%rd871, {%r643, %r642};
	xor.b64  	%rd872, %rd870, %rd871;
	shr.u64 	%rd873, %rd1076, 6;
	xor.b64  	%rd874, %rd872, %rd873;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r644,%dummy}, %rd1079;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r645}, %rd1079;
	}
	shf.r.wrap.b32 	%r646, %r645, %r644, 8;
	shf.r.wrap.b32 	%r647, %r644, %r645, 8;
	mov.b64 	%rd875, {%r647, %r646};
	shf.r.wrap.b32 	%r648, %r645, %r644, 1;
	shf.r.wrap.b32 	%r649, %r644, %r645, 1;
	mov.b64 	%rd876, {%r649, %r648};
	xor.b64  	%rd877, %rd876, %rd875;
	shr.u64 	%rd878, %rd1079, 7;
	xor.b64  	%rd879, %rd877, %rd878;
	add.s64 	%rd880, %rd874, %rd1078;
	add.s64 	%rd881, %rd880, %rd1071;
	add.s64 	%rd1078, %rd881, %rd879;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r650,%dummy}, %rd858;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r651}, %rd858;
	}
	shf.r.wrap.b32 	%r652, %r651, %r650, 14;
	shf.r.wrap.b32 	%r653, %r650, %r651, 14;
	mov.b64 	%rd882, {%r653, %r652};
	shf.r.wrap.b32 	%r654, %r651, %r650, 18;
	shf.r.wrap.b32 	%r655, %r650, %r651, 18;
	mov.b64 	%rd883, {%r655, %r654};
	xor.b64  	%rd884, %rd882, %rd883;
	shf.l.wrap.b32 	%r656, %r650, %r651, 23;
	shf.l.wrap.b32 	%r657, %r651, %r650, 23;
	mov.b64 	%rd885, {%r657, %r656};
	xor.b64  	%rd886, %rd884, %rd885;
	xor.b64  	%rd887, %rd821, %rd784;
	and.b64  	%rd888, %rd858, %rd887;
	xor.b64  	%rd889, %rd888, %rd784;
	add.s64 	%rd890, %rd889, %rd747;
	add.s64 	%rd891, %rd890, %rd886;
	ld.const.u64 	%rd892, [%rd1066+216];
	add.s64 	%rd893, %rd891, %rd892;
	add.s64 	%rd894, %rd893, %rd1078;
	add.s64 	%rd895, %rd894, %rd758;
	and.b64  	%rd896, %rd869, %rd832;
	or.b64  	%rd897, %rd869, %rd832;
	and.b64  	%rd898, %rd897, %rd795;
	or.b64  	%rd899, %rd898, %rd896;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r658,%dummy}, %rd869;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r659}, %rd869;
	}
	shf.r.wrap.b32 	%r660, %r659, %r658, 28;
	shf.r.wrap.b32 	%r661, %r658, %r659, 28;
	mov.b64 	%rd900, {%r661, %r660};
	shf.l.wrap.b32 	%r662, %r658, %r659, 30;
	shf.l.wrap.b32 	%r663, %r659, %r658, 30;
	mov.b64 	%rd901, {%r663, %r662};
	xor.b64  	%rd902, %rd900, %rd901;
	shf.l.wrap.b32 	%r664, %r658, %r659, 25;
	shf.l.wrap.b32 	%r665, %r659, %r658, 25;
	mov.b64 	%rd903, {%r665, %r664};
	xor.b64  	%rd904, %rd902, %rd903;
	add.s64 	%rd905, %rd904, %rd899;
	add.s64 	%rd906, %rd905, %rd894;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r666,%dummy}, %rd1077;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r667}, %rd1077;
	}
	shf.r.wrap.b32 	%r668, %r667, %r666, 19;
	shf.r.wrap.b32 	%r669, %r666, %r667, 19;
	mov.b64 	%rd907, {%r669, %r668};
	shf.l.wrap.b32 	%r670, %r666, %r667, 3;
	shf.l.wrap.b32 	%r671, %r667, %r666, 3;
	mov.b64 	%rd908, {%r671, %r670};
	xor.b64  	%rd909, %rd907, %rd908;
	shr.u64 	%rd910, %rd1077, 6;
	xor.b64  	%rd911, %rd909, %rd910;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r672,%dummy}, %rd1080;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r673}, %rd1080;
	}
	shf.r.wrap.b32 	%r674, %r673, %r672, 8;
	shf.r.wrap.b32 	%r675, %r672, %r673, 8;
	mov.b64 	%rd912, {%r675, %r674};
	shf.r.wrap.b32 	%r676, %r673, %r672, 1;
	shf.r.wrap.b32 	%r677, %r672, %r673, 1;
	mov.b64 	%rd913, {%r677, %r676};
	xor.b64  	%rd914, %rd913, %rd912;
	shr.u64 	%rd915, %rd1080, 7;
	xor.b64  	%rd916, %rd914, %rd915;
	add.s64 	%rd917, %rd911, %rd1079;
	add.s64 	%rd918, %rd917, %rd1072;
	add.s64 	%rd1079, %rd918, %rd916;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r678,%dummy}, %rd895;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r679}, %rd895;
	}
	shf.r.wrap.b32 	%r680, %r679, %r678, 14;
	shf.r.wrap.b32 	%r681, %r678, %r679, 14;
	mov.b64 	%rd919, {%r681, %r680};
	shf.r.wrap.b32 	%r682, %r679, %r678, 18;
	shf.r.wrap.b32 	%r683, %r678, %r679, 18;
	mov.b64 	%rd920, {%r683, %r682};
	xor.b64  	%rd921, %rd919, %rd920;
	shf.l.wrap.b32 	%r684, %r678, %r679, 23;
	shf.l.wrap.b32 	%r685, %r679, %r678, 23;
	mov.b64 	%rd922, {%r685, %r684};
	xor.b64  	%rd923, %rd921, %rd922;
	xor.b64  	%rd924, %rd858, %rd821;
	and.b64  	%rd925, %rd895, %rd924;
	xor.b64  	%rd926, %rd925, %rd821;
	add.s64 	%rd927, %rd926, %rd784;
	add.s64 	%rd928, %rd927, %rd923;
	ld.const.u64 	%rd929, [%rd1066+224];
	add.s64 	%rd930, %rd928, %rd929;
	add.s64 	%rd931, %rd930, %rd1079;
	add.s64 	%rd1090, %rd931, %rd795;
	and.b64  	%rd932, %rd906, %rd869;
	or.b64  	%rd933, %rd906, %rd869;
	and.b64  	%rd934, %rd933, %rd832;
	or.b64  	%rd935, %rd934, %rd932;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r686,%dummy}, %rd906;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r687}, %rd906;
	}
	shf.r.wrap.b32 	%r688, %r687, %r686, 28;
	shf.r.wrap.b32 	%r689, %r686, %r687, 28;
	mov.b64 	%rd936, {%r689, %r688};
	shf.l.wrap.b32 	%r690, %r686, %r687, 30;
	shf.l.wrap.b32 	%r691, %r687, %r686, 30;
	mov.b64 	%rd937, {%r691, %r690};
	xor.b64  	%rd938, %rd936, %rd937;
	shf.l.wrap.b32 	%r692, %r686, %r687, 25;
	shf.l.wrap.b32 	%r693, %r687, %r686, 25;
	mov.b64 	%rd939, {%r693, %r692};
	xor.b64  	%rd940, %rd938, %rd939;
	add.s64 	%rd941, %rd940, %rd935;
	add.s64 	%rd1086, %rd941, %rd931;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r694,%dummy}, %rd1078;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r695}, %rd1078;
	}
	shf.r.wrap.b32 	%r696, %r695, %r694, 19;
	shf.r.wrap.b32 	%r697, %r694, %r695, 19;
	mov.b64 	%rd942, {%r697, %r696};
	shf.l.wrap.b32 	%r698, %r694, %r695, 3;
	shf.l.wrap.b32 	%r699, %r695, %r694, 3;
	mov.b64 	%rd943, {%r699, %r698};
	xor.b64  	%rd944, %rd942, %rd943;
	shr.u64 	%rd945, %rd1078, 6;
	xor.b64  	%rd946, %rd944, %rd945;
	shf.r.wrap.b32 	%r700, %r330, %r331, 8;
	shf.r.wrap.b32 	%r701, %r331, %r330, 8;
	mov.b64 	%rd947, {%r701, %r700};
	shf.r.wrap.b32 	%r702, %r330, %r331, 1;
	shf.r.wrap.b32 	%r703, %r331, %r330, 1;
	mov.b64 	%rd948, {%r703, %r702};
	xor.b64  	%rd949, %rd948, %rd947;
	shr.u64 	%rd950, %rd1081, 7;
	xor.b64  	%rd951, %rd949, %rd950;
	add.s64 	%rd952, %rd946, %rd1080;
	add.s64 	%rd953, %rd952, %rd1073;
	add.s64 	%rd1080, %rd953, %rd951;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r704,%dummy}, %rd1090;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r705}, %rd1090;
	}
	shf.r.wrap.b32 	%r706, %r705, %r704, 14;
	shf.r.wrap.b32 	%r707, %r704, %r705, 14;
	mov.b64 	%rd954, {%r707, %r706};
	shf.r.wrap.b32 	%r708, %r705, %r704, 18;
	shf.r.wrap.b32 	%r709, %r704, %r705, 18;
	mov.b64 	%rd955, {%r709, %r708};
	xor.b64  	%rd956, %rd954, %rd955;
	shf.l.wrap.b32 	%r710, %r704, %r705, 23;
	shf.l.wrap.b32 	%r711, %r705, %r704, 23;
	mov.b64 	%rd957, {%r711, %r710};
	xor.b64  	%rd958, %rd956, %rd957;
	xor.b64  	%rd959, %rd895, %rd858;
	and.b64  	%rd960, %rd1090, %rd959;
	xor.b64  	%rd961, %rd960, %rd858;
	add.s64 	%rd962, %rd961, %rd821;
	add.s64 	%rd963, %rd962, %rd958;
	ld.const.u64 	%rd964, [%rd1066+232];
	add.s64 	%rd965, %rd963, %rd964;
	add.s64 	%rd966, %rd965, %rd1080;
	add.s64 	%rd1089, %rd966, %rd832;
	and.b64  	%rd967, %rd1086, %rd906;
	or.b64  	%rd968, %rd1086, %rd906;
	and.b64  	%rd969, %rd968, %rd869;
	or.b64  	%rd970, %rd969, %rd967;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r712,%dummy}, %rd1086;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r713}, %rd1086;
	}
	shf.r.wrap.b32 	%r714, %r713, %r712, 28;
	shf.r.wrap.b32 	%r715, %r712, %r713, 28;
	mov.b64 	%rd971, {%r715, %r714};
	shf.l.wrap.b32 	%r716, %r712, %r713, 30;
	shf.l.wrap.b32 	%r717, %r713, %r712, 30;
	mov.b64 	%rd972, {%r717, %r716};
	xor.b64  	%rd973, %rd971, %rd972;
	shf.l.wrap.b32 	%r718, %r712, %r713, 25;
	shf.l.wrap.b32 	%r719, %r713, %r712, 25;
	mov.b64 	%rd974, {%r719, %r718};
	xor.b64  	%rd975, %rd973, %rd974;
	add.s64 	%rd976, %rd975, %rd970;
	add.s64 	%rd1085, %rd976, %rd966;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r720,%dummy}, %rd1079;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r721}, %rd1079;
	}
	shf.r.wrap.b32 	%r722, %r721, %r720, 19;
	shf.r.wrap.b32 	%r723, %r720, %r721, 19;
	mov.b64 	%rd977, {%r723, %r722};
	shf.l.wrap.b32 	%r724, %r720, %r721, 3;
	shf.l.wrap.b32 	%r725, %r721, %r720, 3;
	mov.b64 	%rd978, {%r725, %r724};
	xor.b64  	%rd979, %rd977, %rd978;
	shr.u64 	%rd980, %rd1079, 6;
	xor.b64  	%rd981, %rd979, %rd980;
	shf.r.wrap.b32 	%r726, %r358, %r359, 8;
	shf.r.wrap.b32 	%r727, %r359, %r358, 8;
	mov.b64 	%rd982, {%r727, %r726};
	shf.r.wrap.b32 	%r728, %r358, %r359, 1;
	shf.r.wrap.b32 	%r729, %r359, %r358, 1;
	mov.b64 	%rd983, {%r729, %r728};
	xor.b64  	%rd984, %rd983, %rd982;
	shr.u64 	%rd985, %rd1082, 7;
	xor.b64  	%rd986, %rd984, %rd985;
	add.s64 	%rd987, %rd981, %rd1081;
	add.s64 	%rd988, %rd987, %rd1074;
	add.s64 	%rd1081, %rd988, %rd986;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r730,%dummy}, %rd1089;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r731}, %rd1089;
	}
	shf.r.wrap.b32 	%r732, %r731, %r730, 14;
	shf.r.wrap.b32 	%r733, %r730, %r731, 14;
	mov.b64 	%rd989, {%r733, %r732};
	shf.r.wrap.b32 	%r734, %r731, %r730, 18;
	shf.r.wrap.b32 	%r735, %r730, %r731, 18;
	mov.b64 	%rd990, {%r735, %r734};
	xor.b64  	%rd991, %rd989, %rd990;
	shf.l.wrap.b32 	%r736, %r730, %r731, 23;
	shf.l.wrap.b32 	%r737, %r731, %r730, 23;
	mov.b64 	%rd992, {%r737, %r736};
	xor.b64  	%rd993, %rd991, %rd992;
	xor.b64  	%rd994, %rd1090, %rd895;
	and.b64  	%rd995, %rd1089, %rd994;
	xor.b64  	%rd996, %rd995, %rd895;
	add.s64 	%rd997, %rd996, %rd858;
	add.s64 	%rd998, %rd997, %rd993;
	ld.const.u64 	%rd999, [%rd1066+240];
	add.s64 	%rd1000, %rd998, %rd999;
	add.s64 	%rd1001, %rd1000, %rd1081;
	add.s64 	%rd1088, %rd1001, %rd869;
	and.b64  	%rd1002, %rd1085, %rd1086;
	or.b64  	%rd1003, %rd1085, %rd1086;
	and.b64  	%rd1004, %rd1003, %rd906;
	or.b64  	%rd1005, %rd1004, %rd1002;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r738,%dummy}, %rd1085;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r739}, %rd1085;
	}
	shf.r.wrap.b32 	%r740, %r739, %r738, 28;
	shf.r.wrap.b32 	%r741, %r738, %r739, 28;
	mov.b64 	%rd1006, {%r741, %r740};
	shf.l.wrap.b32 	%r742, %r738, %r739, 30;
	shf.l.wrap.b32 	%r743, %r739, %r738, 30;
	mov.b64 	%rd1007, {%r743, %r742};
	xor.b64  	%rd1008, %rd1006, %rd1007;
	shf.l.wrap.b32 	%r744, %r738, %r739, 25;
	shf.l.wrap.b32 	%r745, %r739, %r738, 25;
	mov.b64 	%rd1009, {%r745, %r744};
	xor.b64  	%rd1010, %rd1008, %rd1009;
	add.s64 	%rd1011, %rd1010, %rd1005;
	add.s64 	%rd1084, %rd1011, %rd1001;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r746,%dummy}, %rd1080;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r747}, %rd1080;
	}
	shf.r.wrap.b32 	%r748, %r747, %r746, 19;
	shf.r.wrap.b32 	%r749, %r746, %r747, 19;
	mov.b64 	%rd1012, {%r749, %r748};
	shf.l.wrap.b32 	%r750, %r746, %r747, 3;
	shf.l.wrap.b32 	%r751, %r747, %r746, 3;
	mov.b64 	%rd1013, {%r751, %r750};
	xor.b64  	%rd1014, %rd1012, %rd1013;
	shr.u64 	%rd1015, %rd1080, 6;
	xor.b64  	%rd1016, %rd1014, %rd1015;
	shf.r.wrap.b32 	%r752, %r387, %r386, 1;
	shf.r.wrap.b32 	%r753, %r386, %r387, 1;
	mov.b64 	%rd1017, {%r753, %r752};
	shf.r.wrap.b32 	%r754, %r387, %r386, 8;
	shf.r.wrap.b32 	%r755, %r386, %r387, 8;
	mov.b64 	%rd1018, {%r755, %r754};
	xor.b64  	%rd1019, %rd1017, %rd1018;
	shr.u64 	%rd1020, %rd1067, 7;
	xor.b64  	%rd1021, %rd1019, %rd1020;
	add.s64 	%rd1022, %rd1016, %rd1082;
	add.s64 	%rd1023, %rd1022, %rd1075;
	add.s64 	%rd1082, %rd1023, %rd1021;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r756,%dummy}, %rd1088;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r757}, %rd1088;
	}
	shf.r.wrap.b32 	%r758, %r757, %r756, 14;
	shf.r.wrap.b32 	%r759, %r756, %r757, 14;
	mov.b64 	%rd1024, {%r759, %r758};
	shf.r.wrap.b32 	%r760, %r757, %r756, 18;
	shf.r.wrap.b32 	%r761, %r756, %r757, 18;
	mov.b64 	%rd1025, {%r761, %r760};
	xor.b64  	%rd1026, %rd1024, %rd1025;
	shf.l.wrap.b32 	%r762, %r756, %r757, 23;
	shf.l.wrap.b32 	%r763, %r757, %r756, 23;
	mov.b64 	%rd1027, {%r763, %r762};
	xor.b64  	%rd1028, %rd1026, %rd1027;
	xor.b64  	%rd1029, %rd1089, %rd1090;
	and.b64  	%rd1030, %rd1088, %rd1029;
	xor.b64  	%rd1031, %rd1030, %rd1090;
	add.s64 	%rd1032, %rd1031, %rd895;
	add.s64 	%rd1033, %rd1032, %rd1028;
	ld.const.u64 	%rd1034, [%rd1066+248];
	add.s64 	%rd1035, %rd1033, %rd1034;
	add.s64 	%rd1036, %rd1035, %rd1082;
	add.s64 	%rd1087, %rd1036, %rd906;
	and.b64  	%rd1037, %rd1084, %rd1085;
	or.b64  	%rd1038, %rd1084, %rd1085;
	and.b64  	%rd1039, %rd1038, %rd1086;
	or.b64  	%rd1040, %rd1039, %rd1037;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r764,%dummy}, %rd1084;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r765}, %rd1084;
	}
	shf.r.wrap.b32 	%r766, %r765, %r764, 28;
	shf.r.wrap.b32 	%r767, %r764, %r765, 28;
	mov.b64 	%rd1041, {%r767, %r766};
	shf.l.wrap.b32 	%r768, %r764, %r765, 30;
	shf.l.wrap.b32 	%r769, %r765, %r764, 30;
	mov.b64 	%rd1042, {%r769, %r768};
	xor.b64  	%rd1043, %rd1041, %rd1042;
	shf.l.wrap.b32 	%r770, %r764, %r765, 25;
	shf.l.wrap.b32 	%r771, %r765, %r764, 25;
	mov.b64 	%rd1044, {%r771, %r770};
	xor.b64  	%rd1045, %rd1043, %rd1044;
	add.s64 	%rd1046, %rd1045, %rd1040;
	add.s64 	%rd1083, %rd1046, %rd1036;
	add.s32 	%r800, %r800, 16;
	setp.ne.s32 	%p1, %r800, 64;
	mov.u64 	%rd1066, %rd74;
	@%p1 bra 	$L__BB1_1;

	ld.param.u64 	%rd1063, [kernel_crypt_param_2];
	add.s64 	%rd75, %rd1083, 7640891576956012808;
	shr.u64 	%rd1047, %rd75, 32;
	add.s64 	%rd1048, %rd1084, -4942790177534073029;
	shr.u64 	%rd1049, %rd1048, 32;
	xor.b64  	%rd1050, %rd1049, %rd75;
	xor.b64  	%rd1051, %rd1050, %rd1047;
	cvt.u32.u64 	%r772, %rd1051;
	and.b64  	%rd1052, %rd1051, 134217696;
	cvt.u32.u64 	%r773, %rd1048;
	add.s32 	%r774, %r772, %r773;
	cvt.u32.u64 	%r775, %rd1047;
	xor.b32  	%r4, %r774, %r775;
	shr.u64 	%rd1053, %rd1052, 3;
	add.s64 	%rd1054, %rd1063, %rd1053;
	and.b32  	%r776, %r772, 31;
	mov.u32 	%r777, 1;
	shl.b32 	%r778, %r777, %r776;
	ld.global.nc.u32 	%r779, [%rd1054];
	and.b32  	%r780, %r779, %r778;
	setp.eq.s32 	%p2, %r780, 0;
	@%p2 bra 	$L__BB1_5;

	ld.param.u64 	%rd1064, [kernel_crypt_param_2];
	and.b32  	%r781, %r4, 134217696;
	shr.u32 	%r782, %r781, 5;
	mul.wide.u32 	%rd1055, %r782, 4;
	add.s64 	%rd1056, %rd1064, %rd1055;
	and.b32  	%r783, %r4, 31;
	shl.b32 	%r785, %r777, %r783;
	ld.global.nc.u32 	%r786, [%rd1056];
	and.b32  	%r787, %r786, %r785;
	setp.eq.s32 	%p3, %r787, 0;
	@%p3 bra 	$L__BB1_5;

	mov.b32 	%r799, %envreg3;
	mov.u32 	%r798, %tid.x;
	add.s32 	%r797, %r798, %r799;
	mov.u32 	%r796, %ctaid.x;
	mov.u32 	%r795, %ntid.x;
	mad.lo.s32 	%r794, %r795, %r796, %r797;
	ld.param.u32 	%r793, [kernel_crypt_param_0];
	ld.param.u64 	%rd1065, [kernel_crypt_param_1];
	atom.global.add.u32 	%r788, [%rd1065], 1;
	mul.lo.s32 	%r789, %r788, 3;
	add.s32 	%r790, %r789, 1;
	mul.wide.u32 	%rd1057, %r790, 4;
	add.s64 	%rd1058, %rd1065, %rd1057;
	st.volatile.global.u32 	[%rd1058], %r794;
	add.s32 	%r791, %r789, 2;
	mul.wide.u32 	%rd1059, %r791, 4;
	add.s64 	%rd1060, %rd1065, %rd1059;
	st.volatile.global.u32 	[%rd1060], %r793;
	add.s32 	%r792, %r789, 3;
	mul.wide.u32 	%rd1061, %r792, 4;
	add.s64 	%rd1062, %rd1065, %rd1061;
	st.volatile.global.u32 	[%rd1062], %rd75;

$L__BB1_5:
	ret;

}
	// .globl	kernel_crypt_raw
.entry kernel_crypt_raw(
	.param .u64 .ptr .const .align 4 kernel_crypt_raw_param_0,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_1,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_2,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_3,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_4,
	.param .u32 kernel_crypt_raw_param_5,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_6,
	.param .u64 .ptr .global .align 4 kernel_crypt_raw_param_7
)
{
	.local .align 16 .b8 	__local_depot2[128];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .b32 	%r<811>;
	.reg .b64 	%rd<1147>;


	mov.u64 	%SPL, __local_depot2;
	ld.param.u64 	%rd98, [kernel_crypt_raw_param_1];
	ld.param.u64 	%rd108, [kernel_crypt_raw_param_2];
	add.u64 	%rd1, %SPL, 0;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mov.b32 	%r12, %envreg3;
	add.s32 	%r13, %r11, %r12;
	mad.lo.s32 	%r1, %r10, %r9, %r13;
	mul.wide.s32 	%rd110, %r1, 4;
	add.s64 	%rd111, %rd108, %rd110;
	ld.global.nc.u32 	%r2, [%rd111];
	mov.u64 	%rd1115, 0;
	st.local.v2.u64 	[%rd1], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+16], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+32], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+48], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+64], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+80], {%rd1115, %rd1115};
	st.local.v2.u64 	[%rd1+96], {%rd1115, %rd1115};
	st.local.u64 	[%rd1+112], %rd1115;
	and.b32  	%r3, %r2, 63;
	setp.eq.s32 	%p1, %r3, 0;
	mov.u64 	%rd1116, %rd1115;
	mov.u64 	%rd1117, %rd1115;
	mov.u64 	%rd1118, %rd1115;
	mov.u64 	%rd1119, %rd1115;
	mov.u64 	%rd1120, %rd1115;
	mov.u64 	%rd1121, %rd1115;
	@%p1 bra 	$L__BB2_4;

	shr.u32 	%r15, %r2, 6;
	mul.wide.u32 	%rd112, %r15, 4;
	add.s64 	%rd1114, %rd98, %rd112;
	mov.u32 	%r809, 0;
	mov.u64 	%rd1113, %rd1;

$L__BB2_2:
	add.s64 	%rd7, %rd1114, 4;
	ld.global.nc.u32 	%r16, [%rd1114];
	add.s64 	%rd8, %rd1113, 4;
	st.local.u32 	[%rd1113], %r16;
	add.s32 	%r809, %r809, 4;
	setp.lt.u32 	%p2, %r809, %r3;
	mov.u64 	%rd1113, %rd8;
	mov.u64 	%rd1114, %rd7;
	@%p2 bra 	$L__BB2_2;

	ld.local.v2.u64 	{%rd1121, %rd1120}, [%rd1+64];
	ld.local.v2.u64 	{%rd1119, %rd1118}, [%rd1+80];
	ld.local.v2.u64 	{%rd1117, %rd1116}, [%rd1+96];
	ld.local.u64 	%rd1115, [%rd1+112];

$L__BB2_4:
	and.b32  	%r18, %r3, 56;
	cvt.u64.u32 	%rd120, %r18;
	add.s64 	%rd121, %rd1, %rd120;
	shl.b32 	%r19, %r2, 3;
	cvt.u64.u32 	%rd122, %r19;
	and.b64  	%rd123, %rd122, 56;
	mov.u64 	%rd124, clear_mask;
	add.s64 	%rd125, %rd124, %rd123;
	ld.const.u64 	%rd126, [%rd125];
	ld.local.u64 	%rd127, [%rd121];
	and.b64  	%rd128, %rd126, %rd127;
	and.b32  	%r20, %r19, 56;
	mov.u64 	%rd129, 128;
	shl.b64 	%rd130, %rd129, %r20;
	or.b64  	%rd131, %rd128, %rd130;
	st.local.u64 	[%rd121], %rd131;
	ld.local.v2.u64 	{%rd132, %rd133}, [%rd1];
	mov.u32 	%r810, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r21, %temp}, %rd132;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r22}, %rd132;
	}
	mov.u32 	%r23, 291;
	prmt.b32 	%r24, %r21, %r810, %r23;
	prmt.b32 	%r25, %r22, %r810, %r23;
	mov.b64 	%rd1138, {%r25, %r24};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r26, %temp}, %rd133;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r27}, %rd133;
	}
	prmt.b32 	%r28, %r26, %r810, %r23;
	prmt.b32 	%r29, %r27, %r810, %r23;
	mov.b64 	%rd1137, {%r29, %r28};
	ld.local.v2.u64 	{%rd136, %rd137}, [%rd1+16];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r30, %temp}, %rd136;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r31}, %rd136;
	}
	prmt.b32 	%r32, %r30, %r810, %r23;
	prmt.b32 	%r33, %r31, %r810, %r23;
	mov.b64 	%rd1136, {%r33, %r32};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r34, %temp}, %rd137;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %rd137;
	}
	prmt.b32 	%r36, %r34, %r810, %r23;
	prmt.b32 	%r37, %r35, %r810, %r23;
	mov.b64 	%rd1135, {%r37, %r36};
	ld.local.v2.u64 	{%rd140, %rd141}, [%rd1+32];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r38, %temp}, %rd140;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r39}, %rd140;
	}
	prmt.b32 	%r40, %r38, %r810, %r23;
	prmt.b32 	%r41, %r39, %r810, %r23;
	mov.b64 	%rd1134, {%r41, %r40};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r42, %temp}, %rd141;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r43}, %rd141;
	}
	prmt.b32 	%r44, %r42, %r810, %r23;
	prmt.b32 	%r45, %r43, %r810, %r23;
	mov.b64 	%rd1133, {%r45, %r44};
	ld.local.v2.u64 	{%rd144, %rd145}, [%rd1+48];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r46, %temp}, %rd144;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r47}, %rd144;
	}
	prmt.b32 	%r48, %r46, %r810, %r23;
	prmt.b32 	%r49, %r47, %r810, %r23;
	mov.b64 	%rd1132, {%r49, %r48};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r50, %temp}, %rd145;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r51}, %rd145;
	}
	prmt.b32 	%r52, %r50, %r810, %r23;
	prmt.b32 	%r53, %r51, %r810, %r23;
	mov.b64 	%rd1131, {%r53, %r52};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r54, %temp}, %rd1121;
	}
	prmt.b32 	%r55, %r54, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r56}, %rd1121;
	}
	prmt.b32 	%r57, %r56, %r810, %r23;
	mov.b64 	%rd1130, {%r57, %r55};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r58, %temp}, %rd1120;
	}
	prmt.b32 	%r59, %r58, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r60}, %rd1120;
	}
	prmt.b32 	%r61, %r60, %r810, %r23;
	mov.b64 	%rd1129, {%r61, %r59};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r62, %temp}, %rd1119;
	}
	prmt.b32 	%r63, %r62, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r64}, %rd1119;
	}
	prmt.b32 	%r65, %r64, %r810, %r23;
	mov.b64 	%rd1128, {%r65, %r63};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r66, %temp}, %rd1118;
	}
	prmt.b32 	%r67, %r66, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %rd1118;
	}
	prmt.b32 	%r69, %r68, %r810, %r23;
	mov.b64 	%rd1127, {%r69, %r67};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r70, %temp}, %rd1117;
	}
	prmt.b32 	%r71, %r70, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r72}, %rd1117;
	}
	prmt.b32 	%r73, %r72, %r810, %r23;
	mov.b64 	%rd1126, {%r73, %r71};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r74, %temp}, %rd1116;
	}
	prmt.b32 	%r75, %r74, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r76}, %rd1116;
	}
	prmt.b32 	%r77, %r76, %r810, %r23;
	mov.b64 	%rd1125, {%r77, %r75};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r78, %temp}, %rd1115;
	}
	prmt.b32 	%r79, %r78, %r810, %r23;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r80}, %rd1115;
	}
	prmt.b32 	%r81, %r80, %r810, %r23;
	mov.b64 	%rd1124, {%r81, %r79};
	shl.b32 	%r82, %r3, 3;
	cvt.u64.u32 	%rd1123, %r82;
	mov.u64 	%rd148, 5840696475078001361;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r83,%dummy}, %rd148;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r84}, %rd148;
	}
	shf.r.wrap.b32 	%r85, %r84, %r83, 18;
	shf.r.wrap.b32 	%r86, %r83, %r84, 18;
	mov.b64 	%rd149, {%r86, %r85};
	shf.r.wrap.b32 	%r87, %r84, %r83, 14;
	shf.r.wrap.b32 	%r88, %r83, %r84, 14;
	mov.b64 	%rd150, {%r88, %r87};
	xor.b64  	%rd151, %rd150, %rd149;
	shf.l.wrap.b32 	%r89, %r83, %r84, 23;
	shf.l.wrap.b32 	%r90, %r84, %r83, 23;
	mov.b64 	%rd152, {%r90, %r89};
	xor.b64  	%rd153, %rd151, %rd152;
	add.s64 	%rd154, %rd153, %rd1138;
	mov.u64 	%rd155, 7640891576956012808;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r91}, %rd155;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r92,%dummy}, %rd155;
	}
	shf.l.wrap.b32 	%r93, %r92, %r91, 30;
	shf.l.wrap.b32 	%r94, %r91, %r92, 30;
	mov.b64 	%rd156, {%r94, %r93};
	shf.r.wrap.b32 	%r95, %r91, %r92, 28;
	shf.r.wrap.b32 	%r96, %r92, %r91, 28;
	mov.b64 	%rd157, {%r96, %r95};
	xor.b64  	%rd158, %rd157, %rd156;
	shf.l.wrap.b32 	%r97, %r92, %r91, 25;
	shf.l.wrap.b32 	%r98, %r91, %r92, 25;
	mov.b64 	%rd159, {%r98, %r97};
	xor.b64  	%rd160, %rd158, %rd159;
	add.s64 	%rd161, %rd160, %rd154;
	add.s64 	%rd162, %rd154, 7151922335638569927;
	add.s64 	%rd163, %rd161, -549249324024138239;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r99,%dummy}, %rd162;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r100}, %rd162;
	}
	shf.r.wrap.b32 	%r101, %r100, %r99, 14;
	shf.r.wrap.b32 	%r102, %r99, %r100, 14;
	mov.b64 	%rd164, {%r102, %r101};
	shf.r.wrap.b32 	%r103, %r100, %r99, 18;
	shf.r.wrap.b32 	%r104, %r99, %r100, 18;
	mov.b64 	%rd165, {%r104, %r103};
	xor.b64  	%rd166, %rd164, %rd165;
	shf.l.wrap.b32 	%r105, %r99, %r100, 23;
	shf.l.wrap.b32 	%r106, %r100, %r99, 23;
	mov.b64 	%rd167, {%r106, %r105};
	xor.b64  	%rd168, %rd166, %rd167;
	and.b64  	%rd169, %rd162, -3887949035690463538;
	xor.b64  	%rd170, %rd169, -7276294671716946913;
	add.s64 	%rd171, %rd170, %rd168;
	add.s64 	%rd172, %rd171, %rd1137;
	and.b64  	%rd173, %rd163, -3355664534840381901;
	or.b64  	%rd174, %rd173, 3026882967131160840;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r107,%dummy}, %rd163;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r108}, %rd163;
	}
	shf.r.wrap.b32 	%r109, %r108, %r107, 28;
	shf.r.wrap.b32 	%r110, %r107, %r108, 28;
	mov.b64 	%rd175, {%r110, %r109};
	shf.l.wrap.b32 	%r111, %r107, %r108, 30;
	shf.l.wrap.b32 	%r112, %r108, %r107, 30;
	mov.b64 	%rd176, {%r112, %r111};
	xor.b64  	%rd177, %rd175, %rd176;
	shf.l.wrap.b32 	%r113, %r107, %r108, 25;
	shf.l.wrap.b32 	%r114, %r108, %r107, 25;
	mov.b64 	%rd178, {%r114, %r113};
	xor.b64  	%rd179, %rd177, %rd178;
	add.s64 	%rd180, %rd179, %rd174;
	add.s64 	%rd181, %rd180, %rd172;
	add.s64 	%rd182, %rd172, -3663095898801038493;
	add.s64 	%rd183, %rd181, -8017781463737883848;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r115,%dummy}, %rd182;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r116}, %rd182;
	}
	shf.r.wrap.b32 	%r117, %r116, %r115, 14;
	shf.r.wrap.b32 	%r118, %r115, %r116, 14;
	mov.b64 	%rd184, {%r118, %r117};
	shf.r.wrap.b32 	%r119, %r116, %r115, 18;
	shf.r.wrap.b32 	%r120, %r115, %r116, 18;
	mov.b64 	%rd185, {%r120, %r119};
	xor.b64  	%rd186, %rd184, %rd185;
	shf.l.wrap.b32 	%r121, %r115, %r116, 23;
	shf.l.wrap.b32 	%r122, %r116, %r115, 23;
	mov.b64 	%rd187, {%r122, %r121};
	xor.b64  	%rd188, %rd186, %rd187;
	xor.b64  	%rd189, %rd162, 5840696475078001361;
	and.b64  	%rd190, %rd182, %rd189;
	xor.b64  	%rd191, %rd190, 5840696475078001361;
	add.s64 	%rd192, %rd191, %rd188;
	add.s64 	%rd193, %rd192, %rd1136;
	and.b64  	%rd194, %rd183, %rd163;
	or.b64  	%rd195, %rd183, %rd163;
	and.b64  	%rd196, %rd195, 7640891576956012808;
	or.b64  	%rd197, %rd196, %rd194;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r123,%dummy}, %rd183;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r124}, %rd183;
	}
	shf.r.wrap.b32 	%r125, %r124, %r123, 28;
	shf.r.wrap.b32 	%r126, %r123, %r124, 28;
	mov.b64 	%rd198, {%r126, %r125};
	shf.l.wrap.b32 	%r127, %r123, %r124, 30;
	shf.l.wrap.b32 	%r128, %r124, %r123, 30;
	mov.b64 	%rd199, {%r128, %r127};
	xor.b64  	%rd200, %rd198, %rd199;
	shf.l.wrap.b32 	%r129, %r123, %r124, 25;
	shf.l.wrap.b32 	%r130, %r124, %r123, 25;
	mov.b64 	%rd201, {%r130, %r129};
	xor.b64  	%rd202, %rd200, %rd201;
	add.s64 	%rd203, %rd202, %rd197;
	add.s64 	%rd204, %rd203, %rd193;
	add.s64 	%rd205, %rd193, 877659737583668873;
	add.s64 	%rd206, %rd204, 5820449915117741902;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r131,%dummy}, %rd205;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r132}, %rd205;
	}
	shf.r.wrap.b32 	%r133, %r132, %r131, 14;
	shf.r.wrap.b32 	%r134, %r131, %r132, 14;
	mov.b64 	%rd207, {%r134, %r133};
	shf.r.wrap.b32 	%r135, %r132, %r131, 18;
	shf.r.wrap.b32 	%r136, %r131, %r132, 18;
	mov.b64 	%rd208, {%r136, %r135};
	xor.b64  	%rd209, %rd207, %rd208;
	shf.l.wrap.b32 	%r137, %r131, %r132, 23;
	shf.l.wrap.b32 	%r138, %r132, %r131, 23;
	mov.b64 	%rd210, {%r138, %r137};
	xor.b64  	%rd211, %rd209, %rd210;
	xor.b64  	%rd212, %rd182, %rd162;
	and.b64  	%rd213, %rd205, %rd212;
	xor.b64  	%rd214, %rd213, %rd162;
	add.s64 	%rd215, %rd214, %rd211;
	add.s64 	%rd216, %rd215, %rd1135;
	and.b64  	%rd217, %rd206, %rd183;
	or.b64  	%rd218, %rd206, %rd183;
	and.b64  	%rd219, %rd218, %rd163;
	or.b64  	%rd220, %rd219, %rd217;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r139,%dummy}, %rd206;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r140}, %rd206;
	}
	shf.r.wrap.b32 	%r141, %r140, %r139, 28;
	shf.r.wrap.b32 	%r142, %r139, %r140, 28;
	mov.b64 	%rd221, {%r142, %r141};
	shf.l.wrap.b32 	%r143, %r139, %r140, 30;
	shf.l.wrap.b32 	%r144, %r140, %r139, 30;
	mov.b64 	%rd222, {%r144, %r143};
	xor.b64  	%rd223, %rd221, %rd222;
	shf.l.wrap.b32 	%r145, %r139, %r140, 25;
	shf.l.wrap.b32 	%r146, %r140, %r139, 25;
	mov.b64 	%rd224, {%r146, %r145};
	xor.b64  	%rd225, %rd223, %rd224;
	add.s64 	%rd226, %rd225, %rd220;
	add.s64 	%rd227, %rd226, %rd216;
	add.s64 	%rd228, %rd216, -6571292209873868907;
	add.s64 	%rd229, %rd227, 4234560286879669901;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r147,%dummy}, %rd228;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r148}, %rd228;
	}
	shf.r.wrap.b32 	%r149, %r148, %r147, 14;
	shf.r.wrap.b32 	%r150, %r147, %r148, 14;
	mov.b64 	%rd230, {%r150, %r149};
	shf.r.wrap.b32 	%r151, %r148, %r147, 18;
	shf.r.wrap.b32 	%r152, %r147, %r148, 18;
	mov.b64 	%rd231, {%r152, %r151};
	xor.b64  	%rd232, %rd230, %rd231;
	shf.l.wrap.b32 	%r153, %r147, %r148, 23;
	shf.l.wrap.b32 	%r154, %r148, %r147, 23;
	mov.b64 	%rd233, {%r154, %r153};
	xor.b64  	%rd234, %rd232, %rd233;
	xor.b64  	%rd235, %rd205, %rd182;
	and.b64  	%rd236, %rd228, %rd235;
	xor.b64  	%rd237, %rd236, %rd182;
	add.s64 	%rd238, %rd237, %rd162;
	add.s64 	%rd239, %rd238, %rd234;
	add.s64 	%rd240, %rd239, %rd1134;
	add.s64 	%rd241, %rd240, 4131703408338449720;
	add.s64 	%rd242, %rd241, %rd163;
	and.b64  	%rd243, %rd229, %rd206;
	or.b64  	%rd244, %rd229, %rd206;
	and.b64  	%rd245, %rd244, %rd183;
	or.b64  	%rd246, %rd245, %rd243;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r155,%dummy}, %rd229;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r156}, %rd229;
	}
	shf.r.wrap.b32 	%r157, %r156, %r155, 28;
	shf.r.wrap.b32 	%r158, %r155, %r156, 28;
	mov.b64 	%rd247, {%r158, %r157};
	shf.l.wrap.b32 	%r159, %r155, %r156, 30;
	shf.l.wrap.b32 	%r160, %r156, %r155, 30;
	mov.b64 	%rd248, {%r160, %r159};
	xor.b64  	%rd249, %rd247, %rd248;
	shf.l.wrap.b32 	%r161, %r155, %r156, 25;
	shf.l.wrap.b32 	%r162, %r156, %r155, 25;
	mov.b64 	%rd250, {%r162, %r161};
	xor.b64  	%rd251, %rd249, %rd250;
	add.s64 	%rd252, %rd251, %rd246;
	add.s64 	%rd253, %rd252, %rd241;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r163,%dummy}, %rd242;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r164}, %rd242;
	}
	shf.r.wrap.b32 	%r165, %r164, %r163, 14;
	shf.r.wrap.b32 	%r166, %r163, %r164, 14;
	mov.b64 	%rd254, {%r166, %r165};
	shf.r.wrap.b32 	%r167, %r164, %r163, 18;
	shf.r.wrap.b32 	%r168, %r163, %r164, 18;
	mov.b64 	%rd255, {%r168, %r167};
	xor.b64  	%rd256, %rd254, %rd255;
	shf.l.wrap.b32 	%r169, %r163, %r164, 23;
	shf.l.wrap.b32 	%r170, %r164, %r163, 23;
	mov.b64 	%rd257, {%r170, %r169};
	xor.b64  	%rd258, %rd256, %rd257;
	xor.b64  	%rd259, %rd228, %rd205;
	and.b64  	%rd260, %rd242, %rd259;
	xor.b64  	%rd261, %rd260, %rd205;
	add.s64 	%rd262, %rd261, %rd182;
	add.s64 	%rd263, %rd262, %rd258;
	add.s64 	%rd264, %rd263, %rd1133;
	add.s64 	%rd265, %rd264, 6480981068601479193;
	add.s64 	%rd266, %rd265, %rd183;
	and.b64  	%rd267, %rd253, %rd229;
	or.b64  	%rd268, %rd253, %rd229;
	and.b64  	%rd269, %rd268, %rd206;
	or.b64  	%rd270, %rd269, %rd267;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r171,%dummy}, %rd253;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r172}, %rd253;
	}
	shf.r.wrap.b32 	%r173, %r172, %r171, 28;
	shf.r.wrap.b32 	%r174, %r171, %r172, 28;
	mov.b64 	%rd271, {%r174, %r173};
	shf.l.wrap.b32 	%r175, %r171, %r172, 30;
	shf.l.wrap.b32 	%r176, %r172, %r171, 30;
	mov.b64 	%rd272, {%r176, %r175};
	xor.b64  	%rd273, %rd271, %rd272;
	shf.l.wrap.b32 	%r177, %r171, %r172, 25;
	shf.l.wrap.b32 	%r178, %r172, %r171, 25;
	mov.b64 	%rd274, {%r178, %r177};
	xor.b64  	%rd275, %rd273, %rd274;
	add.s64 	%rd276, %rd275, %rd270;
	add.s64 	%rd277, %rd276, %rd265;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r179,%dummy}, %rd266;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r180}, %rd266;
	}
	shf.r.wrap.b32 	%r181, %r180, %r179, 14;
	shf.r.wrap.b32 	%r182, %r179, %r180, 14;
	mov.b64 	%rd278, {%r182, %r181};
	shf.r.wrap.b32 	%r183, %r180, %r179, 18;
	shf.r.wrap.b32 	%r184, %r179, %r180, 18;
	mov.b64 	%rd279, {%r184, %r183};
	xor.b64  	%rd280, %rd278, %rd279;
	shf.l.wrap.b32 	%r185, %r179, %r180, 23;
	shf.l.wrap.b32 	%r186, %r180, %r179, 23;
	mov.b64 	%rd281, {%r186, %r185};
	xor.b64  	%rd282, %rd280, %rd281;
	xor.b64  	%rd283, %rd242, %rd228;
	and.b64  	%rd284, %rd266, %rd283;
	xor.b64  	%rd285, %rd284, %rd228;
	add.s64 	%rd286, %rd285, %rd205;
	add.s64 	%rd287, %rd286, %rd282;
	add.s64 	%rd288, %rd287, %rd1132;
	add.s64 	%rd289, %rd288, -7908458776815382629;
	add.s64 	%rd290, %rd289, %rd206;
	and.b64  	%rd291, %rd277, %rd253;
	or.b64  	%rd292, %rd277, %rd253;
	and.b64  	%rd293, %rd292, %rd229;
	or.b64  	%rd294, %rd293, %rd291;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r187,%dummy}, %rd277;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r188}, %rd277;
	}
	shf.r.wrap.b32 	%r189, %r188, %r187, 28;
	shf.r.wrap.b32 	%r190, %r187, %r188, 28;
	mov.b64 	%rd295, {%r190, %r189};
	shf.l.wrap.b32 	%r191, %r187, %r188, 30;
	shf.l.wrap.b32 	%r192, %r188, %r187, 30;
	mov.b64 	%rd296, {%r192, %r191};
	xor.b64  	%rd297, %rd295, %rd296;
	shf.l.wrap.b32 	%r193, %r187, %r188, 25;
	shf.l.wrap.b32 	%r194, %r188, %r187, 25;
	mov.b64 	%rd298, {%r194, %r193};
	xor.b64  	%rd299, %rd297, %rd298;
	add.s64 	%rd300, %rd299, %rd294;
	add.s64 	%rd301, %rd300, %rd289;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r195,%dummy}, %rd290;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r196}, %rd290;
	}
	shf.r.wrap.b32 	%r197, %r196, %r195, 14;
	shf.r.wrap.b32 	%r198, %r195, %r196, 14;
	mov.b64 	%rd302, {%r198, %r197};
	shf.r.wrap.b32 	%r199, %r196, %r195, 18;
	shf.r.wrap.b32 	%r200, %r195, %r196, 18;
	mov.b64 	%rd303, {%r200, %r199};
	xor.b64  	%rd304, %rd302, %rd303;
	shf.l.wrap.b32 	%r201, %r195, %r196, 23;
	shf.l.wrap.b32 	%r202, %r196, %r195, 23;
	mov.b64 	%rd305, {%r202, %r201};
	xor.b64  	%rd306, %rd304, %rd305;
	xor.b64  	%rd307, %rd266, %rd242;
	and.b64  	%rd308, %rd290, %rd307;
	xor.b64  	%rd309, %rd308, %rd242;
	add.s64 	%rd310, %rd309, %rd228;
	add.s64 	%rd311, %rd310, %rd306;
	add.s64 	%rd312, %rd311, %rd1131;
	add.s64 	%rd313, %rd312, -6116909921290321640;
	add.s64 	%rd314, %rd313, %rd229;
	and.b64  	%rd315, %rd301, %rd277;
	or.b64  	%rd316, %rd301, %rd277;
	and.b64  	%rd317, %rd316, %rd253;
	or.b64  	%rd318, %rd317, %rd315;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r203,%dummy}, %rd301;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r204}, %rd301;
	}
	shf.r.wrap.b32 	%r205, %r204, %r203, 28;
	shf.r.wrap.b32 	%r206, %r203, %r204, 28;
	mov.b64 	%rd319, {%r206, %r205};
	shf.l.wrap.b32 	%r207, %r203, %r204, 30;
	shf.l.wrap.b32 	%r208, %r204, %r203, 30;
	mov.b64 	%rd320, {%r208, %r207};
	xor.b64  	%rd321, %rd319, %rd320;
	shf.l.wrap.b32 	%r209, %r203, %r204, 25;
	shf.l.wrap.b32 	%r210, %r204, %r203, 25;
	mov.b64 	%rd322, {%r210, %r209};
	xor.b64  	%rd323, %rd321, %rd322;
	add.s64 	%rd324, %rd323, %rd318;
	add.s64 	%rd325, %rd324, %rd313;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r211,%dummy}, %rd314;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r212}, %rd314;
	}
	shf.r.wrap.b32 	%r213, %r212, %r211, 14;
	shf.r.wrap.b32 	%r214, %r211, %r212, 14;
	mov.b64 	%rd326, {%r214, %r213};
	shf.r.wrap.b32 	%r215, %r212, %r211, 18;
	shf.r.wrap.b32 	%r216, %r211, %r212, 18;
	mov.b64 	%rd327, {%r216, %r215};
	xor.b64  	%rd328, %rd326, %rd327;
	shf.l.wrap.b32 	%r217, %r211, %r212, 23;
	shf.l.wrap.b32 	%r218, %r212, %r211, 23;
	mov.b64 	%rd329, {%r218, %r217};
	xor.b64  	%rd330, %rd328, %rd329;
	xor.b64  	%rd331, %rd290, %rd266;
	and.b64  	%rd332, %rd314, %rd331;
	xor.b64  	%rd333, %rd332, %rd266;
	add.s64 	%rd334, %rd333, %rd242;
	add.s64 	%rd335, %rd334, %rd330;
	add.s64 	%rd336, %rd335, %rd1130;
	add.s64 	%rd337, %rd336, -2880145864133508542;
	add.s64 	%rd338, %rd337, %rd253;
	and.b64  	%rd339, %rd325, %rd301;
	or.b64  	%rd340, %rd325, %rd301;
	and.b64  	%rd341, %rd340, %rd277;
	or.b64  	%rd342, %rd341, %rd339;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r219,%dummy}, %rd325;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r220}, %rd325;
	}
	shf.r.wrap.b32 	%r221, %r220, %r219, 28;
	shf.r.wrap.b32 	%r222, %r219, %r220, 28;
	mov.b64 	%rd343, {%r222, %r221};
	shf.l.wrap.b32 	%r223, %r219, %r220, 30;
	shf.l.wrap.b32 	%r224, %r220, %r219, 30;
	mov.b64 	%rd344, {%r224, %r223};
	xor.b64  	%rd345, %rd343, %rd344;
	shf.l.wrap.b32 	%r225, %r219, %r220, 25;
	shf.l.wrap.b32 	%r226, %r220, %r219, 25;
	mov.b64 	%rd346, {%r226, %r225};
	xor.b64  	%rd347, %rd345, %rd346;
	add.s64 	%rd348, %rd347, %rd342;
	add.s64 	%rd349, %rd348, %rd337;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r227,%dummy}, %rd338;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r228}, %rd338;
	}
	shf.r.wrap.b32 	%r229, %r228, %r227, 14;
	shf.r.wrap.b32 	%r230, %r227, %r228, 14;
	mov.b64 	%rd350, {%r230, %r229};
	shf.r.wrap.b32 	%r231, %r228, %r227, 18;
	shf.r.wrap.b32 	%r232, %r227, %r228, 18;
	mov.b64 	%rd351, {%r232, %r231};
	xor.b64  	%rd352, %rd350, %rd351;
	shf.l.wrap.b32 	%r233, %r227, %r228, 23;
	shf.l.wrap.b32 	%r234, %r228, %r227, 23;
	mov.b64 	%rd353, {%r234, %r233};
	xor.b64  	%rd354, %rd352, %rd353;
	xor.b64  	%rd355, %rd314, %rd290;
	and.b64  	%rd356, %rd338, %rd355;
	xor.b64  	%rd357, %rd356, %rd290;
	add.s64 	%rd358, %rd357, %rd266;
	add.s64 	%rd359, %rd358, %rd354;
	add.s64 	%rd360, %rd359, %rd1129;
	add.s64 	%rd361, %rd360, 1334009975649890238;
	add.s64 	%rd362, %rd361, %rd277;
	and.b64  	%rd363, %rd349, %rd325;
	or.b64  	%rd364, %rd349, %rd325;
	and.b64  	%rd365, %rd364, %rd301;
	or.b64  	%rd366, %rd365, %rd363;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r235,%dummy}, %rd349;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r236}, %rd349;
	}
	shf.r.wrap.b32 	%r237, %r236, %r235, 28;
	shf.r.wrap.b32 	%r238, %r235, %r236, 28;
	mov.b64 	%rd367, {%r238, %r237};
	shf.l.wrap.b32 	%r239, %r235, %r236, 30;
	shf.l.wrap.b32 	%r240, %r236, %r235, 30;
	mov.b64 	%rd368, {%r240, %r239};
	xor.b64  	%rd369, %rd367, %rd368;
	shf.l.wrap.b32 	%r241, %r235, %r236, 25;
	shf.l.wrap.b32 	%r242, %r236, %r235, 25;
	mov.b64 	%rd370, {%r242, %r241};
	xor.b64  	%rd371, %rd369, %rd370;
	add.s64 	%rd372, %rd371, %rd366;
	add.s64 	%rd373, %rd372, %rd361;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r243,%dummy}, %rd362;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r244}, %rd362;
	}
	shf.r.wrap.b32 	%r245, %r244, %r243, 14;
	shf.r.wrap.b32 	%r246, %r243, %r244, 14;
	mov.b64 	%rd374, {%r246, %r245};
	shf.r.wrap.b32 	%r247, %r244, %r243, 18;
	shf.r.wrap.b32 	%r248, %r243, %r244, 18;
	mov.b64 	%rd375, {%r248, %r247};
	xor.b64  	%rd376, %rd374, %rd375;
	shf.l.wrap.b32 	%r249, %r243, %r244, 23;
	shf.l.wrap.b32 	%r250, %r244, %r243, 23;
	mov.b64 	%rd377, {%r250, %r249};
	xor.b64  	%rd378, %rd376, %rd377;
	xor.b64  	%rd379, %rd338, %rd314;
	and.b64  	%rd380, %rd362, %rd379;
	xor.b64  	%rd381, %rd380, %rd314;
	add.s64 	%rd382, %rd381, %rd290;
	add.s64 	%rd383, %rd382, %rd378;
	add.s64 	%rd384, %rd383, %rd1128;
	add.s64 	%rd385, %rd384, 2608012711638119052;
	add.s64 	%rd386, %rd385, %rd301;
	and.b64  	%rd387, %rd373, %rd349;
	or.b64  	%rd388, %rd373, %rd349;
	and.b64  	%rd389, %rd388, %rd325;
	or.b64  	%rd390, %rd389, %rd387;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r251,%dummy}, %rd373;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r252}, %rd373;
	}
	shf.r.wrap.b32 	%r253, %r252, %r251, 28;
	shf.r.wrap.b32 	%r254, %r251, %r252, 28;
	mov.b64 	%rd391, {%r254, %r253};
	shf.l.wrap.b32 	%r255, %r251, %r252, 30;
	shf.l.wrap.b32 	%r256, %r252, %r251, 30;
	mov.b64 	%rd392, {%r256, %r255};
	xor.b64  	%rd393, %rd391, %rd392;
	shf.l.wrap.b32 	%r257, %r251, %r252, 25;
	shf.l.wrap.b32 	%r258, %r252, %r251, 25;
	mov.b64 	%rd394, {%r258, %r257};
	xor.b64  	%rd395, %rd393, %rd394;
	add.s64 	%rd396, %rd395, %rd390;
	add.s64 	%rd397, %rd396, %rd385;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r259,%dummy}, %rd386;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r260}, %rd386;
	}
	shf.r.wrap.b32 	%r261, %r260, %r259, 14;
	shf.r.wrap.b32 	%r262, %r259, %r260, 14;
	mov.b64 	%rd398, {%r262, %r261};
	shf.r.wrap.b32 	%r263, %r260, %r259, 18;
	shf.r.wrap.b32 	%r264, %r259, %r260, 18;
	mov.b64 	%rd399, {%r264, %r263};
	xor.b64  	%rd400, %rd398, %rd399;
	shf.l.wrap.b32 	%r265, %r259, %r260, 23;
	shf.l.wrap.b32 	%r266, %r260, %r259, 23;
	mov.b64 	%rd401, {%r266, %r265};
	xor.b64  	%rd402, %rd400, %rd401;
	xor.b64  	%rd403, %rd362, %rd338;
	and.b64  	%rd404, %rd386, %rd403;
	xor.b64  	%rd405, %rd404, %rd338;
	add.s64 	%rd406, %rd405, %rd314;
	add.s64 	%rd407, %rd406, %rd402;
	add.s64 	%rd408, %rd407, %rd1127;
	add.s64 	%rd409, %rd408, 6128411473006802146;
	add.s64 	%rd410, %rd409, %rd325;
	and.b64  	%rd411, %rd397, %rd373;
	or.b64  	%rd412, %rd397, %rd373;
	and.b64  	%rd413, %rd412, %rd349;
	or.b64  	%rd414, %rd413, %rd411;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r267,%dummy}, %rd397;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r268}, %rd397;
	}
	shf.r.wrap.b32 	%r269, %r268, %r267, 28;
	shf.r.wrap.b32 	%r270, %r267, %r268, 28;
	mov.b64 	%rd415, {%r270, %r269};
	shf.l.wrap.b32 	%r271, %r267, %r268, 30;
	shf.l.wrap.b32 	%r272, %r268, %r267, 30;
	mov.b64 	%rd416, {%r272, %r271};
	xor.b64  	%rd417, %rd415, %rd416;
	shf.l.wrap.b32 	%r273, %r267, %r268, 25;
	shf.l.wrap.b32 	%r274, %r268, %r267, 25;
	mov.b64 	%rd418, {%r274, %r273};
	xor.b64  	%rd419, %rd417, %rd418;
	add.s64 	%rd420, %rd419, %rd414;
	add.s64 	%rd421, %rd420, %rd409;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r275,%dummy}, %rd410;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r276}, %rd410;
	}
	shf.r.wrap.b32 	%r277, %r276, %r275, 14;
	shf.r.wrap.b32 	%r278, %r275, %r276, 14;
	mov.b64 	%rd422, {%r278, %r277};
	shf.r.wrap.b32 	%r279, %r276, %r275, 18;
	shf.r.wrap.b32 	%r280, %r275, %r276, 18;
	mov.b64 	%rd423, {%r280, %r279};
	xor.b64  	%rd424, %rd422, %rd423;
	shf.l.wrap.b32 	%r281, %r275, %r276, 23;
	shf.l.wrap.b32 	%r282, %r276, %r275, 23;
	mov.b64 	%rd425, {%r282, %r281};
	xor.b64  	%rd426, %rd424, %rd425;
	xor.b64  	%rd427, %rd386, %rd362;
	and.b64  	%rd428, %rd410, %rd427;
	xor.b64  	%rd429, %rd428, %rd362;
	add.s64 	%rd430, %rd429, %rd338;
	add.s64 	%rd431, %rd430, %rd426;
	add.s64 	%rd432, %rd431, %rd1126;
	add.s64 	%rd433, %rd432, 8268148722764581231;
	add.s64 	%rd1146, %rd433, %rd349;
	and.b64  	%rd434, %rd421, %rd397;
	or.b64  	%rd435, %rd421, %rd397;
	and.b64  	%rd436, %rd435, %rd373;
	or.b64  	%rd437, %rd436, %rd434;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r283,%dummy}, %rd421;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r284}, %rd421;
	}
	shf.r.wrap.b32 	%r285, %r284, %r283, 28;
	shf.r.wrap.b32 	%r286, %r283, %r284, 28;
	mov.b64 	%rd438, {%r286, %r285};
	shf.l.wrap.b32 	%r287, %r283, %r284, 30;
	shf.l.wrap.b32 	%r288, %r284, %r283, 30;
	mov.b64 	%rd439, {%r288, %r287};
	xor.b64  	%rd440, %rd438, %rd439;
	shf.l.wrap.b32 	%r289, %r283, %r284, 25;
	shf.l.wrap.b32 	%r290, %r284, %r283, 25;
	mov.b64 	%rd441, {%r290, %r289};
	xor.b64  	%rd442, %rd440, %rd441;
	add.s64 	%rd443, %rd442, %rd437;
	add.s64 	%rd1142, %rd443, %rd433;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r291,%dummy}, %rd1146;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r292}, %rd1146;
	}
	shf.r.wrap.b32 	%r293, %r292, %r291, 14;
	shf.r.wrap.b32 	%r294, %r291, %r292, 14;
	mov.b64 	%rd444, {%r294, %r293};
	shf.r.wrap.b32 	%r295, %r292, %r291, 18;
	shf.r.wrap.b32 	%r296, %r291, %r292, 18;
	mov.b64 	%rd445, {%r296, %r295};
	xor.b64  	%rd446, %rd444, %rd445;
	shf.l.wrap.b32 	%r297, %r291, %r292, 23;
	shf.l.wrap.b32 	%r298, %r292, %r291, 23;
	mov.b64 	%rd447, {%r298, %r297};
	xor.b64  	%rd448, %rd446, %rd447;
	xor.b64  	%rd449, %rd410, %rd386;
	and.b64  	%rd450, %rd1146, %rd449;
	xor.b64  	%rd451, %rd450, %rd386;
	add.s64 	%rd452, %rd451, %rd362;
	add.s64 	%rd453, %rd452, %rd448;
	add.s64 	%rd454, %rd453, %rd1125;
	add.s64 	%rd455, %rd454, -9160688886553864527;
	add.s64 	%rd1145, %rd455, %rd373;
	and.b64  	%rd456, %rd1142, %rd421;
	or.b64  	%rd457, %rd1142, %rd421;
	and.b64  	%rd458, %rd457, %rd397;
	or.b64  	%rd459, %rd458, %rd456;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r299,%dummy}, %rd1142;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r300}, %rd1142;
	}
	shf.r.wrap.b32 	%r301, %r300, %r299, 28;
	shf.r.wrap.b32 	%r302, %r299, %r300, 28;
	mov.b64 	%rd460, {%r302, %r301};
	shf.l.wrap.b32 	%r303, %r299, %r300, 30;
	shf.l.wrap.b32 	%r304, %r300, %r299, 30;
	mov.b64 	%rd461, {%r304, %r303};
	xor.b64  	%rd462, %rd460, %rd461;
	shf.l.wrap.b32 	%r305, %r299, %r300, 25;
	shf.l.wrap.b32 	%r306, %r300, %r299, 25;
	mov.b64 	%rd463, {%r306, %r305};
	xor.b64  	%rd464, %rd462, %rd463;
	add.s64 	%rd465, %rd464, %rd459;
	add.s64 	%rd1141, %rd465, %rd455;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r307,%dummy}, %rd1145;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r308}, %rd1145;
	}
	shf.r.wrap.b32 	%r309, %r308, %r307, 14;
	shf.r.wrap.b32 	%r310, %r307, %r308, 14;
	mov.b64 	%rd466, {%r310, %r309};
	shf.r.wrap.b32 	%r311, %r308, %r307, 18;
	shf.r.wrap.b32 	%r312, %r307, %r308, 18;
	mov.b64 	%rd467, {%r312, %r311};
	xor.b64  	%rd468, %rd466, %rd467;
	shf.l.wrap.b32 	%r313, %r307, %r308, 23;
	shf.l.wrap.b32 	%r314, %r308, %r307, 23;
	mov.b64 	%rd469, {%r314, %r313};
	xor.b64  	%rd470, %rd468, %rd469;
	xor.b64  	%rd471, %rd1146, %rd410;
	and.b64  	%rd472, %rd1145, %rd471;
	xor.b64  	%rd473, %rd472, %rd410;
	add.s64 	%rd474, %rd473, %rd386;
	add.s64 	%rd475, %rd474, %rd470;
	add.s64 	%rd476, %rd475, %rd1124;
	add.s64 	%rd477, %rd476, -7215885187991268811;
	add.s64 	%rd1144, %rd477, %rd397;
	and.b64  	%rd478, %rd1141, %rd1142;
	or.b64  	%rd479, %rd1141, %rd1142;
	and.b64  	%rd480, %rd479, %rd421;
	or.b64  	%rd481, %rd480, %rd478;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r315,%dummy}, %rd1141;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r316}, %rd1141;
	}
	shf.r.wrap.b32 	%r317, %r316, %r315, 28;
	shf.r.wrap.b32 	%r318, %r315, %r316, 28;
	mov.b64 	%rd482, {%r318, %r317};
	shf.l.wrap.b32 	%r319, %r315, %r316, 30;
	shf.l.wrap.b32 	%r320, %r316, %r315, 30;
	mov.b64 	%rd483, {%r320, %r319};
	xor.b64  	%rd484, %rd482, %rd483;
	shf.l.wrap.b32 	%r321, %r315, %r316, 25;
	shf.l.wrap.b32 	%r322, %r316, %r315, 25;
	mov.b64 	%rd485, {%r322, %r321};
	xor.b64  	%rd486, %rd484, %rd485;
	add.s64 	%rd487, %rd486, %rd481;
	add.s64 	%rd1140, %rd487, %rd477;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r323,%dummy}, %rd1144;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r324}, %rd1144;
	}
	shf.r.wrap.b32 	%r325, %r324, %r323, 14;
	shf.r.wrap.b32 	%r326, %r323, %r324, 14;
	mov.b64 	%rd488, {%r326, %r325};
	shf.r.wrap.b32 	%r327, %r324, %r323, 18;
	shf.r.wrap.b32 	%r328, %r323, %r324, 18;
	mov.b64 	%rd489, {%r328, %r327};
	xor.b64  	%rd490, %rd488, %rd489;
	shf.l.wrap.b32 	%r329, %r323, %r324, 23;
	shf.l.wrap.b32 	%r330, %r324, %r323, 23;
	mov.b64 	%rd491, {%r330, %r329};
	xor.b64  	%rd492, %rd490, %rd491;
	xor.b64  	%rd493, %rd1145, %rd1146;
	and.b64  	%rd494, %rd1144, %rd493;
	xor.b64  	%rd495, %rd494, %rd1146;
	add.s64 	%rd496, %rd495, %rd410;
	add.s64 	%rd497, %rd496, %rd492;
	add.s64 	%rd498, %rd497, %rd1123;
	add.s64 	%rd499, %rd498, -4495734319001033068;
	add.s64 	%rd1143, %rd499, %rd421;
	and.b64  	%rd500, %rd1140, %rd1141;
	or.b64  	%rd501, %rd1140, %rd1141;
	and.b64  	%rd502, %rd501, %rd1142;
	or.b64  	%rd503, %rd502, %rd500;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r331,%dummy}, %rd1140;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r332}, %rd1140;
	}
	shf.r.wrap.b32 	%r333, %r332, %r331, 28;
	shf.r.wrap.b32 	%r334, %r331, %r332, 28;
	mov.b64 	%rd504, {%r334, %r333};
	shf.l.wrap.b32 	%r335, %r331, %r332, 30;
	shf.l.wrap.b32 	%r336, %r332, %r331, 30;
	mov.b64 	%rd505, {%r336, %r335};
	xor.b64  	%rd506, %rd504, %rd505;
	shf.l.wrap.b32 	%r337, %r331, %r332, 25;
	shf.l.wrap.b32 	%r338, %r332, %r331, 25;
	mov.b64 	%rd507, {%r338, %r337};
	xor.b64  	%rd508, %rd506, %rd507;
	add.s64 	%rd509, %rd508, %rd503;
	add.s64 	%rd1139, %rd509, %rd499;
	mov.u64 	%rd1122, k;

$L__BB2_5:
	.pragma "nounroll";
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r339}, %rd1124;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r340,%dummy}, %rd1124;
	}
	shf.l.wrap.b32 	%r341, %r340, %r339, 3;
	shf.l.wrap.b32 	%r342, %r339, %r340, 3;
	mov.b64 	%rd510, {%r342, %r341};
	shf.r.wrap.b32 	%r343, %r339, %r340, 19;
	shf.r.wrap.b32 	%r344, %r340, %r339, 19;
	mov.b64 	%rd511, {%r344, %r343};
	xor.b64  	%rd512, %rd511, %rd510;
	shr.u64 	%rd513, %rd1124, 6;
	xor.b64  	%rd514, %rd512, %rd513;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r345,%dummy}, %rd1137;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r346}, %rd1137;
	}
	shf.r.wrap.b32 	%r347, %r346, %r345, 8;
	shf.r.wrap.b32 	%r348, %r345, %r346, 8;
	mov.b64 	%rd515, {%r348, %r347};
	shf.r.wrap.b32 	%r349, %r346, %r345, 1;
	shf.r.wrap.b32 	%r350, %r345, %r346, 1;
	mov.b64 	%rd516, {%r350, %r349};
	xor.b64  	%rd517, %rd516, %rd515;
	shr.u64 	%rd518, %rd1137, 7;
	xor.b64  	%rd519, %rd517, %rd518;
	add.s64 	%rd520, %rd514, %rd1138;
	add.s64 	%rd521, %rd520, %rd1129;
	add.s64 	%rd1138, %rd521, %rd519;
	add.s64 	%rd96, %rd1122, 128;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r351,%dummy}, %rd1143;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r352}, %rd1143;
	}
	shf.r.wrap.b32 	%r353, %r352, %r351, 18;
	shf.r.wrap.b32 	%r354, %r351, %r352, 18;
	mov.b64 	%rd522, {%r354, %r353};
	shf.r.wrap.b32 	%r355, %r352, %r351, 14;
	shf.r.wrap.b32 	%r356, %r351, %r352, 14;
	mov.b64 	%rd523, {%r356, %r355};
	xor.b64  	%rd524, %rd523, %rd522;
	shf.l.wrap.b32 	%r357, %r351, %r352, 23;
	shf.l.wrap.b32 	%r358, %r352, %r351, 23;
	mov.b64 	%rd525, {%r358, %r357};
	xor.b64  	%rd526, %rd524, %rd525;
	xor.b64  	%rd527, %rd1144, %rd1145;
	and.b64  	%rd528, %rd1143, %rd527;
	xor.b64  	%rd529, %rd528, %rd1145;
	add.s64 	%rd530, %rd529, %rd1146;
	add.s64 	%rd531, %rd530, %rd526;
	ld.const.u64 	%rd532, [%rd1122+128];
	add.s64 	%rd533, %rd531, %rd532;
	add.s64 	%rd534, %rd533, %rd1138;
	add.s64 	%rd535, %rd534, %rd1142;
	or.b64  	%rd536, %rd1139, %rd1140;
	and.b64  	%rd537, %rd536, %rd1141;
	and.b64  	%rd538, %rd1139, %rd1140;
	or.b64  	%rd539, %rd537, %rd538;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r359}, %rd1139;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r360,%dummy}, %rd1139;
	}
	shf.l.wrap.b32 	%r361, %r360, %r359, 30;
	shf.l.wrap.b32 	%r362, %r359, %r360, 30;
	mov.b64 	%rd540, {%r362, %r361};
	shf.r.wrap.b32 	%r363, %r359, %r360, 28;
	shf.r.wrap.b32 	%r364, %r360, %r359, 28;
	mov.b64 	%rd541, {%r364, %r363};
	xor.b64  	%rd542, %rd541, %rd540;
	shf.l.wrap.b32 	%r365, %r360, %r359, 25;
	shf.l.wrap.b32 	%r366, %r359, %r360, 25;
	mov.b64 	%rd543, {%r366, %r365};
	xor.b64  	%rd544, %rd542, %rd543;
	add.s64 	%rd545, %rd544, %rd539;
	add.s64 	%rd546, %rd545, %rd534;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r367}, %rd1123;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r368,%dummy}, %rd1123;
	}
	shf.l.wrap.b32 	%r369, %r368, %r367, 3;
	shf.l.wrap.b32 	%r370, %r367, %r368, 3;
	mov.b64 	%rd547, {%r370, %r369};
	shf.r.wrap.b32 	%r371, %r367, %r368, 19;
	shf.r.wrap.b32 	%r372, %r368, %r367, 19;
	mov.b64 	%rd548, {%r372, %r371};
	xor.b64  	%rd549, %rd548, %rd547;
	shr.u64 	%rd550, %rd1123, 6;
	xor.b64  	%rd551, %rd549, %rd550;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r373,%dummy}, %rd1136;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r374}, %rd1136;
	}
	shf.r.wrap.b32 	%r375, %r374, %r373, 8;
	shf.r.wrap.b32 	%r376, %r373, %r374, 8;
	mov.b64 	%rd552, {%r376, %r375};
	shf.r.wrap.b32 	%r377, %r374, %r373, 1;
	shf.r.wrap.b32 	%r378, %r373, %r374, 1;
	mov.b64 	%rd553, {%r378, %r377};
	xor.b64  	%rd554, %rd553, %rd552;
	shr.u64 	%rd555, %rd1136, 7;
	xor.b64  	%rd556, %rd554, %rd555;
	add.s64 	%rd557, %rd551, %rd1137;
	add.s64 	%rd558, %rd557, %rd1128;
	add.s64 	%rd1137, %rd558, %rd556;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r379,%dummy}, %rd535;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r380}, %rd535;
	}
	shf.r.wrap.b32 	%r381, %r380, %r379, 14;
	shf.r.wrap.b32 	%r382, %r379, %r380, 14;
	mov.b64 	%rd559, {%r382, %r381};
	shf.r.wrap.b32 	%r383, %r380, %r379, 18;
	shf.r.wrap.b32 	%r384, %r379, %r380, 18;
	mov.b64 	%rd560, {%r384, %r383};
	xor.b64  	%rd561, %rd559, %rd560;
	shf.l.wrap.b32 	%r385, %r379, %r380, 23;
	shf.l.wrap.b32 	%r386, %r380, %r379, 23;
	mov.b64 	%rd562, {%r386, %r385};
	xor.b64  	%rd563, %rd561, %rd562;
	xor.b64  	%rd564, %rd1143, %rd1144;
	and.b64  	%rd565, %rd535, %rd564;
	xor.b64  	%rd566, %rd565, %rd1144;
	add.s64 	%rd567, %rd566, %rd1145;
	add.s64 	%rd568, %rd567, %rd563;
	ld.const.u64 	%rd569, [%rd1122+136];
	add.s64 	%rd570, %rd568, %rd569;
	add.s64 	%rd571, %rd570, %rd1137;
	add.s64 	%rd572, %rd571, %rd1141;
	and.b64  	%rd573, %rd546, %rd1139;
	or.b64  	%rd574, %rd546, %rd1139;
	and.b64  	%rd575, %rd574, %rd1140;
	or.b64  	%rd576, %rd575, %rd573;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r387,%dummy}, %rd546;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r388}, %rd546;
	}
	shf.r.wrap.b32 	%r389, %r388, %r387, 28;
	shf.r.wrap.b32 	%r390, %r387, %r388, 28;
	mov.b64 	%rd577, {%r390, %r389};
	shf.l.wrap.b32 	%r391, %r387, %r388, 30;
	shf.l.wrap.b32 	%r392, %r388, %r387, 30;
	mov.b64 	%rd578, {%r392, %r391};
	xor.b64  	%rd579, %rd577, %rd578;
	shf.l.wrap.b32 	%r393, %r387, %r388, 25;
	shf.l.wrap.b32 	%r394, %r388, %r387, 25;
	mov.b64 	%rd580, {%r394, %r393};
	xor.b64  	%rd581, %rd579, %rd580;
	add.s64 	%rd582, %rd581, %rd576;
	add.s64 	%rd583, %rd582, %rd571;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r395,%dummy}, %rd1138;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r396}, %rd1138;
	}
	shf.r.wrap.b32 	%r397, %r396, %r395, 19;
	shf.r.wrap.b32 	%r398, %r395, %r396, 19;
	mov.b64 	%rd584, {%r398, %r397};
	shf.l.wrap.b32 	%r399, %r395, %r396, 3;
	shf.l.wrap.b32 	%r400, %r396, %r395, 3;
	mov.b64 	%rd585, {%r400, %r399};
	xor.b64  	%rd586, %rd584, %rd585;
	shr.u64 	%rd587, %rd1138, 6;
	xor.b64  	%rd588, %rd586, %rd587;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r401,%dummy}, %rd1135;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r402}, %rd1135;
	}
	shf.r.wrap.b32 	%r403, %r402, %r401, 8;
	shf.r.wrap.b32 	%r404, %r401, %r402, 8;
	mov.b64 	%rd589, {%r404, %r403};
	shf.r.wrap.b32 	%r405, %r402, %r401, 1;
	shf.r.wrap.b32 	%r406, %r401, %r402, 1;
	mov.b64 	%rd590, {%r406, %r405};
	xor.b64  	%rd591, %rd590, %rd589;
	shr.u64 	%rd592, %rd1135, 7;
	xor.b64  	%rd593, %rd591, %rd592;
	add.s64 	%rd594, %rd588, %rd1136;
	add.s64 	%rd595, %rd594, %rd1127;
	add.s64 	%rd1136, %rd595, %rd593;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r407,%dummy}, %rd572;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r408}, %rd572;
	}
	shf.r.wrap.b32 	%r409, %r408, %r407, 14;
	shf.r.wrap.b32 	%r410, %r407, %r408, 14;
	mov.b64 	%rd596, {%r410, %r409};
	shf.r.wrap.b32 	%r411, %r408, %r407, 18;
	shf.r.wrap.b32 	%r412, %r407, %r408, 18;
	mov.b64 	%rd597, {%r412, %r411};
	xor.b64  	%rd598, %rd596, %rd597;
	shf.l.wrap.b32 	%r413, %r407, %r408, 23;
	shf.l.wrap.b32 	%r414, %r408, %r407, 23;
	mov.b64 	%rd599, {%r414, %r413};
	xor.b64  	%rd600, %rd598, %rd599;
	xor.b64  	%rd601, %rd535, %rd1143;
	and.b64  	%rd602, %rd572, %rd601;
	xor.b64  	%rd603, %rd602, %rd1143;
	add.s64 	%rd604, %rd603, %rd1144;
	add.s64 	%rd605, %rd604, %rd600;
	ld.const.u64 	%rd606, [%rd1122+144];
	add.s64 	%rd607, %rd605, %rd606;
	add.s64 	%rd608, %rd607, %rd1136;
	add.s64 	%rd609, %rd608, %rd1140;
	and.b64  	%rd610, %rd583, %rd546;
	or.b64  	%rd611, %rd583, %rd546;
	and.b64  	%rd612, %rd611, %rd1139;
	or.b64  	%rd613, %rd612, %rd610;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r415,%dummy}, %rd583;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r416}, %rd583;
	}
	shf.r.wrap.b32 	%r417, %r416, %r415, 28;
	shf.r.wrap.b32 	%r418, %r415, %r416, 28;
	mov.b64 	%rd614, {%r418, %r417};
	shf.l.wrap.b32 	%r419, %r415, %r416, 30;
	shf.l.wrap.b32 	%r420, %r416, %r415, 30;
	mov.b64 	%rd615, {%r420, %r419};
	xor.b64  	%rd616, %rd614, %rd615;
	shf.l.wrap.b32 	%r421, %r415, %r416, 25;
	shf.l.wrap.b32 	%r422, %r416, %r415, 25;
	mov.b64 	%rd617, {%r422, %r421};
	xor.b64  	%rd618, %rd616, %rd617;
	add.s64 	%rd619, %rd618, %rd613;
	add.s64 	%rd620, %rd619, %rd608;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r423,%dummy}, %rd1137;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r424}, %rd1137;
	}
	shf.r.wrap.b32 	%r425, %r424, %r423, 19;
	shf.r.wrap.b32 	%r426, %r423, %r424, 19;
	mov.b64 	%rd621, {%r426, %r425};
	shf.l.wrap.b32 	%r427, %r423, %r424, 3;
	shf.l.wrap.b32 	%r428, %r424, %r423, 3;
	mov.b64 	%rd622, {%r428, %r427};
	xor.b64  	%rd623, %rd621, %rd622;
	shr.u64 	%rd624, %rd1137, 6;
	xor.b64  	%rd625, %rd623, %rd624;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r429,%dummy}, %rd1134;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r430}, %rd1134;
	}
	shf.r.wrap.b32 	%r431, %r430, %r429, 8;
	shf.r.wrap.b32 	%r432, %r429, %r430, 8;
	mov.b64 	%rd626, {%r432, %r431};
	shf.r.wrap.b32 	%r433, %r430, %r429, 1;
	shf.r.wrap.b32 	%r434, %r429, %r430, 1;
	mov.b64 	%rd627, {%r434, %r433};
	xor.b64  	%rd628, %rd627, %rd626;
	shr.u64 	%rd629, %rd1134, 7;
	xor.b64  	%rd630, %rd628, %rd629;
	add.s64 	%rd631, %rd625, %rd1135;
	add.s64 	%rd632, %rd631, %rd1126;
	add.s64 	%rd1135, %rd632, %rd630;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r435,%dummy}, %rd609;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r436}, %rd609;
	}
	shf.r.wrap.b32 	%r437, %r436, %r435, 14;
	shf.r.wrap.b32 	%r438, %r435, %r436, 14;
	mov.b64 	%rd633, {%r438, %r437};
	shf.r.wrap.b32 	%r439, %r436, %r435, 18;
	shf.r.wrap.b32 	%r440, %r435, %r436, 18;
	mov.b64 	%rd634, {%r440, %r439};
	xor.b64  	%rd635, %rd633, %rd634;
	shf.l.wrap.b32 	%r441, %r435, %r436, 23;
	shf.l.wrap.b32 	%r442, %r436, %r435, 23;
	mov.b64 	%rd636, {%r442, %r441};
	xor.b64  	%rd637, %rd635, %rd636;
	xor.b64  	%rd638, %rd572, %rd535;
	and.b64  	%rd639, %rd609, %rd638;
	xor.b64  	%rd640, %rd639, %rd535;
	add.s64 	%rd641, %rd640, %rd1143;
	add.s64 	%rd642, %rd641, %rd637;
	ld.const.u64 	%rd643, [%rd1122+152];
	add.s64 	%rd644, %rd642, %rd643;
	add.s64 	%rd645, %rd644, %rd1135;
	add.s64 	%rd646, %rd645, %rd1139;
	and.b64  	%rd647, %rd620, %rd583;
	or.b64  	%rd648, %rd620, %rd583;
	and.b64  	%rd649, %rd648, %rd546;
	or.b64  	%rd650, %rd649, %rd647;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r443,%dummy}, %rd620;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r444}, %rd620;
	}
	shf.r.wrap.b32 	%r445, %r444, %r443, 28;
	shf.r.wrap.b32 	%r446, %r443, %r444, 28;
	mov.b64 	%rd651, {%r446, %r445};
	shf.l.wrap.b32 	%r447, %r443, %r444, 30;
	shf.l.wrap.b32 	%r448, %r444, %r443, 30;
	mov.b64 	%rd652, {%r448, %r447};
	xor.b64  	%rd653, %rd651, %rd652;
	shf.l.wrap.b32 	%r449, %r443, %r444, 25;
	shf.l.wrap.b32 	%r450, %r444, %r443, 25;
	mov.b64 	%rd654, {%r450, %r449};
	xor.b64  	%rd655, %rd653, %rd654;
	add.s64 	%rd656, %rd655, %rd650;
	add.s64 	%rd657, %rd656, %rd645;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r451,%dummy}, %rd1136;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r452}, %rd1136;
	}
	shf.r.wrap.b32 	%r453, %r452, %r451, 19;
	shf.r.wrap.b32 	%r454, %r451, %r452, 19;
	mov.b64 	%rd658, {%r454, %r453};
	shf.l.wrap.b32 	%r455, %r451, %r452, 3;
	shf.l.wrap.b32 	%r456, %r452, %r451, 3;
	mov.b64 	%rd659, {%r456, %r455};
	xor.b64  	%rd660, %rd658, %rd659;
	shr.u64 	%rd661, %rd1136, 6;
	xor.b64  	%rd662, %rd660, %rd661;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r457,%dummy}, %rd1133;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r458}, %rd1133;
	}
	shf.r.wrap.b32 	%r459, %r458, %r457, 8;
	shf.r.wrap.b32 	%r460, %r457, %r458, 8;
	mov.b64 	%rd663, {%r460, %r459};
	shf.r.wrap.b32 	%r461, %r458, %r457, 1;
	shf.r.wrap.b32 	%r462, %r457, %r458, 1;
	mov.b64 	%rd664, {%r462, %r461};
	xor.b64  	%rd665, %rd664, %rd663;
	shr.u64 	%rd666, %rd1133, 7;
	xor.b64  	%rd667, %rd665, %rd666;
	add.s64 	%rd668, %rd662, %rd1134;
	add.s64 	%rd669, %rd668, %rd1125;
	add.s64 	%rd1134, %rd669, %rd667;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r463,%dummy}, %rd646;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r464}, %rd646;
	}
	shf.r.wrap.b32 	%r465, %r464, %r463, 14;
	shf.r.wrap.b32 	%r466, %r463, %r464, 14;
	mov.b64 	%rd670, {%r466, %r465};
	shf.r.wrap.b32 	%r467, %r464, %r463, 18;
	shf.r.wrap.b32 	%r468, %r463, %r464, 18;
	mov.b64 	%rd671, {%r468, %r467};
	xor.b64  	%rd672, %rd670, %rd671;
	shf.l.wrap.b32 	%r469, %r463, %r464, 23;
	shf.l.wrap.b32 	%r470, %r464, %r463, 23;
	mov.b64 	%rd673, {%r470, %r469};
	xor.b64  	%rd674, %rd672, %rd673;
	xor.b64  	%rd675, %rd609, %rd572;
	and.b64  	%rd676, %rd646, %rd675;
	xor.b64  	%rd677, %rd676, %rd572;
	add.s64 	%rd678, %rd677, %rd535;
	add.s64 	%rd679, %rd678, %rd674;
	ld.const.u64 	%rd680, [%rd1122+160];
	add.s64 	%rd681, %rd679, %rd680;
	add.s64 	%rd682, %rd681, %rd1134;
	add.s64 	%rd683, %rd682, %rd546;
	and.b64  	%rd684, %rd657, %rd620;
	or.b64  	%rd685, %rd657, %rd620;
	and.b64  	%rd686, %rd685, %rd583;
	or.b64  	%rd687, %rd686, %rd684;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r471,%dummy}, %rd657;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r472}, %rd657;
	}
	shf.r.wrap.b32 	%r473, %r472, %r471, 28;
	shf.r.wrap.b32 	%r474, %r471, %r472, 28;
	mov.b64 	%rd688, {%r474, %r473};
	shf.l.wrap.b32 	%r475, %r471, %r472, 30;
	shf.l.wrap.b32 	%r476, %r472, %r471, 30;
	mov.b64 	%rd689, {%r476, %r475};
	xor.b64  	%rd690, %rd688, %rd689;
	shf.l.wrap.b32 	%r477, %r471, %r472, 25;
	shf.l.wrap.b32 	%r478, %r472, %r471, 25;
	mov.b64 	%rd691, {%r478, %r477};
	xor.b64  	%rd692, %rd690, %rd691;
	add.s64 	%rd693, %rd692, %rd687;
	add.s64 	%rd694, %rd693, %rd682;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r479,%dummy}, %rd1135;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r480}, %rd1135;
	}
	shf.r.wrap.b32 	%r481, %r480, %r479, 19;
	shf.r.wrap.b32 	%r482, %r479, %r480, 19;
	mov.b64 	%rd695, {%r482, %r481};
	shf.l.wrap.b32 	%r483, %r479, %r480, 3;
	shf.l.wrap.b32 	%r484, %r480, %r479, 3;
	mov.b64 	%rd696, {%r484, %r483};
	xor.b64  	%rd697, %rd695, %rd696;
	shr.u64 	%rd698, %rd1135, 6;
	xor.b64  	%rd699, %rd697, %rd698;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r485,%dummy}, %rd1132;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r486}, %rd1132;
	}
	shf.r.wrap.b32 	%r487, %r486, %r485, 8;
	shf.r.wrap.b32 	%r488, %r485, %r486, 8;
	mov.b64 	%rd700, {%r488, %r487};
	shf.r.wrap.b32 	%r489, %r486, %r485, 1;
	shf.r.wrap.b32 	%r490, %r485, %r486, 1;
	mov.b64 	%rd701, {%r490, %r489};
	xor.b64  	%rd702, %rd701, %rd700;
	shr.u64 	%rd703, %rd1132, 7;
	xor.b64  	%rd704, %rd702, %rd703;
	add.s64 	%rd705, %rd699, %rd1133;
	add.s64 	%rd706, %rd705, %rd1124;
	add.s64 	%rd1133, %rd706, %rd704;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r491,%dummy}, %rd683;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r492}, %rd683;
	}
	shf.r.wrap.b32 	%r493, %r492, %r491, 14;
	shf.r.wrap.b32 	%r494, %r491, %r492, 14;
	mov.b64 	%rd707, {%r494, %r493};
	shf.r.wrap.b32 	%r495, %r492, %r491, 18;
	shf.r.wrap.b32 	%r496, %r491, %r492, 18;
	mov.b64 	%rd708, {%r496, %r495};
	xor.b64  	%rd709, %rd707, %rd708;
	shf.l.wrap.b32 	%r497, %r491, %r492, 23;
	shf.l.wrap.b32 	%r498, %r492, %r491, 23;
	mov.b64 	%rd710, {%r498, %r497};
	xor.b64  	%rd711, %rd709, %rd710;
	xor.b64  	%rd712, %rd646, %rd609;
	and.b64  	%rd713, %rd683, %rd712;
	xor.b64  	%rd714, %rd713, %rd609;
	add.s64 	%rd715, %rd714, %rd572;
	add.s64 	%rd716, %rd715, %rd711;
	ld.const.u64 	%rd717, [%rd1122+168];
	add.s64 	%rd718, %rd716, %rd717;
	add.s64 	%rd719, %rd718, %rd1133;
	add.s64 	%rd720, %rd719, %rd583;
	and.b64  	%rd721, %rd694, %rd657;
	or.b64  	%rd722, %rd694, %rd657;
	and.b64  	%rd723, %rd722, %rd620;
	or.b64  	%rd724, %rd723, %rd721;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r499,%dummy}, %rd694;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r500}, %rd694;
	}
	shf.r.wrap.b32 	%r501, %r500, %r499, 28;
	shf.r.wrap.b32 	%r502, %r499, %r500, 28;
	mov.b64 	%rd725, {%r502, %r501};
	shf.l.wrap.b32 	%r503, %r499, %r500, 30;
	shf.l.wrap.b32 	%r504, %r500, %r499, 30;
	mov.b64 	%rd726, {%r504, %r503};
	xor.b64  	%rd727, %rd725, %rd726;
	shf.l.wrap.b32 	%r505, %r499, %r500, 25;
	shf.l.wrap.b32 	%r506, %r500, %r499, 25;
	mov.b64 	%rd728, {%r506, %r505};
	xor.b64  	%rd729, %rd727, %rd728;
	add.s64 	%rd730, %rd729, %rd724;
	add.s64 	%rd731, %rd730, %rd719;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r507,%dummy}, %rd1134;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r508}, %rd1134;
	}
	shf.r.wrap.b32 	%r509, %r508, %r507, 19;
	shf.r.wrap.b32 	%r510, %r507, %r508, 19;
	mov.b64 	%rd732, {%r510, %r509};
	shf.l.wrap.b32 	%r511, %r507, %r508, 3;
	shf.l.wrap.b32 	%r512, %r508, %r507, 3;
	mov.b64 	%rd733, {%r512, %r511};
	xor.b64  	%rd734, %rd732, %rd733;
	shr.u64 	%rd735, %rd1134, 6;
	xor.b64  	%rd736, %rd734, %rd735;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r513,%dummy}, %rd1131;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r514}, %rd1131;
	}
	shf.r.wrap.b32 	%r515, %r514, %r513, 8;
	shf.r.wrap.b32 	%r516, %r513, %r514, 8;
	mov.b64 	%rd737, {%r516, %r515};
	shf.r.wrap.b32 	%r517, %r514, %r513, 1;
	shf.r.wrap.b32 	%r518, %r513, %r514, 1;
	mov.b64 	%rd738, {%r518, %r517};
	xor.b64  	%rd739, %rd738, %rd737;
	shr.u64 	%rd740, %rd1131, 7;
	xor.b64  	%rd741, %rd739, %rd740;
	add.s64 	%rd742, %rd736, %rd1132;
	add.s64 	%rd743, %rd742, %rd1123;
	add.s64 	%rd1132, %rd743, %rd741;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r519,%dummy}, %rd720;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r520}, %rd720;
	}
	shf.r.wrap.b32 	%r521, %r520, %r519, 14;
	shf.r.wrap.b32 	%r522, %r519, %r520, 14;
	mov.b64 	%rd744, {%r522, %r521};
	shf.r.wrap.b32 	%r523, %r520, %r519, 18;
	shf.r.wrap.b32 	%r524, %r519, %r520, 18;
	mov.b64 	%rd745, {%r524, %r523};
	xor.b64  	%rd746, %rd744, %rd745;
	shf.l.wrap.b32 	%r525, %r519, %r520, 23;
	shf.l.wrap.b32 	%r526, %r520, %r519, 23;
	mov.b64 	%rd747, {%r526, %r525};
	xor.b64  	%rd748, %rd746, %rd747;
	xor.b64  	%rd749, %rd683, %rd646;
	and.b64  	%rd750, %rd720, %rd749;
	xor.b64  	%rd751, %rd750, %rd646;
	add.s64 	%rd752, %rd751, %rd609;
	add.s64 	%rd753, %rd752, %rd748;
	ld.const.u64 	%rd754, [%rd1122+176];
	add.s64 	%rd755, %rd753, %rd754;
	add.s64 	%rd756, %rd755, %rd1132;
	add.s64 	%rd757, %rd756, %rd620;
	and.b64  	%rd758, %rd731, %rd694;
	or.b64  	%rd759, %rd731, %rd694;
	and.b64  	%rd760, %rd759, %rd657;
	or.b64  	%rd761, %rd760, %rd758;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r527,%dummy}, %rd731;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r528}, %rd731;
	}
	shf.r.wrap.b32 	%r529, %r528, %r527, 28;
	shf.r.wrap.b32 	%r530, %r527, %r528, 28;
	mov.b64 	%rd762, {%r530, %r529};
	shf.l.wrap.b32 	%r531, %r527, %r528, 30;
	shf.l.wrap.b32 	%r532, %r528, %r527, 30;
	mov.b64 	%rd763, {%r532, %r531};
	xor.b64  	%rd764, %rd762, %rd763;
	shf.l.wrap.b32 	%r533, %r527, %r528, 25;
	shf.l.wrap.b32 	%r534, %r528, %r527, 25;
	mov.b64 	%rd765, {%r534, %r533};
	xor.b64  	%rd766, %rd764, %rd765;
	add.s64 	%rd767, %rd766, %rd761;
	add.s64 	%rd768, %rd767, %rd756;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r535,%dummy}, %rd1133;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r536}, %rd1133;
	}
	shf.r.wrap.b32 	%r537, %r536, %r535, 19;
	shf.r.wrap.b32 	%r538, %r535, %r536, 19;
	mov.b64 	%rd769, {%r538, %r537};
	shf.l.wrap.b32 	%r539, %r535, %r536, 3;
	shf.l.wrap.b32 	%r540, %r536, %r535, 3;
	mov.b64 	%rd770, {%r540, %r539};
	xor.b64  	%rd771, %rd769, %rd770;
	shr.u64 	%rd772, %rd1133, 6;
	xor.b64  	%rd773, %rd771, %rd772;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r541,%dummy}, %rd1130;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r542}, %rd1130;
	}
	shf.r.wrap.b32 	%r543, %r542, %r541, 8;
	shf.r.wrap.b32 	%r544, %r541, %r542, 8;
	mov.b64 	%rd774, {%r544, %r543};
	shf.r.wrap.b32 	%r545, %r542, %r541, 1;
	shf.r.wrap.b32 	%r546, %r541, %r542, 1;
	mov.b64 	%rd775, {%r546, %r545};
	xor.b64  	%rd776, %rd775, %rd774;
	shr.u64 	%rd777, %rd1130, 7;
	xor.b64  	%rd778, %rd776, %rd777;
	add.s64 	%rd779, %rd773, %rd1131;
	add.s64 	%rd780, %rd779, %rd1138;
	add.s64 	%rd1131, %rd780, %rd778;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r547,%dummy}, %rd757;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r548}, %rd757;
	}
	shf.r.wrap.b32 	%r549, %r548, %r547, 14;
	shf.r.wrap.b32 	%r550, %r547, %r548, 14;
	mov.b64 	%rd781, {%r550, %r549};
	shf.r.wrap.b32 	%r551, %r548, %r547, 18;
	shf.r.wrap.b32 	%r552, %r547, %r548, 18;
	mov.b64 	%rd782, {%r552, %r551};
	xor.b64  	%rd783, %rd781, %rd782;
	shf.l.wrap.b32 	%r553, %r547, %r548, 23;
	shf.l.wrap.b32 	%r554, %r548, %r547, 23;
	mov.b64 	%rd784, {%r554, %r553};
	xor.b64  	%rd785, %rd783, %rd784;
	xor.b64  	%rd786, %rd720, %rd683;
	and.b64  	%rd787, %rd757, %rd786;
	xor.b64  	%rd788, %rd787, %rd683;
	add.s64 	%rd789, %rd788, %rd646;
	add.s64 	%rd790, %rd789, %rd785;
	ld.const.u64 	%rd791, [%rd1122+184];
	add.s64 	%rd792, %rd790, %rd791;
	add.s64 	%rd793, %rd792, %rd1131;
	add.s64 	%rd794, %rd793, %rd657;
	and.b64  	%rd795, %rd768, %rd731;
	or.b64  	%rd796, %rd768, %rd731;
	and.b64  	%rd797, %rd796, %rd694;
	or.b64  	%rd798, %rd797, %rd795;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r555,%dummy}, %rd768;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r556}, %rd768;
	}
	shf.r.wrap.b32 	%r557, %r556, %r555, 28;
	shf.r.wrap.b32 	%r558, %r555, %r556, 28;
	mov.b64 	%rd799, {%r558, %r557};
	shf.l.wrap.b32 	%r559, %r555, %r556, 30;
	shf.l.wrap.b32 	%r560, %r556, %r555, 30;
	mov.b64 	%rd800, {%r560, %r559};
	xor.b64  	%rd801, %rd799, %rd800;
	shf.l.wrap.b32 	%r561, %r555, %r556, 25;
	shf.l.wrap.b32 	%r562, %r556, %r555, 25;
	mov.b64 	%rd802, {%r562, %r561};
	xor.b64  	%rd803, %rd801, %rd802;
	add.s64 	%rd804, %rd803, %rd798;
	add.s64 	%rd805, %rd804, %rd793;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r563,%dummy}, %rd1132;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r564}, %rd1132;
	}
	shf.r.wrap.b32 	%r565, %r564, %r563, 19;
	shf.r.wrap.b32 	%r566, %r563, %r564, 19;
	mov.b64 	%rd806, {%r566, %r565};
	shf.l.wrap.b32 	%r567, %r563, %r564, 3;
	shf.l.wrap.b32 	%r568, %r564, %r563, 3;
	mov.b64 	%rd807, {%r568, %r567};
	xor.b64  	%rd808, %rd806, %rd807;
	shr.u64 	%rd809, %rd1132, 6;
	xor.b64  	%rd810, %rd808, %rd809;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r569,%dummy}, %rd1129;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r570}, %rd1129;
	}
	shf.r.wrap.b32 	%r571, %r570, %r569, 8;
	shf.r.wrap.b32 	%r572, %r569, %r570, 8;
	mov.b64 	%rd811, {%r572, %r571};
	shf.r.wrap.b32 	%r573, %r570, %r569, 1;
	shf.r.wrap.b32 	%r574, %r569, %r570, 1;
	mov.b64 	%rd812, {%r574, %r573};
	xor.b64  	%rd813, %rd812, %rd811;
	shr.u64 	%rd814, %rd1129, 7;
	xor.b64  	%rd815, %rd813, %rd814;
	add.s64 	%rd816, %rd810, %rd1130;
	add.s64 	%rd817, %rd816, %rd1137;
	add.s64 	%rd1130, %rd817, %rd815;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r575,%dummy}, %rd794;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r576}, %rd794;
	}
	shf.r.wrap.b32 	%r577, %r576, %r575, 14;
	shf.r.wrap.b32 	%r578, %r575, %r576, 14;
	mov.b64 	%rd818, {%r578, %r577};
	shf.r.wrap.b32 	%r579, %r576, %r575, 18;
	shf.r.wrap.b32 	%r580, %r575, %r576, 18;
	mov.b64 	%rd819, {%r580, %r579};
	xor.b64  	%rd820, %rd818, %rd819;
	shf.l.wrap.b32 	%r581, %r575, %r576, 23;
	shf.l.wrap.b32 	%r582, %r576, %r575, 23;
	mov.b64 	%rd821, {%r582, %r581};
	xor.b64  	%rd822, %rd820, %rd821;
	xor.b64  	%rd823, %rd757, %rd720;
	and.b64  	%rd824, %rd794, %rd823;
	xor.b64  	%rd825, %rd824, %rd720;
	add.s64 	%rd826, %rd825, %rd683;
	add.s64 	%rd827, %rd826, %rd822;
	ld.const.u64 	%rd828, [%rd1122+192];
	add.s64 	%rd829, %rd827, %rd828;
	add.s64 	%rd830, %rd829, %rd1130;
	add.s64 	%rd831, %rd830, %rd694;
	and.b64  	%rd832, %rd805, %rd768;
	or.b64  	%rd833, %rd805, %rd768;
	and.b64  	%rd834, %rd833, %rd731;
	or.b64  	%rd835, %rd834, %rd832;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r583,%dummy}, %rd805;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r584}, %rd805;
	}
	shf.r.wrap.b32 	%r585, %r584, %r583, 28;
	shf.r.wrap.b32 	%r586, %r583, %r584, 28;
	mov.b64 	%rd836, {%r586, %r585};
	shf.l.wrap.b32 	%r587, %r583, %r584, 30;
	shf.l.wrap.b32 	%r588, %r584, %r583, 30;
	mov.b64 	%rd837, {%r588, %r587};
	xor.b64  	%rd838, %rd836, %rd837;
	shf.l.wrap.b32 	%r589, %r583, %r584, 25;
	shf.l.wrap.b32 	%r590, %r584, %r583, 25;
	mov.b64 	%rd839, {%r590, %r589};
	xor.b64  	%rd840, %rd838, %rd839;
	add.s64 	%rd841, %rd840, %rd835;
	add.s64 	%rd842, %rd841, %rd830;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r591,%dummy}, %rd1131;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r592}, %rd1131;
	}
	shf.r.wrap.b32 	%r593, %r592, %r591, 19;
	shf.r.wrap.b32 	%r594, %r591, %r592, 19;
	mov.b64 	%rd843, {%r594, %r593};
	shf.l.wrap.b32 	%r595, %r591, %r592, 3;
	shf.l.wrap.b32 	%r596, %r592, %r591, 3;
	mov.b64 	%rd844, {%r596, %r595};
	xor.b64  	%rd845, %rd843, %rd844;
	shr.u64 	%rd846, %rd1131, 6;
	xor.b64  	%rd847, %rd845, %rd846;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r597,%dummy}, %rd1128;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r598}, %rd1128;
	}
	shf.r.wrap.b32 	%r599, %r598, %r597, 8;
	shf.r.wrap.b32 	%r600, %r597, %r598, 8;
	mov.b64 	%rd848, {%r600, %r599};
	shf.r.wrap.b32 	%r601, %r598, %r597, 1;
	shf.r.wrap.b32 	%r602, %r597, %r598, 1;
	mov.b64 	%rd849, {%r602, %r601};
	xor.b64  	%rd850, %rd849, %rd848;
	shr.u64 	%rd851, %rd1128, 7;
	xor.b64  	%rd852, %rd850, %rd851;
	add.s64 	%rd853, %rd847, %rd1129;
	add.s64 	%rd854, %rd853, %rd1136;
	add.s64 	%rd1129, %rd854, %rd852;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r603,%dummy}, %rd831;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r604}, %rd831;
	}
	shf.r.wrap.b32 	%r605, %r604, %r603, 14;
	shf.r.wrap.b32 	%r606, %r603, %r604, 14;
	mov.b64 	%rd855, {%r606, %r605};
	shf.r.wrap.b32 	%r607, %r604, %r603, 18;
	shf.r.wrap.b32 	%r608, %r603, %r604, 18;
	mov.b64 	%rd856, {%r608, %r607};
	xor.b64  	%rd857, %rd855, %rd856;
	shf.l.wrap.b32 	%r609, %r603, %r604, 23;
	shf.l.wrap.b32 	%r610, %r604, %r603, 23;
	mov.b64 	%rd858, {%r610, %r609};
	xor.b64  	%rd859, %rd857, %rd858;
	xor.b64  	%rd860, %rd794, %rd757;
	and.b64  	%rd861, %rd831, %rd860;
	xor.b64  	%rd862, %rd861, %rd757;
	add.s64 	%rd863, %rd862, %rd720;
	add.s64 	%rd864, %rd863, %rd859;
	ld.const.u64 	%rd865, [%rd1122+200];
	add.s64 	%rd866, %rd864, %rd865;
	add.s64 	%rd867, %rd866, %rd1129;
	add.s64 	%rd868, %rd867, %rd731;
	and.b64  	%rd869, %rd842, %rd805;
	or.b64  	%rd870, %rd842, %rd805;
	and.b64  	%rd871, %rd870, %rd768;
	or.b64  	%rd872, %rd871, %rd869;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r611,%dummy}, %rd842;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r612}, %rd842;
	}
	shf.r.wrap.b32 	%r613, %r612, %r611, 28;
	shf.r.wrap.b32 	%r614, %r611, %r612, 28;
	mov.b64 	%rd873, {%r614, %r613};
	shf.l.wrap.b32 	%r615, %r611, %r612, 30;
	shf.l.wrap.b32 	%r616, %r612, %r611, 30;
	mov.b64 	%rd874, {%r616, %r615};
	xor.b64  	%rd875, %rd873, %rd874;
	shf.l.wrap.b32 	%r617, %r611, %r612, 25;
	shf.l.wrap.b32 	%r618, %r612, %r611, 25;
	mov.b64 	%rd876, {%r618, %r617};
	xor.b64  	%rd877, %rd875, %rd876;
	add.s64 	%rd878, %rd877, %rd872;
	add.s64 	%rd879, %rd878, %rd867;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r619,%dummy}, %rd1130;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r620}, %rd1130;
	}
	shf.r.wrap.b32 	%r621, %r620, %r619, 19;
	shf.r.wrap.b32 	%r622, %r619, %r620, 19;
	mov.b64 	%rd880, {%r622, %r621};
	shf.l.wrap.b32 	%r623, %r619, %r620, 3;
	shf.l.wrap.b32 	%r624, %r620, %r619, 3;
	mov.b64 	%rd881, {%r624, %r623};
	xor.b64  	%rd882, %rd880, %rd881;
	shr.u64 	%rd883, %rd1130, 6;
	xor.b64  	%rd884, %rd882, %rd883;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r625,%dummy}, %rd1127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r626}, %rd1127;
	}
	shf.r.wrap.b32 	%r627, %r626, %r625, 8;
	shf.r.wrap.b32 	%r628, %r625, %r626, 8;
	mov.b64 	%rd885, {%r628, %r627};
	shf.r.wrap.b32 	%r629, %r626, %r625, 1;
	shf.r.wrap.b32 	%r630, %r625, %r626, 1;
	mov.b64 	%rd886, {%r630, %r629};
	xor.b64  	%rd887, %rd886, %rd885;
	shr.u64 	%rd888, %rd1127, 7;
	xor.b64  	%rd889, %rd887, %rd888;
	add.s64 	%rd890, %rd884, %rd1128;
	add.s64 	%rd891, %rd890, %rd1135;
	add.s64 	%rd1128, %rd891, %rd889;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r631,%dummy}, %rd868;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r632}, %rd868;
	}
	shf.r.wrap.b32 	%r633, %r632, %r631, 14;
	shf.r.wrap.b32 	%r634, %r631, %r632, 14;
	mov.b64 	%rd892, {%r634, %r633};
	shf.r.wrap.b32 	%r635, %r632, %r631, 18;
	shf.r.wrap.b32 	%r636, %r631, %r632, 18;
	mov.b64 	%rd893, {%r636, %r635};
	xor.b64  	%rd894, %rd892, %rd893;
	shf.l.wrap.b32 	%r637, %r631, %r632, 23;
	shf.l.wrap.b32 	%r638, %r632, %r631, 23;
	mov.b64 	%rd895, {%r638, %r637};
	xor.b64  	%rd896, %rd894, %rd895;
	xor.b64  	%rd897, %rd831, %rd794;
	and.b64  	%rd898, %rd868, %rd897;
	xor.b64  	%rd899, %rd898, %rd794;
	add.s64 	%rd900, %rd899, %rd757;
	add.s64 	%rd901, %rd900, %rd896;
	ld.const.u64 	%rd902, [%rd1122+208];
	add.s64 	%rd903, %rd901, %rd902;
	add.s64 	%rd904, %rd903, %rd1128;
	add.s64 	%rd905, %rd904, %rd768;
	and.b64  	%rd906, %rd879, %rd842;
	or.b64  	%rd907, %rd879, %rd842;
	and.b64  	%rd908, %rd907, %rd805;
	or.b64  	%rd909, %rd908, %rd906;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r639,%dummy}, %rd879;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r640}, %rd879;
	}
	shf.r.wrap.b32 	%r641, %r640, %r639, 28;
	shf.r.wrap.b32 	%r642, %r639, %r640, 28;
	mov.b64 	%rd910, {%r642, %r641};
	shf.l.wrap.b32 	%r643, %r639, %r640, 30;
	shf.l.wrap.b32 	%r644, %r640, %r639, 30;
	mov.b64 	%rd911, {%r644, %r643};
	xor.b64  	%rd912, %rd910, %rd911;
	shf.l.wrap.b32 	%r645, %r639, %r640, 25;
	shf.l.wrap.b32 	%r646, %r640, %r639, 25;
	mov.b64 	%rd913, {%r646, %r645};
	xor.b64  	%rd914, %rd912, %rd913;
	add.s64 	%rd915, %rd914, %rd909;
	add.s64 	%rd916, %rd915, %rd904;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r647,%dummy}, %rd1129;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r648}, %rd1129;
	}
	shf.r.wrap.b32 	%r649, %r648, %r647, 19;
	shf.r.wrap.b32 	%r650, %r647, %r648, 19;
	mov.b64 	%rd917, {%r650, %r649};
	shf.l.wrap.b32 	%r651, %r647, %r648, 3;
	shf.l.wrap.b32 	%r652, %r648, %r647, 3;
	mov.b64 	%rd918, {%r652, %r651};
	xor.b64  	%rd919, %rd917, %rd918;
	shr.u64 	%rd920, %rd1129, 6;
	xor.b64  	%rd921, %rd919, %rd920;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r653,%dummy}, %rd1126;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r654}, %rd1126;
	}
	shf.r.wrap.b32 	%r655, %r654, %r653, 8;
	shf.r.wrap.b32 	%r656, %r653, %r654, 8;
	mov.b64 	%rd922, {%r656, %r655};
	shf.r.wrap.b32 	%r657, %r654, %r653, 1;
	shf.r.wrap.b32 	%r658, %r653, %r654, 1;
	mov.b64 	%rd923, {%r658, %r657};
	xor.b64  	%rd924, %rd923, %rd922;
	shr.u64 	%rd925, %rd1126, 7;
	xor.b64  	%rd926, %rd924, %rd925;
	add.s64 	%rd927, %rd921, %rd1127;
	add.s64 	%rd928, %rd927, %rd1134;
	add.s64 	%rd1127, %rd928, %rd926;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r659,%dummy}, %rd905;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r660}, %rd905;
	}
	shf.r.wrap.b32 	%r661, %r660, %r659, 14;
	shf.r.wrap.b32 	%r662, %r659, %r660, 14;
	mov.b64 	%rd929, {%r662, %r661};
	shf.r.wrap.b32 	%r663, %r660, %r659, 18;
	shf.r.wrap.b32 	%r664, %r659, %r660, 18;
	mov.b64 	%rd930, {%r664, %r663};
	xor.b64  	%rd931, %rd929, %rd930;
	shf.l.wrap.b32 	%r665, %r659, %r660, 23;
	shf.l.wrap.b32 	%r666, %r660, %r659, 23;
	mov.b64 	%rd932, {%r666, %r665};
	xor.b64  	%rd933, %rd931, %rd932;
	xor.b64  	%rd934, %rd868, %rd831;
	and.b64  	%rd935, %rd905, %rd934;
	xor.b64  	%rd936, %rd935, %rd831;
	add.s64 	%rd937, %rd936, %rd794;
	add.s64 	%rd938, %rd937, %rd933;
	ld.const.u64 	%rd939, [%rd1122+216];
	add.s64 	%rd940, %rd938, %rd939;
	add.s64 	%rd941, %rd940, %rd1127;
	add.s64 	%rd942, %rd941, %rd805;
	and.b64  	%rd943, %rd916, %rd879;
	or.b64  	%rd944, %rd916, %rd879;
	and.b64  	%rd945, %rd944, %rd842;
	or.b64  	%rd946, %rd945, %rd943;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r667,%dummy}, %rd916;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r668}, %rd916;
	}
	shf.r.wrap.b32 	%r669, %r668, %r667, 28;
	shf.r.wrap.b32 	%r670, %r667, %r668, 28;
	mov.b64 	%rd947, {%r670, %r669};
	shf.l.wrap.b32 	%r671, %r667, %r668, 30;
	shf.l.wrap.b32 	%r672, %r668, %r667, 30;
	mov.b64 	%rd948, {%r672, %r671};
	xor.b64  	%rd949, %rd947, %rd948;
	shf.l.wrap.b32 	%r673, %r667, %r668, 25;
	shf.l.wrap.b32 	%r674, %r668, %r667, 25;
	mov.b64 	%rd950, {%r674, %r673};
	xor.b64  	%rd951, %rd949, %rd950;
	add.s64 	%rd952, %rd951, %rd946;
	add.s64 	%rd953, %rd952, %rd941;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r675,%dummy}, %rd1128;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r676}, %rd1128;
	}
	shf.r.wrap.b32 	%r677, %r676, %r675, 19;
	shf.r.wrap.b32 	%r678, %r675, %r676, 19;
	mov.b64 	%rd954, {%r678, %r677};
	shf.l.wrap.b32 	%r679, %r675, %r676, 3;
	shf.l.wrap.b32 	%r680, %r676, %r675, 3;
	mov.b64 	%rd955, {%r680, %r679};
	xor.b64  	%rd956, %rd954, %rd955;
	shr.u64 	%rd957, %rd1128, 6;
	xor.b64  	%rd958, %rd956, %rd957;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r681,%dummy}, %rd1125;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r682}, %rd1125;
	}
	shf.r.wrap.b32 	%r683, %r682, %r681, 8;
	shf.r.wrap.b32 	%r684, %r681, %r682, 8;
	mov.b64 	%rd959, {%r684, %r683};
	shf.r.wrap.b32 	%r685, %r682, %r681, 1;
	shf.r.wrap.b32 	%r686, %r681, %r682, 1;
	mov.b64 	%rd960, {%r686, %r685};
	xor.b64  	%rd961, %rd960, %rd959;
	shr.u64 	%rd962, %rd1125, 7;
	xor.b64  	%rd963, %rd961, %rd962;
	add.s64 	%rd964, %rd958, %rd1126;
	add.s64 	%rd965, %rd964, %rd1133;
	add.s64 	%rd1126, %rd965, %rd963;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r687,%dummy}, %rd942;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r688}, %rd942;
	}
	shf.r.wrap.b32 	%r689, %r688, %r687, 14;
	shf.r.wrap.b32 	%r690, %r687, %r688, 14;
	mov.b64 	%rd966, {%r690, %r689};
	shf.r.wrap.b32 	%r691, %r688, %r687, 18;
	shf.r.wrap.b32 	%r692, %r687, %r688, 18;
	mov.b64 	%rd967, {%r692, %r691};
	xor.b64  	%rd968, %rd966, %rd967;
	shf.l.wrap.b32 	%r693, %r687, %r688, 23;
	shf.l.wrap.b32 	%r694, %r688, %r687, 23;
	mov.b64 	%rd969, {%r694, %r693};
	xor.b64  	%rd970, %rd968, %rd969;
	xor.b64  	%rd971, %rd905, %rd868;
	and.b64  	%rd972, %rd942, %rd971;
	xor.b64  	%rd973, %rd972, %rd868;
	add.s64 	%rd974, %rd973, %rd831;
	add.s64 	%rd975, %rd974, %rd970;
	ld.const.u64 	%rd976, [%rd1122+224];
	add.s64 	%rd977, %rd975, %rd976;
	add.s64 	%rd978, %rd977, %rd1126;
	add.s64 	%rd1146, %rd978, %rd842;
	and.b64  	%rd979, %rd953, %rd916;
	or.b64  	%rd980, %rd953, %rd916;
	and.b64  	%rd981, %rd980, %rd879;
	or.b64  	%rd982, %rd981, %rd979;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r695,%dummy}, %rd953;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r696}, %rd953;
	}
	shf.r.wrap.b32 	%r697, %r696, %r695, 28;
	shf.r.wrap.b32 	%r698, %r695, %r696, 28;
	mov.b64 	%rd983, {%r698, %r697};
	shf.l.wrap.b32 	%r699, %r695, %r696, 30;
	shf.l.wrap.b32 	%r700, %r696, %r695, 30;
	mov.b64 	%rd984, {%r700, %r699};
	xor.b64  	%rd985, %rd983, %rd984;
	shf.l.wrap.b32 	%r701, %r695, %r696, 25;
	shf.l.wrap.b32 	%r702, %r696, %r695, 25;
	mov.b64 	%rd986, {%r702, %r701};
	xor.b64  	%rd987, %rd985, %rd986;
	add.s64 	%rd988, %rd987, %rd982;
	add.s64 	%rd1142, %rd988, %rd978;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r703,%dummy}, %rd1127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r704}, %rd1127;
	}
	shf.r.wrap.b32 	%r705, %r704, %r703, 19;
	shf.r.wrap.b32 	%r706, %r703, %r704, 19;
	mov.b64 	%rd989, {%r706, %r705};
	shf.l.wrap.b32 	%r707, %r703, %r704, 3;
	shf.l.wrap.b32 	%r708, %r704, %r703, 3;
	mov.b64 	%rd990, {%r708, %r707};
	xor.b64  	%rd991, %rd989, %rd990;
	shr.u64 	%rd992, %rd1127, 6;
	xor.b64  	%rd993, %rd991, %rd992;
	shf.r.wrap.b32 	%r709, %r339, %r340, 8;
	shf.r.wrap.b32 	%r710, %r340, %r339, 8;
	mov.b64 	%rd994, {%r710, %r709};
	shf.r.wrap.b32 	%r711, %r339, %r340, 1;
	shf.r.wrap.b32 	%r712, %r340, %r339, 1;
	mov.b64 	%rd995, {%r712, %r711};
	xor.b64  	%rd996, %rd995, %rd994;
	shr.u64 	%rd997, %rd1124, 7;
	xor.b64  	%rd998, %rd996, %rd997;
	add.s64 	%rd999, %rd993, %rd1125;
	add.s64 	%rd1000, %rd999, %rd1132;
	add.s64 	%rd1125, %rd1000, %rd998;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r713,%dummy}, %rd1146;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r714}, %rd1146;
	}
	shf.r.wrap.b32 	%r715, %r714, %r713, 14;
	shf.r.wrap.b32 	%r716, %r713, %r714, 14;
	mov.b64 	%rd1001, {%r716, %r715};
	shf.r.wrap.b32 	%r717, %r714, %r713, 18;
	shf.r.wrap.b32 	%r718, %r713, %r714, 18;
	mov.b64 	%rd1002, {%r718, %r717};
	xor.b64  	%rd1003, %rd1001, %rd1002;
	shf.l.wrap.b32 	%r719, %r713, %r714, 23;
	shf.l.wrap.b32 	%r720, %r714, %r713, 23;
	mov.b64 	%rd1004, {%r720, %r719};
	xor.b64  	%rd1005, %rd1003, %rd1004;
	xor.b64  	%rd1006, %rd942, %rd905;
	and.b64  	%rd1007, %rd1146, %rd1006;
	xor.b64  	%rd1008, %rd1007, %rd905;
	add.s64 	%rd1009, %rd1008, %rd868;
	add.s64 	%rd1010, %rd1009, %rd1005;
	ld.const.u64 	%rd1011, [%rd1122+232];
	add.s64 	%rd1012, %rd1010, %rd1011;
	add.s64 	%rd1013, %rd1012, %rd1125;
	add.s64 	%rd1145, %rd1013, %rd879;
	and.b64  	%rd1014, %rd1142, %rd953;
	or.b64  	%rd1015, %rd1142, %rd953;
	and.b64  	%rd1016, %rd1015, %rd916;
	or.b64  	%rd1017, %rd1016, %rd1014;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r721,%dummy}, %rd1142;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r722}, %rd1142;
	}
	shf.r.wrap.b32 	%r723, %r722, %r721, 28;
	shf.r.wrap.b32 	%r724, %r721, %r722, 28;
	mov.b64 	%rd1018, {%r724, %r723};
	shf.l.wrap.b32 	%r725, %r721, %r722, 30;
	shf.l.wrap.b32 	%r726, %r722, %r721, 30;
	mov.b64 	%rd1019, {%r726, %r725};
	xor.b64  	%rd1020, %rd1018, %rd1019;
	shf.l.wrap.b32 	%r727, %r721, %r722, 25;
	shf.l.wrap.b32 	%r728, %r722, %r721, 25;
	mov.b64 	%rd1021, {%r728, %r727};
	xor.b64  	%rd1022, %rd1020, %rd1021;
	add.s64 	%rd1023, %rd1022, %rd1017;
	add.s64 	%rd1141, %rd1023, %rd1013;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r729,%dummy}, %rd1126;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r730}, %rd1126;
	}
	shf.r.wrap.b32 	%r731, %r730, %r729, 19;
	shf.r.wrap.b32 	%r732, %r729, %r730, 19;
	mov.b64 	%rd1024, {%r732, %r731};
	shf.l.wrap.b32 	%r733, %r729, %r730, 3;
	shf.l.wrap.b32 	%r734, %r730, %r729, 3;
	mov.b64 	%rd1025, {%r734, %r733};
	xor.b64  	%rd1026, %rd1024, %rd1025;
	shr.u64 	%rd1027, %rd1126, 6;
	xor.b64  	%rd1028, %rd1026, %rd1027;
	shf.r.wrap.b32 	%r735, %r367, %r368, 8;
	shf.r.wrap.b32 	%r736, %r368, %r367, 8;
	mov.b64 	%rd1029, {%r736, %r735};
	shf.r.wrap.b32 	%r737, %r367, %r368, 1;
	shf.r.wrap.b32 	%r738, %r368, %r367, 1;
	mov.b64 	%rd1030, {%r738, %r737};
	xor.b64  	%rd1031, %rd1030, %rd1029;
	shr.u64 	%rd1032, %rd1123, 7;
	xor.b64  	%rd1033, %rd1031, %rd1032;
	add.s64 	%rd1034, %rd1028, %rd1124;
	add.s64 	%rd1035, %rd1034, %rd1131;
	add.s64 	%rd1124, %rd1035, %rd1033;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r739,%dummy}, %rd1145;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r740}, %rd1145;
	}
	shf.r.wrap.b32 	%r741, %r740, %r739, 14;
	shf.r.wrap.b32 	%r742, %r739, %r740, 14;
	mov.b64 	%rd1036, {%r742, %r741};
	shf.r.wrap.b32 	%r743, %r740, %r739, 18;
	shf.r.wrap.b32 	%r744, %r739, %r740, 18;
	mov.b64 	%rd1037, {%r744, %r743};
	xor.b64  	%rd1038, %rd1036, %rd1037;
	shf.l.wrap.b32 	%r745, %r739, %r740, 23;
	shf.l.wrap.b32 	%r746, %r740, %r739, 23;
	mov.b64 	%rd1039, {%r746, %r745};
	xor.b64  	%rd1040, %rd1038, %rd1039;
	xor.b64  	%rd1041, %rd1146, %rd942;
	and.b64  	%rd1042, %rd1145, %rd1041;
	xor.b64  	%rd1043, %rd1042, %rd942;
	add.s64 	%rd1044, %rd1043, %rd905;
	add.s64 	%rd1045, %rd1044, %rd1040;
	ld.const.u64 	%rd1046, [%rd1122+240];
	add.s64 	%rd1047, %rd1045, %rd1046;
	add.s64 	%rd1048, %rd1047, %rd1124;
	add.s64 	%rd1144, %rd1048, %rd916;
	and.b64  	%rd1049, %rd1141, %rd1142;
	or.b64  	%rd1050, %rd1141, %rd1142;
	and.b64  	%rd1051, %rd1050, %rd953;
	or.b64  	%rd1052, %rd1051, %rd1049;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r747,%dummy}, %rd1141;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r748}, %rd1141;
	}
	shf.r.wrap.b32 	%r749, %r748, %r747, 28;
	shf.r.wrap.b32 	%r750, %r747, %r748, 28;
	mov.b64 	%rd1053, {%r750, %r749};
	shf.l.wrap.b32 	%r751, %r747, %r748, 30;
	shf.l.wrap.b32 	%r752, %r748, %r747, 30;
	mov.b64 	%rd1054, {%r752, %r751};
	xor.b64  	%rd1055, %rd1053, %rd1054;
	shf.l.wrap.b32 	%r753, %r747, %r748, 25;
	shf.l.wrap.b32 	%r754, %r748, %r747, 25;
	mov.b64 	%rd1056, {%r754, %r753};
	xor.b64  	%rd1057, %rd1055, %rd1056;
	add.s64 	%rd1058, %rd1057, %rd1052;
	add.s64 	%rd1140, %rd1058, %rd1048;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r755,%dummy}, %rd1125;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r756}, %rd1125;
	}
	shf.r.wrap.b32 	%r757, %r756, %r755, 19;
	shf.r.wrap.b32 	%r758, %r755, %r756, 19;
	mov.b64 	%rd1059, {%r758, %r757};
	shf.l.wrap.b32 	%r759, %r755, %r756, 3;
	shf.l.wrap.b32 	%r760, %r756, %r755, 3;
	mov.b64 	%rd1060, {%r760, %r759};
	xor.b64  	%rd1061, %rd1059, %rd1060;
	shr.u64 	%rd1062, %rd1125, 6;
	xor.b64  	%rd1063, %rd1061, %rd1062;
	shf.r.wrap.b32 	%r761, %r396, %r395, 1;
	shf.r.wrap.b32 	%r762, %r395, %r396, 1;
	mov.b64 	%rd1064, {%r762, %r761};
	shf.r.wrap.b32 	%r763, %r396, %r395, 8;
	shf.r.wrap.b32 	%r764, %r395, %r396, 8;
	mov.b64 	%rd1065, {%r764, %r763};
	xor.b64  	%rd1066, %rd1064, %rd1065;
	shr.u64 	%rd1067, %rd1138, 7;
	xor.b64  	%rd1068, %rd1066, %rd1067;
	add.s64 	%rd1069, %rd1063, %rd1123;
	add.s64 	%rd1070, %rd1069, %rd1130;
	add.s64 	%rd1123, %rd1070, %rd1068;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r765,%dummy}, %rd1144;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r766}, %rd1144;
	}
	shf.r.wrap.b32 	%r767, %r766, %r765, 14;
	shf.r.wrap.b32 	%r768, %r765, %r766, 14;
	mov.b64 	%rd1071, {%r768, %r767};
	shf.r.wrap.b32 	%r769, %r766, %r765, 18;
	shf.r.wrap.b32 	%r770, %r765, %r766, 18;
	mov.b64 	%rd1072, {%r770, %r769};
	xor.b64  	%rd1073, %rd1071, %rd1072;
	shf.l.wrap.b32 	%r771, %r765, %r766, 23;
	shf.l.wrap.b32 	%r772, %r766, %r765, 23;
	mov.b64 	%rd1074, {%r772, %r771};
	xor.b64  	%rd1075, %rd1073, %rd1074;
	xor.b64  	%rd1076, %rd1145, %rd1146;
	and.b64  	%rd1077, %rd1144, %rd1076;
	xor.b64  	%rd1078, %rd1077, %rd1146;
	add.s64 	%rd1079, %rd1078, %rd942;
	add.s64 	%rd1080, %rd1079, %rd1075;
	ld.const.u64 	%rd1081, [%rd1122+248];
	add.s64 	%rd1082, %rd1080, %rd1081;
	add.s64 	%rd1083, %rd1082, %rd1123;
	add.s64 	%rd1143, %rd1083, %rd953;
	and.b64  	%rd1084, %rd1140, %rd1141;
	or.b64  	%rd1085, %rd1140, %rd1141;
	and.b64  	%rd1086, %rd1085, %rd1142;
	or.b64  	%rd1087, %rd1086, %rd1084;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r773,%dummy}, %rd1140;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r774}, %rd1140;
	}
	shf.r.wrap.b32 	%r775, %r774, %r773, 28;
	shf.r.wrap.b32 	%r776, %r773, %r774, 28;
	mov.b64 	%rd1088, {%r776, %r775};
	shf.l.wrap.b32 	%r777, %r773, %r774, 30;
	shf.l.wrap.b32 	%r778, %r774, %r773, 30;
	mov.b64 	%rd1089, {%r778, %r777};
	xor.b64  	%rd1090, %rd1088, %rd1089;
	shf.l.wrap.b32 	%r779, %r773, %r774, 25;
	shf.l.wrap.b32 	%r780, %r774, %r773, 25;
	mov.b64 	%rd1091, {%r780, %r779};
	xor.b64  	%rd1092, %rd1090, %rd1091;
	add.s64 	%rd1093, %rd1092, %rd1087;
	add.s64 	%rd1139, %rd1093, %rd1083;
	add.s32 	%r810, %r810, 16;
	setp.ne.s32 	%p3, %r810, 64;
	mov.u64 	%rd1122, %rd96;
	@%p3 bra 	$L__BB2_5;

	ld.param.u64 	%rd1111, [kernel_crypt_raw_param_7];
	add.s64 	%rd97, %rd1139, 7640891576956012808;
	shr.u64 	%rd1094, %rd97, 32;
	add.s64 	%rd1095, %rd1140, -4942790177534073029;
	shr.u64 	%rd1096, %rd1095, 32;
	xor.b64  	%rd1097, %rd1096, %rd97;
	xor.b64  	%rd1098, %rd1097, %rd1094;
	cvt.u32.u64 	%r781, %rd1098;
	and.b64  	%rd1099, %rd1098, 134217696;
	cvt.u32.u64 	%r782, %rd1095;
	add.s32 	%r783, %r781, %r782;
	cvt.u32.u64 	%r784, %rd1094;
	xor.b32  	%r8, %r783, %r784;
	shr.u64 	%rd1100, %rd1099, 3;
	add.s64 	%rd1101, %rd1111, %rd1100;
	and.b32  	%r785, %r781, 31;
	mov.u32 	%r786, 1;
	shl.b32 	%r787, %r786, %r785;
	ld.global.nc.u32 	%r788, [%rd1101];
	and.b32  	%r789, %r788, %r787;
	setp.eq.s32 	%p4, %r789, 0;
	@%p4 bra 	$L__BB2_9;

	ld.param.u64 	%rd1112, [kernel_crypt_raw_param_7];
	and.b32  	%r790, %r8, 134217696;
	shr.u32 	%r791, %r790, 5;
	mul.wide.u32 	%rd1102, %r791, 4;
	add.s64 	%rd1103, %rd1112, %rd1102;
	and.b32  	%r792, %r8, 31;
	shl.b32 	%r794, %r786, %r792;
	ld.global.nc.u32 	%r795, [%rd1103];
	and.b32  	%r796, %r795, %r794;
	setp.eq.s32 	%p5, %r796, 0;
	@%p5 bra 	$L__BB2_9;

	mov.b32 	%r808, %envreg3;
	mov.u32 	%r807, %tid.x;
	add.s32 	%r806, %r807, %r808;
	mov.u32 	%r805, %ctaid.x;
	mov.u32 	%r804, %ntid.x;
	mad.lo.s32 	%r803, %r804, %r805, %r806;
	ld.param.u64 	%rd1110, [kernel_crypt_raw_param_6];
	atom.global.add.u32 	%r797, [%rd1110], 1;
	mul.lo.s32 	%r798, %r797, 3;
	add.s32 	%r799, %r798, 1;
	mul.wide.u32 	%rd1104, %r799, 4;
	add.s64 	%rd1105, %rd1110, %rd1104;
	st.volatile.global.u32 	[%rd1105], %r803;
	add.s32 	%r800, %r798, 2;
	mul.wide.u32 	%rd1106, %r800, 4;
	add.s64 	%rd1107, %rd1110, %rd1106;
	mov.u32 	%r801, 0;
	st.volatile.global.u32 	[%rd1107], %r801;
	add.s32 	%r802, %r798, 3;
	mul.wide.u32 	%rd1108, %r802, 4;
	add.s64 	%rd1109, %rd1110, %rd1108;
	st.volatile.global.u32 	[%rd1109], %rd97;

$L__BB2_9:
	ret;

}
	// .globl	kernel_crypt_xsha
.entry kernel_crypt_xsha(
	.param .u64 .ptr .const .align 4 kernel_crypt_xsha_param_0,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_1,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_2,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_3,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_4,
	.param .u32 kernel_crypt_xsha_param_5,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_6,
	.param .u64 .ptr .global .align 4 kernel_crypt_xsha_param_7
)
{
	.local .align 16 .b8 	__local_depot3[128];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .b32 	%r<811>;
	.reg .b64 	%rd<1128>;


	mov.u64 	%SPL, __local_depot3;
	ld.param.u64 	%rd87, [kernel_crypt_xsha_param_0];
	ld.param.u64 	%rd84, [kernel_crypt_xsha_param_1];
	ld.param.u64 	%rd88, [kernel_crypt_xsha_param_2];
	add.u64 	%rd1, %SPL, 0;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mov.b32 	%r12, %envreg3;
	add.s32 	%r13, %r11, %r12;
	mad.lo.s32 	%r1, %r10, %r9, %r13;
	mul.wide.s32 	%rd90, %r1, 4;
	add.s64 	%rd91, %rd88, %rd90;
	ld.global.nc.u32 	%r2, [%rd91];
	ld.const.u32 	%rd92, [%rd87];
	mov.u64 	%rd93, 0;
	st.local.v2.u64 	[%rd1], {%rd92, %rd93};
	st.local.v2.u64 	[%rd1+16], {%rd93, %rd93};
	st.local.v2.u64 	[%rd1+32], {%rd93, %rd93};
	st.local.v2.u64 	[%rd1+48], {%rd93, %rd93};
	st.local.v2.u64 	[%rd1+64], {%rd93, %rd93};
	st.local.v2.u64 	[%rd1+80], {%rd93, %rd93};
	st.local.v2.u64 	[%rd1+96], {%rd93, %rd93};
	st.local.u64 	[%rd1+112], %rd93;
	and.b32  	%r3, %r2, 63;
	setp.eq.s32 	%p1, %r3, 0;
	@%p1 bra 	$L__BB3_3;

	shr.u32 	%r15, %r2, 6;
	mul.wide.u32 	%rd94, %r15, 4;
	add.s64 	%rd1102, %rd84, %rd94;
	mov.u32 	%r809, 0;
	mov.u64 	%rd1101, %rd1;

$L__BB3_2:
	add.s64 	%rd7, %rd1102, 4;
	ld.global.nc.u32 	%r16, [%rd1102];
	add.s64 	%rd8, %rd1101, 4;
	st.local.u32 	[%rd1101+4], %r16;
	add.s32 	%r809, %r809, 4;
	setp.lt.u32 	%p2, %r809, %r3;
	mov.u64 	%rd1101, %rd8;
	mov.u64 	%rd1102, %rd7;
	@%p2 bra 	$L__BB3_2;

$L__BB3_3:
	add.s32 	%r18, %r3, 4;
	and.b32  	%r19, %r18, 120;
	cvt.u64.u32 	%rd96, %r19;
	add.s64 	%rd97, %rd1, %rd96;
	shl.b32 	%r20, %r18, 3;
	cvt.u64.u32 	%rd1104, %r20;
	and.b64  	%rd98, %rd1104, 56;
	mov.u64 	%rd99, clear_mask;
	add.s64 	%rd100, %rd99, %rd98;
	ld.const.u64 	%rd101, [%rd100];
	ld.local.u64 	%rd102, [%rd97];
	and.b64  	%rd103, %rd101, %rd102;
	and.b32  	%r21, %r20, 56;
	mov.u64 	%rd104, 128;
	shl.b64 	%rd105, %rd104, %r21;
	or.b64  	%rd106, %rd103, %rd105;
	st.local.u64 	[%rd97], %rd106;
	ld.local.v2.u64 	{%rd107, %rd108}, [%rd1];
	mov.u32 	%r810, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %rd107;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %rd107;
	}
	mov.u32 	%r24, 291;
	prmt.b32 	%r25, %r22, %r810, %r24;
	prmt.b32 	%r26, %r23, %r810, %r24;
	mov.b64 	%rd1119, {%r26, %r25};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r27, %temp}, %rd108;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %rd108;
	}
	prmt.b32 	%r29, %r27, %r810, %r24;
	prmt.b32 	%r30, %r28, %r810, %r24;
	mov.b64 	%rd1118, {%r30, %r29};
	ld.local.v2.u64 	{%rd111, %rd112}, [%rd1+16];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r31, %temp}, %rd111;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r32}, %rd111;
	}
	prmt.b32 	%r33, %r31, %r810, %r24;
	prmt.b32 	%r34, %r32, %r810, %r24;
	mov.b64 	%rd1117, {%r34, %r33};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r35, %temp}, %rd112;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r36}, %rd112;
	}
	prmt.b32 	%r37, %r35, %r810, %r24;
	prmt.b32 	%r38, %r36, %r810, %r24;
	mov.b64 	%rd1116, {%r38, %r37};
	ld.local.v2.u64 	{%rd115, %rd116}, [%rd1+32];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r39, %temp}, %rd115;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r40}, %rd115;
	}
	prmt.b32 	%r41, %r39, %r810, %r24;
	prmt.b32 	%r42, %r40, %r810, %r24;
	mov.b64 	%rd1115, {%r42, %r41};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r43, %temp}, %rd116;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r44}, %rd116;
	}
	prmt.b32 	%r45, %r43, %r810, %r24;
	prmt.b32 	%r46, %r44, %r810, %r24;
	mov.b64 	%rd1114, {%r46, %r45};
	ld.local.v2.u64 	{%rd119, %rd120}, [%rd1+48];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r47, %temp}, %rd119;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r48}, %rd119;
	}
	prmt.b32 	%r49, %r47, %r810, %r24;
	prmt.b32 	%r50, %r48, %r810, %r24;
	mov.b64 	%rd1113, {%r50, %r49};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r51, %temp}, %rd120;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r52}, %rd120;
	}
	prmt.b32 	%r53, %r51, %r810, %r24;
	prmt.b32 	%r54, %r52, %r810, %r24;
	mov.b64 	%rd1112, {%r54, %r53};
	.pragma "used_bytes_mask 255";
	ld.local.v2.u64 	{%rd123, %rd124}, [%rd1+64];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r55, %temp}, %rd123;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r56}, %rd123;
	}
	prmt.b32 	%r57, %r55, %r810, %r24;
	prmt.b32 	%r58, %r56, %r810, %r24;
	mov.b64 	%rd1111, {%r58, %r57};
	ld.local.u64 	%rd126, [%rd1+72];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r59, %temp}, %rd126;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r60}, %rd126;
	}
	prmt.b32 	%r61, %r59, %r810, %r24;
	prmt.b32 	%r62, %r60, %r810, %r24;
	mov.b64 	%rd1110, {%r62, %r61};
	ld.local.v2.u64 	{%rd127, %rd128}, [%rd1+80];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r63, %temp}, %rd127;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r64}, %rd127;
	}
	prmt.b32 	%r65, %r63, %r810, %r24;
	prmt.b32 	%r66, %r64, %r810, %r24;
	mov.b64 	%rd1109, {%r66, %r65};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r67, %temp}, %rd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %rd128;
	}
	prmt.b32 	%r69, %r67, %r810, %r24;
	prmt.b32 	%r70, %r68, %r810, %r24;
	mov.b64 	%rd1108, {%r70, %r69};
	ld.local.v2.u64 	{%rd131, %rd132}, [%rd1+96];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r71, %temp}, %rd131;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r72}, %rd131;
	}
	prmt.b32 	%r73, %r71, %r810, %r24;
	prmt.b32 	%r74, %r72, %r810, %r24;
	mov.b64 	%rd1107, {%r74, %r73};
	{
	.reg .b32 %temp; 
	mov.b64 	{%r75, %temp}, %rd132;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r76}, %rd132;
	}
	prmt.b32 	%r77, %r75, %r810, %r24;
	prmt.b32 	%r78, %r76, %r810, %r24;
	mov.b64 	%rd1106, {%r78, %r77};
	ld.local.u64 	%rd135, [%rd1+112];
	{
	.reg .b32 %temp; 
	mov.b64 	{%r79, %temp}, %rd135;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r80}, %rd135;
	}
	prmt.b32 	%r81, %r79, %r810, %r24;
	prmt.b32 	%r82, %r80, %r810, %r24;
	mov.b64 	%rd1105, {%r82, %r81};
	mov.u64 	%rd136, 5840696475078001361;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r83,%dummy}, %rd136;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r84}, %rd136;
	}
	shf.r.wrap.b32 	%r85, %r84, %r83, 18;
	shf.r.wrap.b32 	%r86, %r83, %r84, 18;
	mov.b64 	%rd137, {%r86, %r85};
	shf.r.wrap.b32 	%r87, %r84, %r83, 14;
	shf.r.wrap.b32 	%r88, %r83, %r84, 14;
	mov.b64 	%rd138, {%r88, %r87};
	xor.b64  	%rd139, %rd138, %rd137;
	shf.l.wrap.b32 	%r89, %r83, %r84, 23;
	shf.l.wrap.b32 	%r90, %r84, %r83, 23;
	mov.b64 	%rd140, {%r90, %r89};
	xor.b64  	%rd141, %rd139, %rd140;
	add.s64 	%rd142, %rd141, %rd1119;
	mov.u64 	%rd143, 7640891576956012808;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r91}, %rd143;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r92,%dummy}, %rd143;
	}
	shf.l.wrap.b32 	%r93, %r92, %r91, 30;
	shf.l.wrap.b32 	%r94, %r91, %r92, 30;
	mov.b64 	%rd144, {%r94, %r93};
	shf.r.wrap.b32 	%r95, %r91, %r92, 28;
	shf.r.wrap.b32 	%r96, %r92, %r91, 28;
	mov.b64 	%rd145, {%r96, %r95};
	xor.b64  	%rd146, %rd145, %rd144;
	shf.l.wrap.b32 	%r97, %r92, %r91, 25;
	shf.l.wrap.b32 	%r98, %r91, %r92, 25;
	mov.b64 	%rd147, {%r98, %r97};
	xor.b64  	%rd148, %rd146, %rd147;
	add.s64 	%rd149, %rd148, %rd142;
	add.s64 	%rd150, %rd142, 7151922335638569927;
	add.s64 	%rd151, %rd149, -549249324024138239;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r99,%dummy}, %rd150;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r100}, %rd150;
	}
	shf.r.wrap.b32 	%r101, %r100, %r99, 14;
	shf.r.wrap.b32 	%r102, %r99, %r100, 14;
	mov.b64 	%rd152, {%r102, %r101};
	shf.r.wrap.b32 	%r103, %r100, %r99, 18;
	shf.r.wrap.b32 	%r104, %r99, %r100, 18;
	mov.b64 	%rd153, {%r104, %r103};
	xor.b64  	%rd154, %rd152, %rd153;
	shf.l.wrap.b32 	%r105, %r99, %r100, 23;
	shf.l.wrap.b32 	%r106, %r100, %r99, 23;
	mov.b64 	%rd155, {%r106, %r105};
	xor.b64  	%rd156, %rd154, %rd155;
	and.b64  	%rd157, %rd150, -3887949035690463538;
	xor.b64  	%rd158, %rd157, -7276294671716946913;
	add.s64 	%rd159, %rd158, %rd156;
	add.s64 	%rd160, %rd159, %rd1118;
	and.b64  	%rd161, %rd151, -3355664534840381901;
	or.b64  	%rd162, %rd161, 3026882967131160840;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r107,%dummy}, %rd151;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r108}, %rd151;
	}
	shf.r.wrap.b32 	%r109, %r108, %r107, 28;
	shf.r.wrap.b32 	%r110, %r107, %r108, 28;
	mov.b64 	%rd163, {%r110, %r109};
	shf.l.wrap.b32 	%r111, %r107, %r108, 30;
	shf.l.wrap.b32 	%r112, %r108, %r107, 30;
	mov.b64 	%rd164, {%r112, %r111};
	xor.b64  	%rd165, %rd163, %rd164;
	shf.l.wrap.b32 	%r113, %r107, %r108, 25;
	shf.l.wrap.b32 	%r114, %r108, %r107, 25;
	mov.b64 	%rd166, {%r114, %r113};
	xor.b64  	%rd167, %rd165, %rd166;
	add.s64 	%rd168, %rd167, %rd162;
	add.s64 	%rd169, %rd168, %rd160;
	add.s64 	%rd170, %rd160, -3663095898801038493;
	add.s64 	%rd171, %rd169, -8017781463737883848;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r115,%dummy}, %rd170;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r116}, %rd170;
	}
	shf.r.wrap.b32 	%r117, %r116, %r115, 14;
	shf.r.wrap.b32 	%r118, %r115, %r116, 14;
	mov.b64 	%rd172, {%r118, %r117};
	shf.r.wrap.b32 	%r119, %r116, %r115, 18;
	shf.r.wrap.b32 	%r120, %r115, %r116, 18;
	mov.b64 	%rd173, {%r120, %r119};
	xor.b64  	%rd174, %rd172, %rd173;
	shf.l.wrap.b32 	%r121, %r115, %r116, 23;
	shf.l.wrap.b32 	%r122, %r116, %r115, 23;
	mov.b64 	%rd175, {%r122, %r121};
	xor.b64  	%rd176, %rd174, %rd175;
	xor.b64  	%rd177, %rd150, 5840696475078001361;
	and.b64  	%rd178, %rd170, %rd177;
	xor.b64  	%rd179, %rd178, 5840696475078001361;
	add.s64 	%rd180, %rd179, %rd176;
	add.s64 	%rd181, %rd180, %rd1117;
	and.b64  	%rd182, %rd171, %rd151;
	or.b64  	%rd183, %rd171, %rd151;
	and.b64  	%rd184, %rd183, 7640891576956012808;
	or.b64  	%rd185, %rd184, %rd182;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r123,%dummy}, %rd171;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r124}, %rd171;
	}
	shf.r.wrap.b32 	%r125, %r124, %r123, 28;
	shf.r.wrap.b32 	%r126, %r123, %r124, 28;
	mov.b64 	%rd186, {%r126, %r125};
	shf.l.wrap.b32 	%r127, %r123, %r124, 30;
	shf.l.wrap.b32 	%r128, %r124, %r123, 30;
	mov.b64 	%rd187, {%r128, %r127};
	xor.b64  	%rd188, %rd186, %rd187;
	shf.l.wrap.b32 	%r129, %r123, %r124, 25;
	shf.l.wrap.b32 	%r130, %r124, %r123, 25;
	mov.b64 	%rd189, {%r130, %r129};
	xor.b64  	%rd190, %rd188, %rd189;
	add.s64 	%rd191, %rd190, %rd185;
	add.s64 	%rd192, %rd191, %rd181;
	add.s64 	%rd193, %rd181, 877659737583668873;
	add.s64 	%rd194, %rd192, 5820449915117741902;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r131,%dummy}, %rd193;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r132}, %rd193;
	}
	shf.r.wrap.b32 	%r133, %r132, %r131, 14;
	shf.r.wrap.b32 	%r134, %r131, %r132, 14;
	mov.b64 	%rd195, {%r134, %r133};
	shf.r.wrap.b32 	%r135, %r132, %r131, 18;
	shf.r.wrap.b32 	%r136, %r131, %r132, 18;
	mov.b64 	%rd196, {%r136, %r135};
	xor.b64  	%rd197, %rd195, %rd196;
	shf.l.wrap.b32 	%r137, %r131, %r132, 23;
	shf.l.wrap.b32 	%r138, %r132, %r131, 23;
	mov.b64 	%rd198, {%r138, %r137};
	xor.b64  	%rd199, %rd197, %rd198;
	xor.b64  	%rd200, %rd170, %rd150;
	and.b64  	%rd201, %rd193, %rd200;
	xor.b64  	%rd202, %rd201, %rd150;
	add.s64 	%rd203, %rd202, %rd199;
	add.s64 	%rd204, %rd203, %rd1116;
	and.b64  	%rd205, %rd194, %rd171;
	or.b64  	%rd206, %rd194, %rd171;
	and.b64  	%rd207, %rd206, %rd151;
	or.b64  	%rd208, %rd207, %rd205;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r139,%dummy}, %rd194;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r140}, %rd194;
	}
	shf.r.wrap.b32 	%r141, %r140, %r139, 28;
	shf.r.wrap.b32 	%r142, %r139, %r140, 28;
	mov.b64 	%rd209, {%r142, %r141};
	shf.l.wrap.b32 	%r143, %r139, %r140, 30;
	shf.l.wrap.b32 	%r144, %r140, %r139, 30;
	mov.b64 	%rd210, {%r144, %r143};
	xor.b64  	%rd211, %rd209, %rd210;
	shf.l.wrap.b32 	%r145, %r139, %r140, 25;
	shf.l.wrap.b32 	%r146, %r140, %r139, 25;
	mov.b64 	%rd212, {%r146, %r145};
	xor.b64  	%rd213, %rd211, %rd212;
	add.s64 	%rd214, %rd213, %rd208;
	add.s64 	%rd215, %rd214, %rd204;
	add.s64 	%rd216, %rd204, -6571292209873868907;
	add.s64 	%rd217, %rd215, 4234560286879669901;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r147,%dummy}, %rd216;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r148}, %rd216;
	}
	shf.r.wrap.b32 	%r149, %r148, %r147, 14;
	shf.r.wrap.b32 	%r150, %r147, %r148, 14;
	mov.b64 	%rd218, {%r150, %r149};
	shf.r.wrap.b32 	%r151, %r148, %r147, 18;
	shf.r.wrap.b32 	%r152, %r147, %r148, 18;
	mov.b64 	%rd219, {%r152, %r151};
	xor.b64  	%rd220, %rd218, %rd219;
	shf.l.wrap.b32 	%r153, %r147, %r148, 23;
	shf.l.wrap.b32 	%r154, %r148, %r147, 23;
	mov.b64 	%rd221, {%r154, %r153};
	xor.b64  	%rd222, %rd220, %rd221;
	xor.b64  	%rd223, %rd193, %rd170;
	and.b64  	%rd224, %rd216, %rd223;
	xor.b64  	%rd225, %rd224, %rd170;
	add.s64 	%rd226, %rd225, %rd150;
	add.s64 	%rd227, %rd226, %rd222;
	add.s64 	%rd228, %rd227, %rd1115;
	add.s64 	%rd229, %rd228, 4131703408338449720;
	add.s64 	%rd230, %rd229, %rd151;
	and.b64  	%rd231, %rd217, %rd194;
	or.b64  	%rd232, %rd217, %rd194;
	and.b64  	%rd233, %rd232, %rd171;
	or.b64  	%rd234, %rd233, %rd231;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r155,%dummy}, %rd217;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r156}, %rd217;
	}
	shf.r.wrap.b32 	%r157, %r156, %r155, 28;
	shf.r.wrap.b32 	%r158, %r155, %r156, 28;
	mov.b64 	%rd235, {%r158, %r157};
	shf.l.wrap.b32 	%r159, %r155, %r156, 30;
	shf.l.wrap.b32 	%r160, %r156, %r155, 30;
	mov.b64 	%rd236, {%r160, %r159};
	xor.b64  	%rd237, %rd235, %rd236;
	shf.l.wrap.b32 	%r161, %r155, %r156, 25;
	shf.l.wrap.b32 	%r162, %r156, %r155, 25;
	mov.b64 	%rd238, {%r162, %r161};
	xor.b64  	%rd239, %rd237, %rd238;
	add.s64 	%rd240, %rd239, %rd234;
	add.s64 	%rd241, %rd240, %rd229;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r163,%dummy}, %rd230;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r164}, %rd230;
	}
	shf.r.wrap.b32 	%r165, %r164, %r163, 14;
	shf.r.wrap.b32 	%r166, %r163, %r164, 14;
	mov.b64 	%rd242, {%r166, %r165};
	shf.r.wrap.b32 	%r167, %r164, %r163, 18;
	shf.r.wrap.b32 	%r168, %r163, %r164, 18;
	mov.b64 	%rd243, {%r168, %r167};
	xor.b64  	%rd244, %rd242, %rd243;
	shf.l.wrap.b32 	%r169, %r163, %r164, 23;
	shf.l.wrap.b32 	%r170, %r164, %r163, 23;
	mov.b64 	%rd245, {%r170, %r169};
	xor.b64  	%rd246, %rd244, %rd245;
	xor.b64  	%rd247, %rd216, %rd193;
	and.b64  	%rd248, %rd230, %rd247;
	xor.b64  	%rd249, %rd248, %rd193;
	add.s64 	%rd250, %rd249, %rd170;
	add.s64 	%rd251, %rd250, %rd246;
	add.s64 	%rd252, %rd251, %rd1114;
	add.s64 	%rd253, %rd252, 6480981068601479193;
	add.s64 	%rd254, %rd253, %rd171;
	and.b64  	%rd255, %rd241, %rd217;
	or.b64  	%rd256, %rd241, %rd217;
	and.b64  	%rd257, %rd256, %rd194;
	or.b64  	%rd258, %rd257, %rd255;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r171,%dummy}, %rd241;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r172}, %rd241;
	}
	shf.r.wrap.b32 	%r173, %r172, %r171, 28;
	shf.r.wrap.b32 	%r174, %r171, %r172, 28;
	mov.b64 	%rd259, {%r174, %r173};
	shf.l.wrap.b32 	%r175, %r171, %r172, 30;
	shf.l.wrap.b32 	%r176, %r172, %r171, 30;
	mov.b64 	%rd260, {%r176, %r175};
	xor.b64  	%rd261, %rd259, %rd260;
	shf.l.wrap.b32 	%r177, %r171, %r172, 25;
	shf.l.wrap.b32 	%r178, %r172, %r171, 25;
	mov.b64 	%rd262, {%r178, %r177};
	xor.b64  	%rd263, %rd261, %rd262;
	add.s64 	%rd264, %rd263, %rd258;
	add.s64 	%rd265, %rd264, %rd253;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r179,%dummy}, %rd254;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r180}, %rd254;
	}
	shf.r.wrap.b32 	%r181, %r180, %r179, 14;
	shf.r.wrap.b32 	%r182, %r179, %r180, 14;
	mov.b64 	%rd266, {%r182, %r181};
	shf.r.wrap.b32 	%r183, %r180, %r179, 18;
	shf.r.wrap.b32 	%r184, %r179, %r180, 18;
	mov.b64 	%rd267, {%r184, %r183};
	xor.b64  	%rd268, %rd266, %rd267;
	shf.l.wrap.b32 	%r185, %r179, %r180, 23;
	shf.l.wrap.b32 	%r186, %r180, %r179, 23;
	mov.b64 	%rd269, {%r186, %r185};
	xor.b64  	%rd270, %rd268, %rd269;
	xor.b64  	%rd271, %rd230, %rd216;
	and.b64  	%rd272, %rd254, %rd271;
	xor.b64  	%rd273, %rd272, %rd216;
	add.s64 	%rd274, %rd273, %rd193;
	add.s64 	%rd275, %rd274, %rd270;
	add.s64 	%rd276, %rd275, %rd1113;
	add.s64 	%rd277, %rd276, -7908458776815382629;
	add.s64 	%rd278, %rd277, %rd194;
	and.b64  	%rd279, %rd265, %rd241;
	or.b64  	%rd280, %rd265, %rd241;
	and.b64  	%rd281, %rd280, %rd217;
	or.b64  	%rd282, %rd281, %rd279;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r187,%dummy}, %rd265;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r188}, %rd265;
	}
	shf.r.wrap.b32 	%r189, %r188, %r187, 28;
	shf.r.wrap.b32 	%r190, %r187, %r188, 28;
	mov.b64 	%rd283, {%r190, %r189};
	shf.l.wrap.b32 	%r191, %r187, %r188, 30;
	shf.l.wrap.b32 	%r192, %r188, %r187, 30;
	mov.b64 	%rd284, {%r192, %r191};
	xor.b64  	%rd285, %rd283, %rd284;
	shf.l.wrap.b32 	%r193, %r187, %r188, 25;
	shf.l.wrap.b32 	%r194, %r188, %r187, 25;
	mov.b64 	%rd286, {%r194, %r193};
	xor.b64  	%rd287, %rd285, %rd286;
	add.s64 	%rd288, %rd287, %rd282;
	add.s64 	%rd289, %rd288, %rd277;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r195,%dummy}, %rd278;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r196}, %rd278;
	}
	shf.r.wrap.b32 	%r197, %r196, %r195, 14;
	shf.r.wrap.b32 	%r198, %r195, %r196, 14;
	mov.b64 	%rd290, {%r198, %r197};
	shf.r.wrap.b32 	%r199, %r196, %r195, 18;
	shf.r.wrap.b32 	%r200, %r195, %r196, 18;
	mov.b64 	%rd291, {%r200, %r199};
	xor.b64  	%rd292, %rd290, %rd291;
	shf.l.wrap.b32 	%r201, %r195, %r196, 23;
	shf.l.wrap.b32 	%r202, %r196, %r195, 23;
	mov.b64 	%rd293, {%r202, %r201};
	xor.b64  	%rd294, %rd292, %rd293;
	xor.b64  	%rd295, %rd254, %rd230;
	and.b64  	%rd296, %rd278, %rd295;
	xor.b64  	%rd297, %rd296, %rd230;
	add.s64 	%rd298, %rd297, %rd216;
	add.s64 	%rd299, %rd298, %rd294;
	add.s64 	%rd300, %rd299, %rd1112;
	add.s64 	%rd301, %rd300, -6116909921290321640;
	add.s64 	%rd302, %rd301, %rd217;
	and.b64  	%rd303, %rd289, %rd265;
	or.b64  	%rd304, %rd289, %rd265;
	and.b64  	%rd305, %rd304, %rd241;
	or.b64  	%rd306, %rd305, %rd303;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r203,%dummy}, %rd289;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r204}, %rd289;
	}
	shf.r.wrap.b32 	%r205, %r204, %r203, 28;
	shf.r.wrap.b32 	%r206, %r203, %r204, 28;
	mov.b64 	%rd307, {%r206, %r205};
	shf.l.wrap.b32 	%r207, %r203, %r204, 30;
	shf.l.wrap.b32 	%r208, %r204, %r203, 30;
	mov.b64 	%rd308, {%r208, %r207};
	xor.b64  	%rd309, %rd307, %rd308;
	shf.l.wrap.b32 	%r209, %r203, %r204, 25;
	shf.l.wrap.b32 	%r210, %r204, %r203, 25;
	mov.b64 	%rd310, {%r210, %r209};
	xor.b64  	%rd311, %rd309, %rd310;
	add.s64 	%rd312, %rd311, %rd306;
	add.s64 	%rd313, %rd312, %rd301;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r211,%dummy}, %rd302;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r212}, %rd302;
	}
	shf.r.wrap.b32 	%r213, %r212, %r211, 14;
	shf.r.wrap.b32 	%r214, %r211, %r212, 14;
	mov.b64 	%rd314, {%r214, %r213};
	shf.r.wrap.b32 	%r215, %r212, %r211, 18;
	shf.r.wrap.b32 	%r216, %r211, %r212, 18;
	mov.b64 	%rd315, {%r216, %r215};
	xor.b64  	%rd316, %rd314, %rd315;
	shf.l.wrap.b32 	%r217, %r211, %r212, 23;
	shf.l.wrap.b32 	%r218, %r212, %r211, 23;
	mov.b64 	%rd317, {%r218, %r217};
	xor.b64  	%rd318, %rd316, %rd317;
	xor.b64  	%rd319, %rd278, %rd254;
	and.b64  	%rd320, %rd302, %rd319;
	xor.b64  	%rd321, %rd320, %rd254;
	add.s64 	%rd322, %rd321, %rd230;
	add.s64 	%rd323, %rd322, %rd318;
	add.s64 	%rd324, %rd323, %rd1111;
	add.s64 	%rd325, %rd324, -2880145864133508542;
	add.s64 	%rd326, %rd325, %rd241;
	and.b64  	%rd327, %rd313, %rd289;
	or.b64  	%rd328, %rd313, %rd289;
	and.b64  	%rd329, %rd328, %rd265;
	or.b64  	%rd330, %rd329, %rd327;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r219,%dummy}, %rd313;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r220}, %rd313;
	}
	shf.r.wrap.b32 	%r221, %r220, %r219, 28;
	shf.r.wrap.b32 	%r222, %r219, %r220, 28;
	mov.b64 	%rd331, {%r222, %r221};
	shf.l.wrap.b32 	%r223, %r219, %r220, 30;
	shf.l.wrap.b32 	%r224, %r220, %r219, 30;
	mov.b64 	%rd332, {%r224, %r223};
	xor.b64  	%rd333, %rd331, %rd332;
	shf.l.wrap.b32 	%r225, %r219, %r220, 25;
	shf.l.wrap.b32 	%r226, %r220, %r219, 25;
	mov.b64 	%rd334, {%r226, %r225};
	xor.b64  	%rd335, %rd333, %rd334;
	add.s64 	%rd336, %rd335, %rd330;
	add.s64 	%rd337, %rd336, %rd325;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r227,%dummy}, %rd326;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r228}, %rd326;
	}
	shf.r.wrap.b32 	%r229, %r228, %r227, 14;
	shf.r.wrap.b32 	%r230, %r227, %r228, 14;
	mov.b64 	%rd338, {%r230, %r229};
	shf.r.wrap.b32 	%r231, %r228, %r227, 18;
	shf.r.wrap.b32 	%r232, %r227, %r228, 18;
	mov.b64 	%rd339, {%r232, %r231};
	xor.b64  	%rd340, %rd338, %rd339;
	shf.l.wrap.b32 	%r233, %r227, %r228, 23;
	shf.l.wrap.b32 	%r234, %r228, %r227, 23;
	mov.b64 	%rd341, {%r234, %r233};
	xor.b64  	%rd342, %rd340, %rd341;
	xor.b64  	%rd343, %rd302, %rd278;
	and.b64  	%rd344, %rd326, %rd343;
	xor.b64  	%rd345, %rd344, %rd278;
	add.s64 	%rd346, %rd345, %rd254;
	add.s64 	%rd347, %rd346, %rd342;
	add.s64 	%rd348, %rd347, %rd1110;
	add.s64 	%rd349, %rd348, 1334009975649890238;
	add.s64 	%rd350, %rd349, %rd265;
	and.b64  	%rd351, %rd337, %rd313;
	or.b64  	%rd352, %rd337, %rd313;
	and.b64  	%rd353, %rd352, %rd289;
	or.b64  	%rd354, %rd353, %rd351;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r235,%dummy}, %rd337;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r236}, %rd337;
	}
	shf.r.wrap.b32 	%r237, %r236, %r235, 28;
	shf.r.wrap.b32 	%r238, %r235, %r236, 28;
	mov.b64 	%rd355, {%r238, %r237};
	shf.l.wrap.b32 	%r239, %r235, %r236, 30;
	shf.l.wrap.b32 	%r240, %r236, %r235, 30;
	mov.b64 	%rd356, {%r240, %r239};
	xor.b64  	%rd357, %rd355, %rd356;
	shf.l.wrap.b32 	%r241, %r235, %r236, 25;
	shf.l.wrap.b32 	%r242, %r236, %r235, 25;
	mov.b64 	%rd358, {%r242, %r241};
	xor.b64  	%rd359, %rd357, %rd358;
	add.s64 	%rd360, %rd359, %rd354;
	add.s64 	%rd361, %rd360, %rd349;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r243,%dummy}, %rd350;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r244}, %rd350;
	}
	shf.r.wrap.b32 	%r245, %r244, %r243, 14;
	shf.r.wrap.b32 	%r246, %r243, %r244, 14;
	mov.b64 	%rd362, {%r246, %r245};
	shf.r.wrap.b32 	%r247, %r244, %r243, 18;
	shf.r.wrap.b32 	%r248, %r243, %r244, 18;
	mov.b64 	%rd363, {%r248, %r247};
	xor.b64  	%rd364, %rd362, %rd363;
	shf.l.wrap.b32 	%r249, %r243, %r244, 23;
	shf.l.wrap.b32 	%r250, %r244, %r243, 23;
	mov.b64 	%rd365, {%r250, %r249};
	xor.b64  	%rd366, %rd364, %rd365;
	xor.b64  	%rd367, %rd326, %rd302;
	and.b64  	%rd368, %rd350, %rd367;
	xor.b64  	%rd369, %rd368, %rd302;
	add.s64 	%rd370, %rd369, %rd278;
	add.s64 	%rd371, %rd370, %rd366;
	add.s64 	%rd372, %rd371, %rd1109;
	add.s64 	%rd373, %rd372, 2608012711638119052;
	add.s64 	%rd374, %rd373, %rd289;
	and.b64  	%rd375, %rd361, %rd337;
	or.b64  	%rd376, %rd361, %rd337;
	and.b64  	%rd377, %rd376, %rd313;
	or.b64  	%rd378, %rd377, %rd375;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r251,%dummy}, %rd361;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r252}, %rd361;
	}
	shf.r.wrap.b32 	%r253, %r252, %r251, 28;
	shf.r.wrap.b32 	%r254, %r251, %r252, 28;
	mov.b64 	%rd379, {%r254, %r253};
	shf.l.wrap.b32 	%r255, %r251, %r252, 30;
	shf.l.wrap.b32 	%r256, %r252, %r251, 30;
	mov.b64 	%rd380, {%r256, %r255};
	xor.b64  	%rd381, %rd379, %rd380;
	shf.l.wrap.b32 	%r257, %r251, %r252, 25;
	shf.l.wrap.b32 	%r258, %r252, %r251, 25;
	mov.b64 	%rd382, {%r258, %r257};
	xor.b64  	%rd383, %rd381, %rd382;
	add.s64 	%rd384, %rd383, %rd378;
	add.s64 	%rd385, %rd384, %rd373;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r259,%dummy}, %rd374;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r260}, %rd374;
	}
	shf.r.wrap.b32 	%r261, %r260, %r259, 14;
	shf.r.wrap.b32 	%r262, %r259, %r260, 14;
	mov.b64 	%rd386, {%r262, %r261};
	shf.r.wrap.b32 	%r263, %r260, %r259, 18;
	shf.r.wrap.b32 	%r264, %r259, %r260, 18;
	mov.b64 	%rd387, {%r264, %r263};
	xor.b64  	%rd388, %rd386, %rd387;
	shf.l.wrap.b32 	%r265, %r259, %r260, 23;
	shf.l.wrap.b32 	%r266, %r260, %r259, 23;
	mov.b64 	%rd389, {%r266, %r265};
	xor.b64  	%rd390, %rd388, %rd389;
	xor.b64  	%rd391, %rd350, %rd326;
	and.b64  	%rd392, %rd374, %rd391;
	xor.b64  	%rd393, %rd392, %rd326;
	add.s64 	%rd394, %rd393, %rd302;
	add.s64 	%rd395, %rd394, %rd390;
	add.s64 	%rd396, %rd395, %rd1108;
	add.s64 	%rd397, %rd396, 6128411473006802146;
	add.s64 	%rd398, %rd397, %rd313;
	and.b64  	%rd399, %rd385, %rd361;
	or.b64  	%rd400, %rd385, %rd361;
	and.b64  	%rd401, %rd400, %rd337;
	or.b64  	%rd402, %rd401, %rd399;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r267,%dummy}, %rd385;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r268}, %rd385;
	}
	shf.r.wrap.b32 	%r269, %r268, %r267, 28;
	shf.r.wrap.b32 	%r270, %r267, %r268, 28;
	mov.b64 	%rd403, {%r270, %r269};
	shf.l.wrap.b32 	%r271, %r267, %r268, 30;
	shf.l.wrap.b32 	%r272, %r268, %r267, 30;
	mov.b64 	%rd404, {%r272, %r271};
	xor.b64  	%rd405, %rd403, %rd404;
	shf.l.wrap.b32 	%r273, %r267, %r268, 25;
	shf.l.wrap.b32 	%r274, %r268, %r267, 25;
	mov.b64 	%rd406, {%r274, %r273};
	xor.b64  	%rd407, %rd405, %rd406;
	add.s64 	%rd408, %rd407, %rd402;
	add.s64 	%rd409, %rd408, %rd397;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r275,%dummy}, %rd398;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r276}, %rd398;
	}
	shf.r.wrap.b32 	%r277, %r276, %r275, 14;
	shf.r.wrap.b32 	%r278, %r275, %r276, 14;
	mov.b64 	%rd410, {%r278, %r277};
	shf.r.wrap.b32 	%r279, %r276, %r275, 18;
	shf.r.wrap.b32 	%r280, %r275, %r276, 18;
	mov.b64 	%rd411, {%r280, %r279};
	xor.b64  	%rd412, %rd410, %rd411;
	shf.l.wrap.b32 	%r281, %r275, %r276, 23;
	shf.l.wrap.b32 	%r282, %r276, %r275, 23;
	mov.b64 	%rd413, {%r282, %r281};
	xor.b64  	%rd414, %rd412, %rd413;
	xor.b64  	%rd415, %rd374, %rd350;
	and.b64  	%rd416, %rd398, %rd415;
	xor.b64  	%rd417, %rd416, %rd350;
	add.s64 	%rd418, %rd417, %rd326;
	add.s64 	%rd419, %rd418, %rd414;
	add.s64 	%rd420, %rd419, %rd1107;
	add.s64 	%rd421, %rd420, 8268148722764581231;
	add.s64 	%rd1127, %rd421, %rd337;
	and.b64  	%rd422, %rd409, %rd385;
	or.b64  	%rd423, %rd409, %rd385;
	and.b64  	%rd424, %rd423, %rd361;
	or.b64  	%rd425, %rd424, %rd422;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r283,%dummy}, %rd409;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r284}, %rd409;
	}
	shf.r.wrap.b32 	%r285, %r284, %r283, 28;
	shf.r.wrap.b32 	%r286, %r283, %r284, 28;
	mov.b64 	%rd426, {%r286, %r285};
	shf.l.wrap.b32 	%r287, %r283, %r284, 30;
	shf.l.wrap.b32 	%r288, %r284, %r283, 30;
	mov.b64 	%rd427, {%r288, %r287};
	xor.b64  	%rd428, %rd426, %rd427;
	shf.l.wrap.b32 	%r289, %r283, %r284, 25;
	shf.l.wrap.b32 	%r290, %r284, %r283, 25;
	mov.b64 	%rd429, {%r290, %r289};
	xor.b64  	%rd430, %rd428, %rd429;
	add.s64 	%rd431, %rd430, %rd425;
	add.s64 	%rd1123, %rd431, %rd421;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r291,%dummy}, %rd1127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r292}, %rd1127;
	}
	shf.r.wrap.b32 	%r293, %r292, %r291, 14;
	shf.r.wrap.b32 	%r294, %r291, %r292, 14;
	mov.b64 	%rd432, {%r294, %r293};
	shf.r.wrap.b32 	%r295, %r292, %r291, 18;
	shf.r.wrap.b32 	%r296, %r291, %r292, 18;
	mov.b64 	%rd433, {%r296, %r295};
	xor.b64  	%rd434, %rd432, %rd433;
	shf.l.wrap.b32 	%r297, %r291, %r292, 23;
	shf.l.wrap.b32 	%r298, %r292, %r291, 23;
	mov.b64 	%rd435, {%r298, %r297};
	xor.b64  	%rd436, %rd434, %rd435;
	xor.b64  	%rd437, %rd398, %rd374;
	and.b64  	%rd438, %rd1127, %rd437;
	xor.b64  	%rd439, %rd438, %rd374;
	add.s64 	%rd440, %rd439, %rd350;
	add.s64 	%rd441, %rd440, %rd436;
	add.s64 	%rd442, %rd441, %rd1106;
	add.s64 	%rd443, %rd442, -9160688886553864527;
	add.s64 	%rd1126, %rd443, %rd361;
	and.b64  	%rd444, %rd1123, %rd409;
	or.b64  	%rd445, %rd1123, %rd409;
	and.b64  	%rd446, %rd445, %rd385;
	or.b64  	%rd447, %rd446, %rd444;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r299,%dummy}, %rd1123;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r300}, %rd1123;
	}
	shf.r.wrap.b32 	%r301, %r300, %r299, 28;
	shf.r.wrap.b32 	%r302, %r299, %r300, 28;
	mov.b64 	%rd448, {%r302, %r301};
	shf.l.wrap.b32 	%r303, %r299, %r300, 30;
	shf.l.wrap.b32 	%r304, %r300, %r299, 30;
	mov.b64 	%rd449, {%r304, %r303};
	xor.b64  	%rd450, %rd448, %rd449;
	shf.l.wrap.b32 	%r305, %r299, %r300, 25;
	shf.l.wrap.b32 	%r306, %r300, %r299, 25;
	mov.b64 	%rd451, {%r306, %r305};
	xor.b64  	%rd452, %rd450, %rd451;
	add.s64 	%rd453, %rd452, %rd447;
	add.s64 	%rd1122, %rd453, %rd443;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r307,%dummy}, %rd1126;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r308}, %rd1126;
	}
	shf.r.wrap.b32 	%r309, %r308, %r307, 14;
	shf.r.wrap.b32 	%r310, %r307, %r308, 14;
	mov.b64 	%rd454, {%r310, %r309};
	shf.r.wrap.b32 	%r311, %r308, %r307, 18;
	shf.r.wrap.b32 	%r312, %r307, %r308, 18;
	mov.b64 	%rd455, {%r312, %r311};
	xor.b64  	%rd456, %rd454, %rd455;
	shf.l.wrap.b32 	%r313, %r307, %r308, 23;
	shf.l.wrap.b32 	%r314, %r308, %r307, 23;
	mov.b64 	%rd457, {%r314, %r313};
	xor.b64  	%rd458, %rd456, %rd457;
	xor.b64  	%rd459, %rd1127, %rd398;
	and.b64  	%rd460, %rd1126, %rd459;
	xor.b64  	%rd461, %rd460, %rd398;
	add.s64 	%rd462, %rd461, %rd374;
	add.s64 	%rd463, %rd462, %rd458;
	add.s64 	%rd464, %rd463, %rd1105;
	add.s64 	%rd465, %rd464, -7215885187991268811;
	add.s64 	%rd1125, %rd465, %rd385;
	and.b64  	%rd466, %rd1122, %rd1123;
	or.b64  	%rd467, %rd1122, %rd1123;
	and.b64  	%rd468, %rd467, %rd409;
	or.b64  	%rd469, %rd468, %rd466;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r315,%dummy}, %rd1122;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r316}, %rd1122;
	}
	shf.r.wrap.b32 	%r317, %r316, %r315, 28;
	shf.r.wrap.b32 	%r318, %r315, %r316, 28;
	mov.b64 	%rd470, {%r318, %r317};
	shf.l.wrap.b32 	%r319, %r315, %r316, 30;
	shf.l.wrap.b32 	%r320, %r316, %r315, 30;
	mov.b64 	%rd471, {%r320, %r319};
	xor.b64  	%rd472, %rd470, %rd471;
	shf.l.wrap.b32 	%r321, %r315, %r316, 25;
	shf.l.wrap.b32 	%r322, %r316, %r315, 25;
	mov.b64 	%rd473, {%r322, %r321};
	xor.b64  	%rd474, %rd472, %rd473;
	add.s64 	%rd475, %rd474, %rd469;
	add.s64 	%rd1121, %rd475, %rd465;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r323,%dummy}, %rd1125;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r324}, %rd1125;
	}
	shf.r.wrap.b32 	%r325, %r324, %r323, 14;
	shf.r.wrap.b32 	%r326, %r323, %r324, 14;
	mov.b64 	%rd476, {%r326, %r325};
	shf.r.wrap.b32 	%r327, %r324, %r323, 18;
	shf.r.wrap.b32 	%r328, %r323, %r324, 18;
	mov.b64 	%rd477, {%r328, %r327};
	xor.b64  	%rd478, %rd476, %rd477;
	shf.l.wrap.b32 	%r329, %r323, %r324, 23;
	shf.l.wrap.b32 	%r330, %r324, %r323, 23;
	mov.b64 	%rd479, {%r330, %r329};
	xor.b64  	%rd480, %rd478, %rd479;
	xor.b64  	%rd481, %rd1126, %rd1127;
	and.b64  	%rd482, %rd1125, %rd481;
	xor.b64  	%rd483, %rd482, %rd1127;
	add.s64 	%rd484, %rd483, %rd398;
	add.s64 	%rd485, %rd484, %rd480;
	add.s64 	%rd486, %rd485, %rd1104;
	add.s64 	%rd487, %rd486, -4495734319001033068;
	add.s64 	%rd1124, %rd487, %rd409;
	and.b64  	%rd488, %rd1121, %rd1122;
	or.b64  	%rd489, %rd1121, %rd1122;
	and.b64  	%rd490, %rd489, %rd1123;
	or.b64  	%rd491, %rd490, %rd488;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r331,%dummy}, %rd1121;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r332}, %rd1121;
	}
	shf.r.wrap.b32 	%r333, %r332, %r331, 28;
	shf.r.wrap.b32 	%r334, %r331, %r332, 28;
	mov.b64 	%rd492, {%r334, %r333};
	shf.l.wrap.b32 	%r335, %r331, %r332, 30;
	shf.l.wrap.b32 	%r336, %r332, %r331, 30;
	mov.b64 	%rd493, {%r336, %r335};
	xor.b64  	%rd494, %rd492, %rd493;
	shf.l.wrap.b32 	%r337, %r331, %r332, 25;
	shf.l.wrap.b32 	%r338, %r332, %r331, 25;
	mov.b64 	%rd495, {%r338, %r337};
	xor.b64  	%rd496, %rd494, %rd495;
	add.s64 	%rd497, %rd496, %rd491;
	add.s64 	%rd1120, %rd497, %rd487;
	mov.u64 	%rd1103, k;

$L__BB3_4:
	.pragma "nounroll";
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r339}, %rd1105;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r340,%dummy}, %rd1105;
	}
	shf.l.wrap.b32 	%r341, %r340, %r339, 3;
	shf.l.wrap.b32 	%r342, %r339, %r340, 3;
	mov.b64 	%rd498, {%r342, %r341};
	shf.r.wrap.b32 	%r343, %r339, %r340, 19;
	shf.r.wrap.b32 	%r344, %r340, %r339, 19;
	mov.b64 	%rd499, {%r344, %r343};
	xor.b64  	%rd500, %rd499, %rd498;
	shr.u64 	%rd501, %rd1105, 6;
	xor.b64  	%rd502, %rd500, %rd501;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r345,%dummy}, %rd1118;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r346}, %rd1118;
	}
	shf.r.wrap.b32 	%r347, %r346, %r345, 8;
	shf.r.wrap.b32 	%r348, %r345, %r346, 8;
	mov.b64 	%rd503, {%r348, %r347};
	shf.r.wrap.b32 	%r349, %r346, %r345, 1;
	shf.r.wrap.b32 	%r350, %r345, %r346, 1;
	mov.b64 	%rd504, {%r350, %r349};
	xor.b64  	%rd505, %rd504, %rd503;
	shr.u64 	%rd506, %rd1118, 7;
	xor.b64  	%rd507, %rd505, %rd506;
	add.s64 	%rd508, %rd502, %rd1119;
	add.s64 	%rd509, %rd508, %rd1110;
	add.s64 	%rd1119, %rd509, %rd507;
	add.s64 	%rd82, %rd1103, 128;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r351,%dummy}, %rd1124;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r352}, %rd1124;
	}
	shf.r.wrap.b32 	%r353, %r352, %r351, 18;
	shf.r.wrap.b32 	%r354, %r351, %r352, 18;
	mov.b64 	%rd510, {%r354, %r353};
	shf.r.wrap.b32 	%r355, %r352, %r351, 14;
	shf.r.wrap.b32 	%r356, %r351, %r352, 14;
	mov.b64 	%rd511, {%r356, %r355};
	xor.b64  	%rd512, %rd511, %rd510;
	shf.l.wrap.b32 	%r357, %r351, %r352, 23;
	shf.l.wrap.b32 	%r358, %r352, %r351, 23;
	mov.b64 	%rd513, {%r358, %r357};
	xor.b64  	%rd514, %rd512, %rd513;
	xor.b64  	%rd515, %rd1125, %rd1126;
	and.b64  	%rd516, %rd1124, %rd515;
	xor.b64  	%rd517, %rd516, %rd1126;
	add.s64 	%rd518, %rd517, %rd1127;
	add.s64 	%rd519, %rd518, %rd514;
	ld.const.u64 	%rd520, [%rd1103+128];
	add.s64 	%rd521, %rd519, %rd520;
	add.s64 	%rd522, %rd521, %rd1119;
	add.s64 	%rd523, %rd522, %rd1123;
	or.b64  	%rd524, %rd1120, %rd1121;
	and.b64  	%rd525, %rd524, %rd1122;
	and.b64  	%rd526, %rd1120, %rd1121;
	or.b64  	%rd527, %rd525, %rd526;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r359}, %rd1120;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r360,%dummy}, %rd1120;
	}
	shf.l.wrap.b32 	%r361, %r360, %r359, 30;
	shf.l.wrap.b32 	%r362, %r359, %r360, 30;
	mov.b64 	%rd528, {%r362, %r361};
	shf.r.wrap.b32 	%r363, %r359, %r360, 28;
	shf.r.wrap.b32 	%r364, %r360, %r359, 28;
	mov.b64 	%rd529, {%r364, %r363};
	xor.b64  	%rd530, %rd529, %rd528;
	shf.l.wrap.b32 	%r365, %r360, %r359, 25;
	shf.l.wrap.b32 	%r366, %r359, %r360, 25;
	mov.b64 	%rd531, {%r366, %r365};
	xor.b64  	%rd532, %rd530, %rd531;
	add.s64 	%rd533, %rd532, %rd527;
	add.s64 	%rd534, %rd533, %rd522;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r367}, %rd1104;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r368,%dummy}, %rd1104;
	}
	shf.l.wrap.b32 	%r369, %r368, %r367, 3;
	shf.l.wrap.b32 	%r370, %r367, %r368, 3;
	mov.b64 	%rd535, {%r370, %r369};
	shf.r.wrap.b32 	%r371, %r367, %r368, 19;
	shf.r.wrap.b32 	%r372, %r368, %r367, 19;
	mov.b64 	%rd536, {%r372, %r371};
	xor.b64  	%rd537, %rd536, %rd535;
	shr.u64 	%rd538, %rd1104, 6;
	xor.b64  	%rd539, %rd537, %rd538;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r373,%dummy}, %rd1117;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r374}, %rd1117;
	}
	shf.r.wrap.b32 	%r375, %r374, %r373, 8;
	shf.r.wrap.b32 	%r376, %r373, %r374, 8;
	mov.b64 	%rd540, {%r376, %r375};
	shf.r.wrap.b32 	%r377, %r374, %r373, 1;
	shf.r.wrap.b32 	%r378, %r373, %r374, 1;
	mov.b64 	%rd541, {%r378, %r377};
	xor.b64  	%rd542, %rd541, %rd540;
	shr.u64 	%rd543, %rd1117, 7;
	xor.b64  	%rd544, %rd542, %rd543;
	add.s64 	%rd545, %rd539, %rd1118;
	add.s64 	%rd546, %rd545, %rd1109;
	add.s64 	%rd1118, %rd546, %rd544;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r379,%dummy}, %rd523;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r380}, %rd523;
	}
	shf.r.wrap.b32 	%r381, %r380, %r379, 14;
	shf.r.wrap.b32 	%r382, %r379, %r380, 14;
	mov.b64 	%rd547, {%r382, %r381};
	shf.r.wrap.b32 	%r383, %r380, %r379, 18;
	shf.r.wrap.b32 	%r384, %r379, %r380, 18;
	mov.b64 	%rd548, {%r384, %r383};
	xor.b64  	%rd549, %rd547, %rd548;
	shf.l.wrap.b32 	%r385, %r379, %r380, 23;
	shf.l.wrap.b32 	%r386, %r380, %r379, 23;
	mov.b64 	%rd550, {%r386, %r385};
	xor.b64  	%rd551, %rd549, %rd550;
	xor.b64  	%rd552, %rd1124, %rd1125;
	and.b64  	%rd553, %rd523, %rd552;
	xor.b64  	%rd554, %rd553, %rd1125;
	add.s64 	%rd555, %rd554, %rd1126;
	add.s64 	%rd556, %rd555, %rd551;
	ld.const.u64 	%rd557, [%rd1103+136];
	add.s64 	%rd558, %rd556, %rd557;
	add.s64 	%rd559, %rd558, %rd1118;
	add.s64 	%rd560, %rd559, %rd1122;
	and.b64  	%rd561, %rd534, %rd1120;
	or.b64  	%rd562, %rd534, %rd1120;
	and.b64  	%rd563, %rd562, %rd1121;
	or.b64  	%rd564, %rd563, %rd561;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r387,%dummy}, %rd534;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r388}, %rd534;
	}
	shf.r.wrap.b32 	%r389, %r388, %r387, 28;
	shf.r.wrap.b32 	%r390, %r387, %r388, 28;
	mov.b64 	%rd565, {%r390, %r389};
	shf.l.wrap.b32 	%r391, %r387, %r388, 30;
	shf.l.wrap.b32 	%r392, %r388, %r387, 30;
	mov.b64 	%rd566, {%r392, %r391};
	xor.b64  	%rd567, %rd565, %rd566;
	shf.l.wrap.b32 	%r393, %r387, %r388, 25;
	shf.l.wrap.b32 	%r394, %r388, %r387, 25;
	mov.b64 	%rd568, {%r394, %r393};
	xor.b64  	%rd569, %rd567, %rd568;
	add.s64 	%rd570, %rd569, %rd564;
	add.s64 	%rd571, %rd570, %rd559;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r395,%dummy}, %rd1119;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r396}, %rd1119;
	}
	shf.r.wrap.b32 	%r397, %r396, %r395, 19;
	shf.r.wrap.b32 	%r398, %r395, %r396, 19;
	mov.b64 	%rd572, {%r398, %r397};
	shf.l.wrap.b32 	%r399, %r395, %r396, 3;
	shf.l.wrap.b32 	%r400, %r396, %r395, 3;
	mov.b64 	%rd573, {%r400, %r399};
	xor.b64  	%rd574, %rd572, %rd573;
	shr.u64 	%rd575, %rd1119, 6;
	xor.b64  	%rd576, %rd574, %rd575;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r401,%dummy}, %rd1116;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r402}, %rd1116;
	}
	shf.r.wrap.b32 	%r403, %r402, %r401, 8;
	shf.r.wrap.b32 	%r404, %r401, %r402, 8;
	mov.b64 	%rd577, {%r404, %r403};
	shf.r.wrap.b32 	%r405, %r402, %r401, 1;
	shf.r.wrap.b32 	%r406, %r401, %r402, 1;
	mov.b64 	%rd578, {%r406, %r405};
	xor.b64  	%rd579, %rd578, %rd577;
	shr.u64 	%rd580, %rd1116, 7;
	xor.b64  	%rd581, %rd579, %rd580;
	add.s64 	%rd582, %rd576, %rd1117;
	add.s64 	%rd583, %rd582, %rd1108;
	add.s64 	%rd1117, %rd583, %rd581;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r407,%dummy}, %rd560;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r408}, %rd560;
	}
	shf.r.wrap.b32 	%r409, %r408, %r407, 14;
	shf.r.wrap.b32 	%r410, %r407, %r408, 14;
	mov.b64 	%rd584, {%r410, %r409};
	shf.r.wrap.b32 	%r411, %r408, %r407, 18;
	shf.r.wrap.b32 	%r412, %r407, %r408, 18;
	mov.b64 	%rd585, {%r412, %r411};
	xor.b64  	%rd586, %rd584, %rd585;
	shf.l.wrap.b32 	%r413, %r407, %r408, 23;
	shf.l.wrap.b32 	%r414, %r408, %r407, 23;
	mov.b64 	%rd587, {%r414, %r413};
	xor.b64  	%rd588, %rd586, %rd587;
	xor.b64  	%rd589, %rd523, %rd1124;
	and.b64  	%rd590, %rd560, %rd589;
	xor.b64  	%rd591, %rd590, %rd1124;
	add.s64 	%rd592, %rd591, %rd1125;
	add.s64 	%rd593, %rd592, %rd588;
	ld.const.u64 	%rd594, [%rd1103+144];
	add.s64 	%rd595, %rd593, %rd594;
	add.s64 	%rd596, %rd595, %rd1117;
	add.s64 	%rd597, %rd596, %rd1121;
	and.b64  	%rd598, %rd571, %rd534;
	or.b64  	%rd599, %rd571, %rd534;
	and.b64  	%rd600, %rd599, %rd1120;
	or.b64  	%rd601, %rd600, %rd598;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r415,%dummy}, %rd571;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r416}, %rd571;
	}
	shf.r.wrap.b32 	%r417, %r416, %r415, 28;
	shf.r.wrap.b32 	%r418, %r415, %r416, 28;
	mov.b64 	%rd602, {%r418, %r417};
	shf.l.wrap.b32 	%r419, %r415, %r416, 30;
	shf.l.wrap.b32 	%r420, %r416, %r415, 30;
	mov.b64 	%rd603, {%r420, %r419};
	xor.b64  	%rd604, %rd602, %rd603;
	shf.l.wrap.b32 	%r421, %r415, %r416, 25;
	shf.l.wrap.b32 	%r422, %r416, %r415, 25;
	mov.b64 	%rd605, {%r422, %r421};
	xor.b64  	%rd606, %rd604, %rd605;
	add.s64 	%rd607, %rd606, %rd601;
	add.s64 	%rd608, %rd607, %rd596;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r423,%dummy}, %rd1118;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r424}, %rd1118;
	}
	shf.r.wrap.b32 	%r425, %r424, %r423, 19;
	shf.r.wrap.b32 	%r426, %r423, %r424, 19;
	mov.b64 	%rd609, {%r426, %r425};
	shf.l.wrap.b32 	%r427, %r423, %r424, 3;
	shf.l.wrap.b32 	%r428, %r424, %r423, 3;
	mov.b64 	%rd610, {%r428, %r427};
	xor.b64  	%rd611, %rd609, %rd610;
	shr.u64 	%rd612, %rd1118, 6;
	xor.b64  	%rd613, %rd611, %rd612;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r429,%dummy}, %rd1115;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r430}, %rd1115;
	}
	shf.r.wrap.b32 	%r431, %r430, %r429, 8;
	shf.r.wrap.b32 	%r432, %r429, %r430, 8;
	mov.b64 	%rd614, {%r432, %r431};
	shf.r.wrap.b32 	%r433, %r430, %r429, 1;
	shf.r.wrap.b32 	%r434, %r429, %r430, 1;
	mov.b64 	%rd615, {%r434, %r433};
	xor.b64  	%rd616, %rd615, %rd614;
	shr.u64 	%rd617, %rd1115, 7;
	xor.b64  	%rd618, %rd616, %rd617;
	add.s64 	%rd619, %rd613, %rd1116;
	add.s64 	%rd620, %rd619, %rd1107;
	add.s64 	%rd1116, %rd620, %rd618;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r435,%dummy}, %rd597;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r436}, %rd597;
	}
	shf.r.wrap.b32 	%r437, %r436, %r435, 14;
	shf.r.wrap.b32 	%r438, %r435, %r436, 14;
	mov.b64 	%rd621, {%r438, %r437};
	shf.r.wrap.b32 	%r439, %r436, %r435, 18;
	shf.r.wrap.b32 	%r440, %r435, %r436, 18;
	mov.b64 	%rd622, {%r440, %r439};
	xor.b64  	%rd623, %rd621, %rd622;
	shf.l.wrap.b32 	%r441, %r435, %r436, 23;
	shf.l.wrap.b32 	%r442, %r436, %r435, 23;
	mov.b64 	%rd624, {%r442, %r441};
	xor.b64  	%rd625, %rd623, %rd624;
	xor.b64  	%rd626, %rd560, %rd523;
	and.b64  	%rd627, %rd597, %rd626;
	xor.b64  	%rd628, %rd627, %rd523;
	add.s64 	%rd629, %rd628, %rd1124;
	add.s64 	%rd630, %rd629, %rd625;
	ld.const.u64 	%rd631, [%rd1103+152];
	add.s64 	%rd632, %rd630, %rd631;
	add.s64 	%rd633, %rd632, %rd1116;
	add.s64 	%rd634, %rd633, %rd1120;
	and.b64  	%rd635, %rd608, %rd571;
	or.b64  	%rd636, %rd608, %rd571;
	and.b64  	%rd637, %rd636, %rd534;
	or.b64  	%rd638, %rd637, %rd635;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r443,%dummy}, %rd608;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r444}, %rd608;
	}
	shf.r.wrap.b32 	%r445, %r444, %r443, 28;
	shf.r.wrap.b32 	%r446, %r443, %r444, 28;
	mov.b64 	%rd639, {%r446, %r445};
	shf.l.wrap.b32 	%r447, %r443, %r444, 30;
	shf.l.wrap.b32 	%r448, %r444, %r443, 30;
	mov.b64 	%rd640, {%r448, %r447};
	xor.b64  	%rd641, %rd639, %rd640;
	shf.l.wrap.b32 	%r449, %r443, %r444, 25;
	shf.l.wrap.b32 	%r450, %r444, %r443, 25;
	mov.b64 	%rd642, {%r450, %r449};
	xor.b64  	%rd643, %rd641, %rd642;
	add.s64 	%rd644, %rd643, %rd638;
	add.s64 	%rd645, %rd644, %rd633;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r451,%dummy}, %rd1117;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r452}, %rd1117;
	}
	shf.r.wrap.b32 	%r453, %r452, %r451, 19;
	shf.r.wrap.b32 	%r454, %r451, %r452, 19;
	mov.b64 	%rd646, {%r454, %r453};
	shf.l.wrap.b32 	%r455, %r451, %r452, 3;
	shf.l.wrap.b32 	%r456, %r452, %r451, 3;
	mov.b64 	%rd647, {%r456, %r455};
	xor.b64  	%rd648, %rd646, %rd647;
	shr.u64 	%rd649, %rd1117, 6;
	xor.b64  	%rd650, %rd648, %rd649;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r457,%dummy}, %rd1114;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r458}, %rd1114;
	}
	shf.r.wrap.b32 	%r459, %r458, %r457, 8;
	shf.r.wrap.b32 	%r460, %r457, %r458, 8;
	mov.b64 	%rd651, {%r460, %r459};
	shf.r.wrap.b32 	%r461, %r458, %r457, 1;
	shf.r.wrap.b32 	%r462, %r457, %r458, 1;
	mov.b64 	%rd652, {%r462, %r461};
	xor.b64  	%rd653, %rd652, %rd651;
	shr.u64 	%rd654, %rd1114, 7;
	xor.b64  	%rd655, %rd653, %rd654;
	add.s64 	%rd656, %rd650, %rd1115;
	add.s64 	%rd657, %rd656, %rd1106;
	add.s64 	%rd1115, %rd657, %rd655;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r463,%dummy}, %rd634;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r464}, %rd634;
	}
	shf.r.wrap.b32 	%r465, %r464, %r463, 14;
	shf.r.wrap.b32 	%r466, %r463, %r464, 14;
	mov.b64 	%rd658, {%r466, %r465};
	shf.r.wrap.b32 	%r467, %r464, %r463, 18;
	shf.r.wrap.b32 	%r468, %r463, %r464, 18;
	mov.b64 	%rd659, {%r468, %r467};
	xor.b64  	%rd660, %rd658, %rd659;
	shf.l.wrap.b32 	%r469, %r463, %r464, 23;
	shf.l.wrap.b32 	%r470, %r464, %r463, 23;
	mov.b64 	%rd661, {%r470, %r469};
	xor.b64  	%rd662, %rd660, %rd661;
	xor.b64  	%rd663, %rd597, %rd560;
	and.b64  	%rd664, %rd634, %rd663;
	xor.b64  	%rd665, %rd664, %rd560;
	add.s64 	%rd666, %rd665, %rd523;
	add.s64 	%rd667, %rd666, %rd662;
	ld.const.u64 	%rd668, [%rd1103+160];
	add.s64 	%rd669, %rd667, %rd668;
	add.s64 	%rd670, %rd669, %rd1115;
	add.s64 	%rd671, %rd670, %rd534;
	and.b64  	%rd672, %rd645, %rd608;
	or.b64  	%rd673, %rd645, %rd608;
	and.b64  	%rd674, %rd673, %rd571;
	or.b64  	%rd675, %rd674, %rd672;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r471,%dummy}, %rd645;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r472}, %rd645;
	}
	shf.r.wrap.b32 	%r473, %r472, %r471, 28;
	shf.r.wrap.b32 	%r474, %r471, %r472, 28;
	mov.b64 	%rd676, {%r474, %r473};
	shf.l.wrap.b32 	%r475, %r471, %r472, 30;
	shf.l.wrap.b32 	%r476, %r472, %r471, 30;
	mov.b64 	%rd677, {%r476, %r475};
	xor.b64  	%rd678, %rd676, %rd677;
	shf.l.wrap.b32 	%r477, %r471, %r472, 25;
	shf.l.wrap.b32 	%r478, %r472, %r471, 25;
	mov.b64 	%rd679, {%r478, %r477};
	xor.b64  	%rd680, %rd678, %rd679;
	add.s64 	%rd681, %rd680, %rd675;
	add.s64 	%rd682, %rd681, %rd670;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r479,%dummy}, %rd1116;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r480}, %rd1116;
	}
	shf.r.wrap.b32 	%r481, %r480, %r479, 19;
	shf.r.wrap.b32 	%r482, %r479, %r480, 19;
	mov.b64 	%rd683, {%r482, %r481};
	shf.l.wrap.b32 	%r483, %r479, %r480, 3;
	shf.l.wrap.b32 	%r484, %r480, %r479, 3;
	mov.b64 	%rd684, {%r484, %r483};
	xor.b64  	%rd685, %rd683, %rd684;
	shr.u64 	%rd686, %rd1116, 6;
	xor.b64  	%rd687, %rd685, %rd686;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r485,%dummy}, %rd1113;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r486}, %rd1113;
	}
	shf.r.wrap.b32 	%r487, %r486, %r485, 8;
	shf.r.wrap.b32 	%r488, %r485, %r486, 8;
	mov.b64 	%rd688, {%r488, %r487};
	shf.r.wrap.b32 	%r489, %r486, %r485, 1;
	shf.r.wrap.b32 	%r490, %r485, %r486, 1;
	mov.b64 	%rd689, {%r490, %r489};
	xor.b64  	%rd690, %rd689, %rd688;
	shr.u64 	%rd691, %rd1113, 7;
	xor.b64  	%rd692, %rd690, %rd691;
	add.s64 	%rd693, %rd687, %rd1114;
	add.s64 	%rd694, %rd693, %rd1105;
	add.s64 	%rd1114, %rd694, %rd692;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r491,%dummy}, %rd671;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r492}, %rd671;
	}
	shf.r.wrap.b32 	%r493, %r492, %r491, 14;
	shf.r.wrap.b32 	%r494, %r491, %r492, 14;
	mov.b64 	%rd695, {%r494, %r493};
	shf.r.wrap.b32 	%r495, %r492, %r491, 18;
	shf.r.wrap.b32 	%r496, %r491, %r492, 18;
	mov.b64 	%rd696, {%r496, %r495};
	xor.b64  	%rd697, %rd695, %rd696;
	shf.l.wrap.b32 	%r497, %r491, %r492, 23;
	shf.l.wrap.b32 	%r498, %r492, %r491, 23;
	mov.b64 	%rd698, {%r498, %r497};
	xor.b64  	%rd699, %rd697, %rd698;
	xor.b64  	%rd700, %rd634, %rd597;
	and.b64  	%rd701, %rd671, %rd700;
	xor.b64  	%rd702, %rd701, %rd597;
	add.s64 	%rd703, %rd702, %rd560;
	add.s64 	%rd704, %rd703, %rd699;
	ld.const.u64 	%rd705, [%rd1103+168];
	add.s64 	%rd706, %rd704, %rd705;
	add.s64 	%rd707, %rd706, %rd1114;
	add.s64 	%rd708, %rd707, %rd571;
	and.b64  	%rd709, %rd682, %rd645;
	or.b64  	%rd710, %rd682, %rd645;
	and.b64  	%rd711, %rd710, %rd608;
	or.b64  	%rd712, %rd711, %rd709;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r499,%dummy}, %rd682;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r500}, %rd682;
	}
	shf.r.wrap.b32 	%r501, %r500, %r499, 28;
	shf.r.wrap.b32 	%r502, %r499, %r500, 28;
	mov.b64 	%rd713, {%r502, %r501};
	shf.l.wrap.b32 	%r503, %r499, %r500, 30;
	shf.l.wrap.b32 	%r504, %r500, %r499, 30;
	mov.b64 	%rd714, {%r504, %r503};
	xor.b64  	%rd715, %rd713, %rd714;
	shf.l.wrap.b32 	%r505, %r499, %r500, 25;
	shf.l.wrap.b32 	%r506, %r500, %r499, 25;
	mov.b64 	%rd716, {%r506, %r505};
	xor.b64  	%rd717, %rd715, %rd716;
	add.s64 	%rd718, %rd717, %rd712;
	add.s64 	%rd719, %rd718, %rd707;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r507,%dummy}, %rd1115;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r508}, %rd1115;
	}
	shf.r.wrap.b32 	%r509, %r508, %r507, 19;
	shf.r.wrap.b32 	%r510, %r507, %r508, 19;
	mov.b64 	%rd720, {%r510, %r509};
	shf.l.wrap.b32 	%r511, %r507, %r508, 3;
	shf.l.wrap.b32 	%r512, %r508, %r507, 3;
	mov.b64 	%rd721, {%r512, %r511};
	xor.b64  	%rd722, %rd720, %rd721;
	shr.u64 	%rd723, %rd1115, 6;
	xor.b64  	%rd724, %rd722, %rd723;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r513,%dummy}, %rd1112;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r514}, %rd1112;
	}
	shf.r.wrap.b32 	%r515, %r514, %r513, 8;
	shf.r.wrap.b32 	%r516, %r513, %r514, 8;
	mov.b64 	%rd725, {%r516, %r515};
	shf.r.wrap.b32 	%r517, %r514, %r513, 1;
	shf.r.wrap.b32 	%r518, %r513, %r514, 1;
	mov.b64 	%rd726, {%r518, %r517};
	xor.b64  	%rd727, %rd726, %rd725;
	shr.u64 	%rd728, %rd1112, 7;
	xor.b64  	%rd729, %rd727, %rd728;
	add.s64 	%rd730, %rd724, %rd1113;
	add.s64 	%rd731, %rd730, %rd1104;
	add.s64 	%rd1113, %rd731, %rd729;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r519,%dummy}, %rd708;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r520}, %rd708;
	}
	shf.r.wrap.b32 	%r521, %r520, %r519, 14;
	shf.r.wrap.b32 	%r522, %r519, %r520, 14;
	mov.b64 	%rd732, {%r522, %r521};
	shf.r.wrap.b32 	%r523, %r520, %r519, 18;
	shf.r.wrap.b32 	%r524, %r519, %r520, 18;
	mov.b64 	%rd733, {%r524, %r523};
	xor.b64  	%rd734, %rd732, %rd733;
	shf.l.wrap.b32 	%r525, %r519, %r520, 23;
	shf.l.wrap.b32 	%r526, %r520, %r519, 23;
	mov.b64 	%rd735, {%r526, %r525};
	xor.b64  	%rd736, %rd734, %rd735;
	xor.b64  	%rd737, %rd671, %rd634;
	and.b64  	%rd738, %rd708, %rd737;
	xor.b64  	%rd739, %rd738, %rd634;
	add.s64 	%rd740, %rd739, %rd597;
	add.s64 	%rd741, %rd740, %rd736;
	ld.const.u64 	%rd742, [%rd1103+176];
	add.s64 	%rd743, %rd741, %rd742;
	add.s64 	%rd744, %rd743, %rd1113;
	add.s64 	%rd745, %rd744, %rd608;
	and.b64  	%rd746, %rd719, %rd682;
	or.b64  	%rd747, %rd719, %rd682;
	and.b64  	%rd748, %rd747, %rd645;
	or.b64  	%rd749, %rd748, %rd746;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r527,%dummy}, %rd719;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r528}, %rd719;
	}
	shf.r.wrap.b32 	%r529, %r528, %r527, 28;
	shf.r.wrap.b32 	%r530, %r527, %r528, 28;
	mov.b64 	%rd750, {%r530, %r529};
	shf.l.wrap.b32 	%r531, %r527, %r528, 30;
	shf.l.wrap.b32 	%r532, %r528, %r527, 30;
	mov.b64 	%rd751, {%r532, %r531};
	xor.b64  	%rd752, %rd750, %rd751;
	shf.l.wrap.b32 	%r533, %r527, %r528, 25;
	shf.l.wrap.b32 	%r534, %r528, %r527, 25;
	mov.b64 	%rd753, {%r534, %r533};
	xor.b64  	%rd754, %rd752, %rd753;
	add.s64 	%rd755, %rd754, %rd749;
	add.s64 	%rd756, %rd755, %rd744;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r535,%dummy}, %rd1114;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r536}, %rd1114;
	}
	shf.r.wrap.b32 	%r537, %r536, %r535, 19;
	shf.r.wrap.b32 	%r538, %r535, %r536, 19;
	mov.b64 	%rd757, {%r538, %r537};
	shf.l.wrap.b32 	%r539, %r535, %r536, 3;
	shf.l.wrap.b32 	%r540, %r536, %r535, 3;
	mov.b64 	%rd758, {%r540, %r539};
	xor.b64  	%rd759, %rd757, %rd758;
	shr.u64 	%rd760, %rd1114, 6;
	xor.b64  	%rd761, %rd759, %rd760;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r541,%dummy}, %rd1111;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r542}, %rd1111;
	}
	shf.r.wrap.b32 	%r543, %r542, %r541, 8;
	shf.r.wrap.b32 	%r544, %r541, %r542, 8;
	mov.b64 	%rd762, {%r544, %r543};
	shf.r.wrap.b32 	%r545, %r542, %r541, 1;
	shf.r.wrap.b32 	%r546, %r541, %r542, 1;
	mov.b64 	%rd763, {%r546, %r545};
	xor.b64  	%rd764, %rd763, %rd762;
	shr.u64 	%rd765, %rd1111, 7;
	xor.b64  	%rd766, %rd764, %rd765;
	add.s64 	%rd767, %rd761, %rd1112;
	add.s64 	%rd768, %rd767, %rd1119;
	add.s64 	%rd1112, %rd768, %rd766;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r547,%dummy}, %rd745;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r548}, %rd745;
	}
	shf.r.wrap.b32 	%r549, %r548, %r547, 14;
	shf.r.wrap.b32 	%r550, %r547, %r548, 14;
	mov.b64 	%rd769, {%r550, %r549};
	shf.r.wrap.b32 	%r551, %r548, %r547, 18;
	shf.r.wrap.b32 	%r552, %r547, %r548, 18;
	mov.b64 	%rd770, {%r552, %r551};
	xor.b64  	%rd771, %rd769, %rd770;
	shf.l.wrap.b32 	%r553, %r547, %r548, 23;
	shf.l.wrap.b32 	%r554, %r548, %r547, 23;
	mov.b64 	%rd772, {%r554, %r553};
	xor.b64  	%rd773, %rd771, %rd772;
	xor.b64  	%rd774, %rd708, %rd671;
	and.b64  	%rd775, %rd745, %rd774;
	xor.b64  	%rd776, %rd775, %rd671;
	add.s64 	%rd777, %rd776, %rd634;
	add.s64 	%rd778, %rd777, %rd773;
	ld.const.u64 	%rd779, [%rd1103+184];
	add.s64 	%rd780, %rd778, %rd779;
	add.s64 	%rd781, %rd780, %rd1112;
	add.s64 	%rd782, %rd781, %rd645;
	and.b64  	%rd783, %rd756, %rd719;
	or.b64  	%rd784, %rd756, %rd719;
	and.b64  	%rd785, %rd784, %rd682;
	or.b64  	%rd786, %rd785, %rd783;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r555,%dummy}, %rd756;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r556}, %rd756;
	}
	shf.r.wrap.b32 	%r557, %r556, %r555, 28;
	shf.r.wrap.b32 	%r558, %r555, %r556, 28;
	mov.b64 	%rd787, {%r558, %r557};
	shf.l.wrap.b32 	%r559, %r555, %r556, 30;
	shf.l.wrap.b32 	%r560, %r556, %r555, 30;
	mov.b64 	%rd788, {%r560, %r559};
	xor.b64  	%rd789, %rd787, %rd788;
	shf.l.wrap.b32 	%r561, %r555, %r556, 25;
	shf.l.wrap.b32 	%r562, %r556, %r555, 25;
	mov.b64 	%rd790, {%r562, %r561};
	xor.b64  	%rd791, %rd789, %rd790;
	add.s64 	%rd792, %rd791, %rd786;
	add.s64 	%rd793, %rd792, %rd781;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r563,%dummy}, %rd1113;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r564}, %rd1113;
	}
	shf.r.wrap.b32 	%r565, %r564, %r563, 19;
	shf.r.wrap.b32 	%r566, %r563, %r564, 19;
	mov.b64 	%rd794, {%r566, %r565};
	shf.l.wrap.b32 	%r567, %r563, %r564, 3;
	shf.l.wrap.b32 	%r568, %r564, %r563, 3;
	mov.b64 	%rd795, {%r568, %r567};
	xor.b64  	%rd796, %rd794, %rd795;
	shr.u64 	%rd797, %rd1113, 6;
	xor.b64  	%rd798, %rd796, %rd797;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r569,%dummy}, %rd1110;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r570}, %rd1110;
	}
	shf.r.wrap.b32 	%r571, %r570, %r569, 8;
	shf.r.wrap.b32 	%r572, %r569, %r570, 8;
	mov.b64 	%rd799, {%r572, %r571};
	shf.r.wrap.b32 	%r573, %r570, %r569, 1;
	shf.r.wrap.b32 	%r574, %r569, %r570, 1;
	mov.b64 	%rd800, {%r574, %r573};
	xor.b64  	%rd801, %rd800, %rd799;
	shr.u64 	%rd802, %rd1110, 7;
	xor.b64  	%rd803, %rd801, %rd802;
	add.s64 	%rd804, %rd798, %rd1111;
	add.s64 	%rd805, %rd804, %rd1118;
	add.s64 	%rd1111, %rd805, %rd803;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r575,%dummy}, %rd782;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r576}, %rd782;
	}
	shf.r.wrap.b32 	%r577, %r576, %r575, 14;
	shf.r.wrap.b32 	%r578, %r575, %r576, 14;
	mov.b64 	%rd806, {%r578, %r577};
	shf.r.wrap.b32 	%r579, %r576, %r575, 18;
	shf.r.wrap.b32 	%r580, %r575, %r576, 18;
	mov.b64 	%rd807, {%r580, %r579};
	xor.b64  	%rd808, %rd806, %rd807;
	shf.l.wrap.b32 	%r581, %r575, %r576, 23;
	shf.l.wrap.b32 	%r582, %r576, %r575, 23;
	mov.b64 	%rd809, {%r582, %r581};
	xor.b64  	%rd810, %rd808, %rd809;
	xor.b64  	%rd811, %rd745, %rd708;
	and.b64  	%rd812, %rd782, %rd811;
	xor.b64  	%rd813, %rd812, %rd708;
	add.s64 	%rd814, %rd813, %rd671;
	add.s64 	%rd815, %rd814, %rd810;
	ld.const.u64 	%rd816, [%rd1103+192];
	add.s64 	%rd817, %rd815, %rd816;
	add.s64 	%rd818, %rd817, %rd1111;
	add.s64 	%rd819, %rd818, %rd682;
	and.b64  	%rd820, %rd793, %rd756;
	or.b64  	%rd821, %rd793, %rd756;
	and.b64  	%rd822, %rd821, %rd719;
	or.b64  	%rd823, %rd822, %rd820;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r583,%dummy}, %rd793;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r584}, %rd793;
	}
	shf.r.wrap.b32 	%r585, %r584, %r583, 28;
	shf.r.wrap.b32 	%r586, %r583, %r584, 28;
	mov.b64 	%rd824, {%r586, %r585};
	shf.l.wrap.b32 	%r587, %r583, %r584, 30;
	shf.l.wrap.b32 	%r588, %r584, %r583, 30;
	mov.b64 	%rd825, {%r588, %r587};
	xor.b64  	%rd826, %rd824, %rd825;
	shf.l.wrap.b32 	%r589, %r583, %r584, 25;
	shf.l.wrap.b32 	%r590, %r584, %r583, 25;
	mov.b64 	%rd827, {%r590, %r589};
	xor.b64  	%rd828, %rd826, %rd827;
	add.s64 	%rd829, %rd828, %rd823;
	add.s64 	%rd830, %rd829, %rd818;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r591,%dummy}, %rd1112;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r592}, %rd1112;
	}
	shf.r.wrap.b32 	%r593, %r592, %r591, 19;
	shf.r.wrap.b32 	%r594, %r591, %r592, 19;
	mov.b64 	%rd831, {%r594, %r593};
	shf.l.wrap.b32 	%r595, %r591, %r592, 3;
	shf.l.wrap.b32 	%r596, %r592, %r591, 3;
	mov.b64 	%rd832, {%r596, %r595};
	xor.b64  	%rd833, %rd831, %rd832;
	shr.u64 	%rd834, %rd1112, 6;
	xor.b64  	%rd835, %rd833, %rd834;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r597,%dummy}, %rd1109;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r598}, %rd1109;
	}
	shf.r.wrap.b32 	%r599, %r598, %r597, 8;
	shf.r.wrap.b32 	%r600, %r597, %r598, 8;
	mov.b64 	%rd836, {%r600, %r599};
	shf.r.wrap.b32 	%r601, %r598, %r597, 1;
	shf.r.wrap.b32 	%r602, %r597, %r598, 1;
	mov.b64 	%rd837, {%r602, %r601};
	xor.b64  	%rd838, %rd837, %rd836;
	shr.u64 	%rd839, %rd1109, 7;
	xor.b64  	%rd840, %rd838, %rd839;
	add.s64 	%rd841, %rd835, %rd1110;
	add.s64 	%rd842, %rd841, %rd1117;
	add.s64 	%rd1110, %rd842, %rd840;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r603,%dummy}, %rd819;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r604}, %rd819;
	}
	shf.r.wrap.b32 	%r605, %r604, %r603, 14;
	shf.r.wrap.b32 	%r606, %r603, %r604, 14;
	mov.b64 	%rd843, {%r606, %r605};
	shf.r.wrap.b32 	%r607, %r604, %r603, 18;
	shf.r.wrap.b32 	%r608, %r603, %r604, 18;
	mov.b64 	%rd844, {%r608, %r607};
	xor.b64  	%rd845, %rd843, %rd844;
	shf.l.wrap.b32 	%r609, %r603, %r604, 23;
	shf.l.wrap.b32 	%r610, %r604, %r603, 23;
	mov.b64 	%rd846, {%r610, %r609};
	xor.b64  	%rd847, %rd845, %rd846;
	xor.b64  	%rd848, %rd782, %rd745;
	and.b64  	%rd849, %rd819, %rd848;
	xor.b64  	%rd850, %rd849, %rd745;
	add.s64 	%rd851, %rd850, %rd708;
	add.s64 	%rd852, %rd851, %rd847;
	ld.const.u64 	%rd853, [%rd1103+200];
	add.s64 	%rd854, %rd852, %rd853;
	add.s64 	%rd855, %rd854, %rd1110;
	add.s64 	%rd856, %rd855, %rd719;
	and.b64  	%rd857, %rd830, %rd793;
	or.b64  	%rd858, %rd830, %rd793;
	and.b64  	%rd859, %rd858, %rd756;
	or.b64  	%rd860, %rd859, %rd857;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r611,%dummy}, %rd830;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r612}, %rd830;
	}
	shf.r.wrap.b32 	%r613, %r612, %r611, 28;
	shf.r.wrap.b32 	%r614, %r611, %r612, 28;
	mov.b64 	%rd861, {%r614, %r613};
	shf.l.wrap.b32 	%r615, %r611, %r612, 30;
	shf.l.wrap.b32 	%r616, %r612, %r611, 30;
	mov.b64 	%rd862, {%r616, %r615};
	xor.b64  	%rd863, %rd861, %rd862;
	shf.l.wrap.b32 	%r617, %r611, %r612, 25;
	shf.l.wrap.b32 	%r618, %r612, %r611, 25;
	mov.b64 	%rd864, {%r618, %r617};
	xor.b64  	%rd865, %rd863, %rd864;
	add.s64 	%rd866, %rd865, %rd860;
	add.s64 	%rd867, %rd866, %rd855;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r619,%dummy}, %rd1111;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r620}, %rd1111;
	}
	shf.r.wrap.b32 	%r621, %r620, %r619, 19;
	shf.r.wrap.b32 	%r622, %r619, %r620, 19;
	mov.b64 	%rd868, {%r622, %r621};
	shf.l.wrap.b32 	%r623, %r619, %r620, 3;
	shf.l.wrap.b32 	%r624, %r620, %r619, 3;
	mov.b64 	%rd869, {%r624, %r623};
	xor.b64  	%rd870, %rd868, %rd869;
	shr.u64 	%rd871, %rd1111, 6;
	xor.b64  	%rd872, %rd870, %rd871;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r625,%dummy}, %rd1108;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r626}, %rd1108;
	}
	shf.r.wrap.b32 	%r627, %r626, %r625, 8;
	shf.r.wrap.b32 	%r628, %r625, %r626, 8;
	mov.b64 	%rd873, {%r628, %r627};
	shf.r.wrap.b32 	%r629, %r626, %r625, 1;
	shf.r.wrap.b32 	%r630, %r625, %r626, 1;
	mov.b64 	%rd874, {%r630, %r629};
	xor.b64  	%rd875, %rd874, %rd873;
	shr.u64 	%rd876, %rd1108, 7;
	xor.b64  	%rd877, %rd875, %rd876;
	add.s64 	%rd878, %rd872, %rd1109;
	add.s64 	%rd879, %rd878, %rd1116;
	add.s64 	%rd1109, %rd879, %rd877;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r631,%dummy}, %rd856;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r632}, %rd856;
	}
	shf.r.wrap.b32 	%r633, %r632, %r631, 14;
	shf.r.wrap.b32 	%r634, %r631, %r632, 14;
	mov.b64 	%rd880, {%r634, %r633};
	shf.r.wrap.b32 	%r635, %r632, %r631, 18;
	shf.r.wrap.b32 	%r636, %r631, %r632, 18;
	mov.b64 	%rd881, {%r636, %r635};
	xor.b64  	%rd882, %rd880, %rd881;
	shf.l.wrap.b32 	%r637, %r631, %r632, 23;
	shf.l.wrap.b32 	%r638, %r632, %r631, 23;
	mov.b64 	%rd883, {%r638, %r637};
	xor.b64  	%rd884, %rd882, %rd883;
	xor.b64  	%rd885, %rd819, %rd782;
	and.b64  	%rd886, %rd856, %rd885;
	xor.b64  	%rd887, %rd886, %rd782;
	add.s64 	%rd888, %rd887, %rd745;
	add.s64 	%rd889, %rd888, %rd884;
	ld.const.u64 	%rd890, [%rd1103+208];
	add.s64 	%rd891, %rd889, %rd890;
	add.s64 	%rd892, %rd891, %rd1109;
	add.s64 	%rd893, %rd892, %rd756;
	and.b64  	%rd894, %rd867, %rd830;
	or.b64  	%rd895, %rd867, %rd830;
	and.b64  	%rd896, %rd895, %rd793;
	or.b64  	%rd897, %rd896, %rd894;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r639,%dummy}, %rd867;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r640}, %rd867;
	}
	shf.r.wrap.b32 	%r641, %r640, %r639, 28;
	shf.r.wrap.b32 	%r642, %r639, %r640, 28;
	mov.b64 	%rd898, {%r642, %r641};
	shf.l.wrap.b32 	%r643, %r639, %r640, 30;
	shf.l.wrap.b32 	%r644, %r640, %r639, 30;
	mov.b64 	%rd899, {%r644, %r643};
	xor.b64  	%rd900, %rd898, %rd899;
	shf.l.wrap.b32 	%r645, %r639, %r640, 25;
	shf.l.wrap.b32 	%r646, %r640, %r639, 25;
	mov.b64 	%rd901, {%r646, %r645};
	xor.b64  	%rd902, %rd900, %rd901;
	add.s64 	%rd903, %rd902, %rd897;
	add.s64 	%rd904, %rd903, %rd892;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r647,%dummy}, %rd1110;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r648}, %rd1110;
	}
	shf.r.wrap.b32 	%r649, %r648, %r647, 19;
	shf.r.wrap.b32 	%r650, %r647, %r648, 19;
	mov.b64 	%rd905, {%r650, %r649};
	shf.l.wrap.b32 	%r651, %r647, %r648, 3;
	shf.l.wrap.b32 	%r652, %r648, %r647, 3;
	mov.b64 	%rd906, {%r652, %r651};
	xor.b64  	%rd907, %rd905, %rd906;
	shr.u64 	%rd908, %rd1110, 6;
	xor.b64  	%rd909, %rd907, %rd908;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r653,%dummy}, %rd1107;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r654}, %rd1107;
	}
	shf.r.wrap.b32 	%r655, %r654, %r653, 8;
	shf.r.wrap.b32 	%r656, %r653, %r654, 8;
	mov.b64 	%rd910, {%r656, %r655};
	shf.r.wrap.b32 	%r657, %r654, %r653, 1;
	shf.r.wrap.b32 	%r658, %r653, %r654, 1;
	mov.b64 	%rd911, {%r658, %r657};
	xor.b64  	%rd912, %rd911, %rd910;
	shr.u64 	%rd913, %rd1107, 7;
	xor.b64  	%rd914, %rd912, %rd913;
	add.s64 	%rd915, %rd909, %rd1108;
	add.s64 	%rd916, %rd915, %rd1115;
	add.s64 	%rd1108, %rd916, %rd914;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r659,%dummy}, %rd893;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r660}, %rd893;
	}
	shf.r.wrap.b32 	%r661, %r660, %r659, 14;
	shf.r.wrap.b32 	%r662, %r659, %r660, 14;
	mov.b64 	%rd917, {%r662, %r661};
	shf.r.wrap.b32 	%r663, %r660, %r659, 18;
	shf.r.wrap.b32 	%r664, %r659, %r660, 18;
	mov.b64 	%rd918, {%r664, %r663};
	xor.b64  	%rd919, %rd917, %rd918;
	shf.l.wrap.b32 	%r665, %r659, %r660, 23;
	shf.l.wrap.b32 	%r666, %r660, %r659, 23;
	mov.b64 	%rd920, {%r666, %r665};
	xor.b64  	%rd921, %rd919, %rd920;
	xor.b64  	%rd922, %rd856, %rd819;
	and.b64  	%rd923, %rd893, %rd922;
	xor.b64  	%rd924, %rd923, %rd819;
	add.s64 	%rd925, %rd924, %rd782;
	add.s64 	%rd926, %rd925, %rd921;
	ld.const.u64 	%rd927, [%rd1103+216];
	add.s64 	%rd928, %rd926, %rd927;
	add.s64 	%rd929, %rd928, %rd1108;
	add.s64 	%rd930, %rd929, %rd793;
	and.b64  	%rd931, %rd904, %rd867;
	or.b64  	%rd932, %rd904, %rd867;
	and.b64  	%rd933, %rd932, %rd830;
	or.b64  	%rd934, %rd933, %rd931;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r667,%dummy}, %rd904;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r668}, %rd904;
	}
	shf.r.wrap.b32 	%r669, %r668, %r667, 28;
	shf.r.wrap.b32 	%r670, %r667, %r668, 28;
	mov.b64 	%rd935, {%r670, %r669};
	shf.l.wrap.b32 	%r671, %r667, %r668, 30;
	shf.l.wrap.b32 	%r672, %r668, %r667, 30;
	mov.b64 	%rd936, {%r672, %r671};
	xor.b64  	%rd937, %rd935, %rd936;
	shf.l.wrap.b32 	%r673, %r667, %r668, 25;
	shf.l.wrap.b32 	%r674, %r668, %r667, 25;
	mov.b64 	%rd938, {%r674, %r673};
	xor.b64  	%rd939, %rd937, %rd938;
	add.s64 	%rd940, %rd939, %rd934;
	add.s64 	%rd941, %rd940, %rd929;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r675,%dummy}, %rd1109;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r676}, %rd1109;
	}
	shf.r.wrap.b32 	%r677, %r676, %r675, 19;
	shf.r.wrap.b32 	%r678, %r675, %r676, 19;
	mov.b64 	%rd942, {%r678, %r677};
	shf.l.wrap.b32 	%r679, %r675, %r676, 3;
	shf.l.wrap.b32 	%r680, %r676, %r675, 3;
	mov.b64 	%rd943, {%r680, %r679};
	xor.b64  	%rd944, %rd942, %rd943;
	shr.u64 	%rd945, %rd1109, 6;
	xor.b64  	%rd946, %rd944, %rd945;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r681,%dummy}, %rd1106;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r682}, %rd1106;
	}
	shf.r.wrap.b32 	%r683, %r682, %r681, 8;
	shf.r.wrap.b32 	%r684, %r681, %r682, 8;
	mov.b64 	%rd947, {%r684, %r683};
	shf.r.wrap.b32 	%r685, %r682, %r681, 1;
	shf.r.wrap.b32 	%r686, %r681, %r682, 1;
	mov.b64 	%rd948, {%r686, %r685};
	xor.b64  	%rd949, %rd948, %rd947;
	shr.u64 	%rd950, %rd1106, 7;
	xor.b64  	%rd951, %rd949, %rd950;
	add.s64 	%rd952, %rd946, %rd1107;
	add.s64 	%rd953, %rd952, %rd1114;
	add.s64 	%rd1107, %rd953, %rd951;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r687,%dummy}, %rd930;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r688}, %rd930;
	}
	shf.r.wrap.b32 	%r689, %r688, %r687, 14;
	shf.r.wrap.b32 	%r690, %r687, %r688, 14;
	mov.b64 	%rd954, {%r690, %r689};
	shf.r.wrap.b32 	%r691, %r688, %r687, 18;
	shf.r.wrap.b32 	%r692, %r687, %r688, 18;
	mov.b64 	%rd955, {%r692, %r691};
	xor.b64  	%rd956, %rd954, %rd955;
	shf.l.wrap.b32 	%r693, %r687, %r688, 23;
	shf.l.wrap.b32 	%r694, %r688, %r687, 23;
	mov.b64 	%rd957, {%r694, %r693};
	xor.b64  	%rd958, %rd956, %rd957;
	xor.b64  	%rd959, %rd893, %rd856;
	and.b64  	%rd960, %rd930, %rd959;
	xor.b64  	%rd961, %rd960, %rd856;
	add.s64 	%rd962, %rd961, %rd819;
	add.s64 	%rd963, %rd962, %rd958;
	ld.const.u64 	%rd964, [%rd1103+224];
	add.s64 	%rd965, %rd963, %rd964;
	add.s64 	%rd966, %rd965, %rd1107;
	add.s64 	%rd1127, %rd966, %rd830;
	and.b64  	%rd967, %rd941, %rd904;
	or.b64  	%rd968, %rd941, %rd904;
	and.b64  	%rd969, %rd968, %rd867;
	or.b64  	%rd970, %rd969, %rd967;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r695,%dummy}, %rd941;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r696}, %rd941;
	}
	shf.r.wrap.b32 	%r697, %r696, %r695, 28;
	shf.r.wrap.b32 	%r698, %r695, %r696, 28;
	mov.b64 	%rd971, {%r698, %r697};
	shf.l.wrap.b32 	%r699, %r695, %r696, 30;
	shf.l.wrap.b32 	%r700, %r696, %r695, 30;
	mov.b64 	%rd972, {%r700, %r699};
	xor.b64  	%rd973, %rd971, %rd972;
	shf.l.wrap.b32 	%r701, %r695, %r696, 25;
	shf.l.wrap.b32 	%r702, %r696, %r695, 25;
	mov.b64 	%rd974, {%r702, %r701};
	xor.b64  	%rd975, %rd973, %rd974;
	add.s64 	%rd976, %rd975, %rd970;
	add.s64 	%rd1123, %rd976, %rd966;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r703,%dummy}, %rd1108;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r704}, %rd1108;
	}
	shf.r.wrap.b32 	%r705, %r704, %r703, 19;
	shf.r.wrap.b32 	%r706, %r703, %r704, 19;
	mov.b64 	%rd977, {%r706, %r705};
	shf.l.wrap.b32 	%r707, %r703, %r704, 3;
	shf.l.wrap.b32 	%r708, %r704, %r703, 3;
	mov.b64 	%rd978, {%r708, %r707};
	xor.b64  	%rd979, %rd977, %rd978;
	shr.u64 	%rd980, %rd1108, 6;
	xor.b64  	%rd981, %rd979, %rd980;
	shf.r.wrap.b32 	%r709, %r339, %r340, 8;
	shf.r.wrap.b32 	%r710, %r340, %r339, 8;
	mov.b64 	%rd982, {%r710, %r709};
	shf.r.wrap.b32 	%r711, %r339, %r340, 1;
	shf.r.wrap.b32 	%r712, %r340, %r339, 1;
	mov.b64 	%rd983, {%r712, %r711};
	xor.b64  	%rd984, %rd983, %rd982;
	shr.u64 	%rd985, %rd1105, 7;
	xor.b64  	%rd986, %rd984, %rd985;
	add.s64 	%rd987, %rd981, %rd1106;
	add.s64 	%rd988, %rd987, %rd1113;
	add.s64 	%rd1106, %rd988, %rd986;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r713,%dummy}, %rd1127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r714}, %rd1127;
	}
	shf.r.wrap.b32 	%r715, %r714, %r713, 14;
	shf.r.wrap.b32 	%r716, %r713, %r714, 14;
	mov.b64 	%rd989, {%r716, %r715};
	shf.r.wrap.b32 	%r717, %r714, %r713, 18;
	shf.r.wrap.b32 	%r718, %r713, %r714, 18;
	mov.b64 	%rd990, {%r718, %r717};
	xor.b64  	%rd991, %rd989, %rd990;
	shf.l.wrap.b32 	%r719, %r713, %r714, 23;
	shf.l.wrap.b32 	%r720, %r714, %r713, 23;
	mov.b64 	%rd992, {%r720, %r719};
	xor.b64  	%rd993, %rd991, %rd992;
	xor.b64  	%rd994, %rd930, %rd893;
	and.b64  	%rd995, %rd1127, %rd994;
	xor.b64  	%rd996, %rd995, %rd893;
	add.s64 	%rd997, %rd996, %rd856;
	add.s64 	%rd998, %rd997, %rd993;
	ld.const.u64 	%rd999, [%rd1103+232];
	add.s64 	%rd1000, %rd998, %rd999;
	add.s64 	%rd1001, %rd1000, %rd1106;
	add.s64 	%rd1126, %rd1001, %rd867;
	and.b64  	%rd1002, %rd1123, %rd941;
	or.b64  	%rd1003, %rd1123, %rd941;
	and.b64  	%rd1004, %rd1003, %rd904;
	or.b64  	%rd1005, %rd1004, %rd1002;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r721,%dummy}, %rd1123;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r722}, %rd1123;
	}
	shf.r.wrap.b32 	%r723, %r722, %r721, 28;
	shf.r.wrap.b32 	%r724, %r721, %r722, 28;
	mov.b64 	%rd1006, {%r724, %r723};
	shf.l.wrap.b32 	%r725, %r721, %r722, 30;
	shf.l.wrap.b32 	%r726, %r722, %r721, 30;
	mov.b64 	%rd1007, {%r726, %r725};
	xor.b64  	%rd1008, %rd1006, %rd1007;
	shf.l.wrap.b32 	%r727, %r721, %r722, 25;
	shf.l.wrap.b32 	%r728, %r722, %r721, 25;
	mov.b64 	%rd1009, {%r728, %r727};
	xor.b64  	%rd1010, %rd1008, %rd1009;
	add.s64 	%rd1011, %rd1010, %rd1005;
	add.s64 	%rd1122, %rd1011, %rd1001;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r729,%dummy}, %rd1107;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r730}, %rd1107;
	}
	shf.r.wrap.b32 	%r731, %r730, %r729, 19;
	shf.r.wrap.b32 	%r732, %r729, %r730, 19;
	mov.b64 	%rd1012, {%r732, %r731};
	shf.l.wrap.b32 	%r733, %r729, %r730, 3;
	shf.l.wrap.b32 	%r734, %r730, %r729, 3;
	mov.b64 	%rd1013, {%r734, %r733};
	xor.b64  	%rd1014, %rd1012, %rd1013;
	shr.u64 	%rd1015, %rd1107, 6;
	xor.b64  	%rd1016, %rd1014, %rd1015;
	shf.r.wrap.b32 	%r735, %r367, %r368, 8;
	shf.r.wrap.b32 	%r736, %r368, %r367, 8;
	mov.b64 	%rd1017, {%r736, %r735};
	shf.r.wrap.b32 	%r737, %r367, %r368, 1;
	shf.r.wrap.b32 	%r738, %r368, %r367, 1;
	mov.b64 	%rd1018, {%r738, %r737};
	xor.b64  	%rd1019, %rd1018, %rd1017;
	shr.u64 	%rd1020, %rd1104, 7;
	xor.b64  	%rd1021, %rd1019, %rd1020;
	add.s64 	%rd1022, %rd1016, %rd1105;
	add.s64 	%rd1023, %rd1022, %rd1112;
	add.s64 	%rd1105, %rd1023, %rd1021;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r739,%dummy}, %rd1126;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r740}, %rd1126;
	}
	shf.r.wrap.b32 	%r741, %r740, %r739, 14;
	shf.r.wrap.b32 	%r742, %r739, %r740, 14;
	mov.b64 	%rd1024, {%r742, %r741};
	shf.r.wrap.b32 	%r743, %r740, %r739, 18;
	shf.r.wrap.b32 	%r744, %r739, %r740, 18;
	mov.b64 	%rd1025, {%r744, %r743};
	xor.b64  	%rd1026, %rd1024, %rd1025;
	shf.l.wrap.b32 	%r745, %r739, %r740, 23;
	shf.l.wrap.b32 	%r746, %r740, %r739, 23;
	mov.b64 	%rd1027, {%r746, %r745};
	xor.b64  	%rd1028, %rd1026, %rd1027;
	xor.b64  	%rd1029, %rd1127, %rd930;
	and.b64  	%rd1030, %rd1126, %rd1029;
	xor.b64  	%rd1031, %rd1030, %rd930;
	add.s64 	%rd1032, %rd1031, %rd893;
	add.s64 	%rd1033, %rd1032, %rd1028;
	ld.const.u64 	%rd1034, [%rd1103+240];
	add.s64 	%rd1035, %rd1033, %rd1034;
	add.s64 	%rd1036, %rd1035, %rd1105;
	add.s64 	%rd1125, %rd1036, %rd904;
	and.b64  	%rd1037, %rd1122, %rd1123;
	or.b64  	%rd1038, %rd1122, %rd1123;
	and.b64  	%rd1039, %rd1038, %rd941;
	or.b64  	%rd1040, %rd1039, %rd1037;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r747,%dummy}, %rd1122;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r748}, %rd1122;
	}
	shf.r.wrap.b32 	%r749, %r748, %r747, 28;
	shf.r.wrap.b32 	%r750, %r747, %r748, 28;
	mov.b64 	%rd1041, {%r750, %r749};
	shf.l.wrap.b32 	%r751, %r747, %r748, 30;
	shf.l.wrap.b32 	%r752, %r748, %r747, 30;
	mov.b64 	%rd1042, {%r752, %r751};
	xor.b64  	%rd1043, %rd1041, %rd1042;
	shf.l.wrap.b32 	%r753, %r747, %r748, 25;
	shf.l.wrap.b32 	%r754, %r748, %r747, 25;
	mov.b64 	%rd1044, {%r754, %r753};
	xor.b64  	%rd1045, %rd1043, %rd1044;
	add.s64 	%rd1046, %rd1045, %rd1040;
	add.s64 	%rd1121, %rd1046, %rd1036;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r755,%dummy}, %rd1106;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r756}, %rd1106;
	}
	shf.r.wrap.b32 	%r757, %r756, %r755, 19;
	shf.r.wrap.b32 	%r758, %r755, %r756, 19;
	mov.b64 	%rd1047, {%r758, %r757};
	shf.l.wrap.b32 	%r759, %r755, %r756, 3;
	shf.l.wrap.b32 	%r760, %r756, %r755, 3;
	mov.b64 	%rd1048, {%r760, %r759};
	xor.b64  	%rd1049, %rd1047, %rd1048;
	shr.u64 	%rd1050, %rd1106, 6;
	xor.b64  	%rd1051, %rd1049, %rd1050;
	shf.r.wrap.b32 	%r761, %r396, %r395, 1;
	shf.r.wrap.b32 	%r762, %r395, %r396, 1;
	mov.b64 	%rd1052, {%r762, %r761};
	shf.r.wrap.b32 	%r763, %r396, %r395, 8;
	shf.r.wrap.b32 	%r764, %r395, %r396, 8;
	mov.b64 	%rd1053, {%r764, %r763};
	xor.b64  	%rd1054, %rd1052, %rd1053;
	shr.u64 	%rd1055, %rd1119, 7;
	xor.b64  	%rd1056, %rd1054, %rd1055;
	add.s64 	%rd1057, %rd1051, %rd1104;
	add.s64 	%rd1058, %rd1057, %rd1111;
	add.s64 	%rd1104, %rd1058, %rd1056;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r765,%dummy}, %rd1125;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r766}, %rd1125;
	}
	shf.r.wrap.b32 	%r767, %r766, %r765, 14;
	shf.r.wrap.b32 	%r768, %r765, %r766, 14;
	mov.b64 	%rd1059, {%r768, %r767};
	shf.r.wrap.b32 	%r769, %r766, %r765, 18;
	shf.r.wrap.b32 	%r770, %r765, %r766, 18;
	mov.b64 	%rd1060, {%r770, %r769};
	xor.b64  	%rd1061, %rd1059, %rd1060;
	shf.l.wrap.b32 	%r771, %r765, %r766, 23;
	shf.l.wrap.b32 	%r772, %r766, %r765, 23;
	mov.b64 	%rd1062, {%r772, %r771};
	xor.b64  	%rd1063, %rd1061, %rd1062;
	xor.b64  	%rd1064, %rd1126, %rd1127;
	and.b64  	%rd1065, %rd1125, %rd1064;
	xor.b64  	%rd1066, %rd1065, %rd1127;
	add.s64 	%rd1067, %rd1066, %rd930;
	add.s64 	%rd1068, %rd1067, %rd1063;
	ld.const.u64 	%rd1069, [%rd1103+248];
	add.s64 	%rd1070, %rd1068, %rd1069;
	add.s64 	%rd1071, %rd1070, %rd1104;
	add.s64 	%rd1124, %rd1071, %rd941;
	and.b64  	%rd1072, %rd1121, %rd1122;
	or.b64  	%rd1073, %rd1121, %rd1122;
	and.b64  	%rd1074, %rd1073, %rd1123;
	or.b64  	%rd1075, %rd1074, %rd1072;
	{
	.reg .b32 %dummy;
	mov.b64 	{%r773,%dummy}, %rd1121;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r774}, %rd1121;
	}
	shf.r.wrap.b32 	%r775, %r774, %r773, 28;
	shf.r.wrap.b32 	%r776, %r773, %r774, 28;
	mov.b64 	%rd1076, {%r776, %r775};
	shf.l.wrap.b32 	%r777, %r773, %r774, 30;
	shf.l.wrap.b32 	%r778, %r774, %r773, 30;
	mov.b64 	%rd1077, {%r778, %r777};
	xor.b64  	%rd1078, %rd1076, %rd1077;
	shf.l.wrap.b32 	%r779, %r773, %r774, 25;
	shf.l.wrap.b32 	%r780, %r774, %r773, 25;
	mov.b64 	%rd1079, {%r780, %r779};
	xor.b64  	%rd1080, %rd1078, %rd1079;
	add.s64 	%rd1081, %rd1080, %rd1075;
	add.s64 	%rd1120, %rd1081, %rd1071;
	add.s32 	%r810, %r810, 16;
	setp.ne.s32 	%p3, %r810, 64;
	mov.u64 	%rd1103, %rd82;
	@%p3 bra 	$L__BB3_4;

	ld.param.u64 	%rd1099, [kernel_crypt_xsha_param_7];
	add.s64 	%rd83, %rd1120, 7640891576956012808;
	shr.u64 	%rd1082, %rd83, 32;
	add.s64 	%rd1083, %rd1121, -4942790177534073029;
	shr.u64 	%rd1084, %rd1083, 32;
	xor.b64  	%rd1085, %rd1084, %rd83;
	xor.b64  	%rd1086, %rd1085, %rd1082;
	cvt.u32.u64 	%r781, %rd1086;
	and.b64  	%rd1087, %rd1086, 134217696;
	cvt.u32.u64 	%r782, %rd1083;
	add.s32 	%r783, %r781, %r782;
	cvt.u32.u64 	%r784, %rd1082;
	xor.b32  	%r8, %r783, %r784;
	shr.u64 	%rd1088, %rd1087, 3;
	add.s64 	%rd1089, %rd1099, %rd1088;
	and.b32  	%r785, %r781, 31;
	mov.u32 	%r786, 1;
	shl.b32 	%r787, %r786, %r785;
	ld.global.nc.u32 	%r788, [%rd1089];
	and.b32  	%r789, %r788, %r787;
	setp.eq.s32 	%p4, %r789, 0;
	@%p4 bra 	$L__BB3_8;

	ld.param.u64 	%rd1100, [kernel_crypt_xsha_param_7];
	and.b32  	%r790, %r8, 134217696;
	shr.u32 	%r791, %r790, 5;
	mul.wide.u32 	%rd1090, %r791, 4;
	add.s64 	%rd1091, %rd1100, %rd1090;
	and.b32  	%r792, %r8, 31;
	shl.b32 	%r794, %r786, %r792;
	ld.global.nc.u32 	%r795, [%rd1091];
	and.b32  	%r796, %r795, %r794;
	setp.eq.s32 	%p5, %r796, 0;
	@%p5 bra 	$L__BB3_8;

	mov.b32 	%r808, %envreg3;
	mov.u32 	%r807, %tid.x;
	add.s32 	%r806, %r807, %r808;
	mov.u32 	%r805, %ctaid.x;
	mov.u32 	%r804, %ntid.x;
	mad.lo.s32 	%r803, %r804, %r805, %r806;
	ld.param.u64 	%rd1098, [kernel_crypt_xsha_param_6];
	atom.global.add.u32 	%r797, [%rd1098], 1;
	mul.lo.s32 	%r798, %r797, 3;
	add.s32 	%r799, %r798, 1;
	mul.wide.u32 	%rd1092, %r799, 4;
	add.s64 	%rd1093, %rd1098, %rd1092;
	st.volatile.global.u32 	[%rd1093], %r803;
	add.s32 	%r800, %r798, 2;
	mul.wide.u32 	%rd1094, %r800, 4;
	add.s64 	%rd1095, %rd1098, %rd1094;
	mov.u32 	%r801, 0;
	st.volatile.global.u32 	[%rd1095], %r801;
	add.s32 	%r802, %r798, 3;
	mul.wide.u32 	%rd1096, %r802, 4;
	add.s64 	%rd1097, %rd1098, %rd1096;
	st.volatile.global.u32 	[%rd1097], %rd83;

$L__BB3_8:
	ret;

}
	// .globl	kernel_prepare
.entry kernel_prepare(
	.param .u32 kernel_prepare_param_0,
	.param .u64 .ptr .global .align 4 kernel_prepare_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [kernel_prepare_param_1];
	mov.b32 	%r1, %envreg3;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.lo.s32 	%r4, %r3, %r2;
	mov.u32 	%r5, %tid.x;
	add.s32 	%r6, %r5, %r1;
	neg.s32 	%r7, %r4;
	setp.ne.s32 	%p1, %r6, %r7;
	@%p1 bra 	$L__BB4_2;

	mov.u32 	%r8, 0;
	st.global.u32 	[%rd1], %r8;

$L__BB4_2:
	ret;

}

  